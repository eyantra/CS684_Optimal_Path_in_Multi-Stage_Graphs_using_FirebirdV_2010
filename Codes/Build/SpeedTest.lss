
SpeedTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020c  00800200  000058e0  00005974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000058e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  0080040c  0080040c  00005b80  2**0
                  ALLOC
  3 .debug_aranges 00000200  00000000  00000000  00005b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000655  00000000  00000000  00005d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000039e4  00000000  00000000  000063d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000018e9  00000000  00000000  00009db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000032f8  00000000  00000000  0000b6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000490  00000000  00000000  0000e99c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000783  00000000  00000000  0000ee2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a1a  00000000  00000000  0000f5af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000ffc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_5>
      18:	0c 94 86 01 	jmp	0x30c	; 0x30c <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 ee       	ldi	r30, 0xE0	; 224
      fc:	f8 e5       	ldi	r31, 0x58	; 88
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 30       	cpi	r26, 0x0C	; 12
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	14 e0       	ldi	r17, 0x04	; 4
     110:	ac e0       	ldi	r26, 0x0C	; 12
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a1 3a       	cpi	r26, 0xA1	; 161
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <main>
     122:	0c 94 6e 2c 	jmp	0x58dc	; 0x58dc <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <timer5_init>:
**/



void timer5_init()
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	TCCR5B=0x00;
     132:	e1 e2       	ldi	r30, 0x21	; 33
     134:	f1 e0       	ldi	r31, 0x01	; 1
     136:	10 82       	st	Z, r1
	TCCR5A=0xA9;
     138:	e0 e2       	ldi	r30, 0x20	; 32
     13a:	f1 e0       	ldi	r31, 0x01	; 1
     13c:	89 ea       	ldi	r24, 0xA9	; 169
     13e:	80 83       	st	Z, r24
	TCCR5B=0x0B;
     140:	e1 e2       	ldi	r30, 0x21	; 33
     142:	f1 e0       	ldi	r31, 0x01	; 1
     144:	8b e0       	ldi	r24, 0x0B	; 11
     146:	80 83       	st	Z, r24
	DDRE=0x18;
     148:	ed e2       	ldi	r30, 0x2D	; 45
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	88 e1       	ldi	r24, 0x18	; 24
     14e:	80 83       	st	Z, r24
	PORTE=0x00;
     150:	ee e2       	ldi	r30, 0x2E	; 46
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	10 82       	st	Z, r1
}
     156:	cf 91       	pop	r28
     158:	df 91       	pop	r29
     15a:	08 95       	ret

0000015c <adc_pin_config>:

void adc_pin_config (void)
{
     15c:	df 93       	push	r29
     15e:	cf 93       	push	r28
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00; 
     164:	e0 e3       	ldi	r30, 0x30	; 48
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	10 82       	st	Z, r1
	PORTF = 0x00;
     16a:	e1 e3       	ldi	r30, 0x31	; 49
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	10 82       	st	Z, r1
	DDRK = 0x00;
     170:	e7 e0       	ldi	r30, 0x07	; 7
     172:	f1 e0       	ldi	r31, 0x01	; 1
     174:	10 82       	st	Z, r1
	PORTK = 0x00;
     176:	e8 e0       	ldi	r30, 0x08	; 8
     178:	f1 e0       	ldi	r31, 0x01	; 1
     17a:	10 82       	st	Z, r1
}
     17c:	cf 91       	pop	r28
     17e:	df 91       	pop	r29
     180:	08 95       	ret

00000182 <adc_init>:

void adc_init()
{
     182:	df 93       	push	r29
     184:	cf 93       	push	r28
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
     18a:	ea e7       	ldi	r30, 0x7A	; 122
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     190:	eb e7       	ldi	r30, 0x7B	; 123
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     196:	ec e7       	ldi	r30, 0x7C	; 124
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 e2       	ldi	r24, 0x20	; 32
     19c:	80 83       	st	Z, r24
	ACSR = 0x80;
     19e:	e0 e5       	ldi	r30, 0x50	; 80
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 e8       	ldi	r24, 0x80	; 128
     1a4:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     1a6:	ea e7       	ldi	r30, 0x7A	; 122
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	86 e8       	ldi	r24, 0x86	; 134
     1ac:	80 83       	st	Z, r24
}
     1ae:	cf 91       	pop	r28
     1b0:	df 91       	pop	r29
     1b2:	08 95       	ret

000001b4 <velocity>:



void velocity(unsigned char left_motor, unsigned char right_motor)
{
     1b4:	df 93       	push	r29
     1b6:	cf 93       	push	r28
     1b8:	0f 92       	push	r0
     1ba:	0f 92       	push	r0
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL=left_motor;
     1c4:	e8 e2       	ldi	r30, 0x28	; 40
     1c6:	f1 e0       	ldi	r31, 0x01	; 1
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	80 83       	st	Z, r24
	OCR5BL=right_motor;
     1cc:	ea e2       	ldi	r30, 0x2A	; 42
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	8a 81       	ldd	r24, Y+2	; 0x02
     1d2:	80 83       	st	Z, r24
}
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	cf 91       	pop	r28
     1da:	df 91       	pop	r29
     1dc:	08 95       	ret

000001de <INIT_PORTS>:


void INIT_PORTS()
{
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
	DDRA=0x0F;
     1e6:	e1 e2       	ldi	r30, 0x21	; 33
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	8f e0       	ldi	r24, 0x0F	; 15
     1ec:	80 83       	st	Z, r24
	PORTA=0x00;
     1ee:	e2 e2       	ldi	r30, 0x22	; 34
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	10 82       	st	Z, r1
	DDRL=0x18;
     1f4:	ea e0       	ldi	r30, 0x0A	; 10
     1f6:	f1 e0       	ldi	r31, 0x01	; 1
     1f8:	88 e1       	ldi	r24, 0x18	; 24
     1fa:	80 83       	st	Z, r24
	PORTL=0x18;
     1fc:	eb e0       	ldi	r30, 0x0B	; 11
     1fe:	f1 e0       	ldi	r31, 0x01	; 1
     200:	88 e1       	ldi	r24, 0x18	; 24
     202:	80 83       	st	Z, r24
}
     204:	cf 91       	pop	r28
     206:	df 91       	pop	r29
     208:	08 95       	ret

0000020a <FORWARD>:

void FORWARD()
{
     20a:	df 93       	push	r29
     20c:	cf 93       	push	r28
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x06;
     212:	e2 e2       	ldi	r30, 0x22	; 34
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	86 e0       	ldi	r24, 0x06	; 6
     218:	80 83       	st	Z, r24
}
     21a:	cf 91       	pop	r28
     21c:	df 91       	pop	r29
     21e:	08 95       	ret

00000220 <STOP>:

void STOP()
{
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x00;
     228:	e2 e2       	ldi	r30, 0x22	; 34
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	10 82       	st	Z, r1
}
     22e:	cf 91       	pop	r28
     230:	df 91       	pop	r29
     232:	08 95       	ret

00000234 <REVERSE>:

void REVERSE()
{
     234:	df 93       	push	r29
     236:	cf 93       	push	r28
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x09;
     23c:	e2 e2       	ldi	r30, 0x22	; 34
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	89 e0       	ldi	r24, 0x09	; 9
     242:	80 83       	st	Z, r24
}
     244:	cf 91       	pop	r28
     246:	df 91       	pop	r29
     248:	08 95       	ret

0000024a <LEFT_TURN>:

void LEFT_TURN()
{
     24a:	df 93       	push	r29
     24c:	cf 93       	push	r28
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x05;
     252:	e2 e2       	ldi	r30, 0x22	; 34
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	85 e0       	ldi	r24, 0x05	; 5
     258:	80 83       	st	Z, r24
}
     25a:	cf 91       	pop	r28
     25c:	df 91       	pop	r29
     25e:	08 95       	ret

00000260 <RIGHT_TURN>:

void RIGHT_TURN()
{
     260:	df 93       	push	r29
     262:	cf 93       	push	r28
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x0A;
     268:	e2 e2       	ldi	r30, 0x22	; 34
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	8a e0       	ldi	r24, 0x0A	; 10
     26e:	80 83       	st	Z, r24
}
     270:	cf 91       	pop	r28
     272:	df 91       	pop	r29
     274:	08 95       	ret

00000276 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void)  //Interrupt 4 enable
{
     276:	df 93       	push	r29
     278:	cf 93       	push	r28
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
          cli(); //Clears the global interrupt
     27e:	f8 94       	cli
          EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     280:	aa e6       	ldi	r26, 0x6A	; 106
     282:	b0 e0       	ldi	r27, 0x00	; 0
     284:	ea e6       	ldi	r30, 0x6A	; 106
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	82 60       	ori	r24, 0x02	; 2
     28c:	8c 93       	st	X, r24
          EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     28e:	ad e3       	ldi	r26, 0x3D	; 61
     290:	b0 e0       	ldi	r27, 0x00	; 0
     292:	ed e3       	ldi	r30, 0x3D	; 61
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	80 61       	ori	r24, 0x10	; 16
     29a:	8c 93       	st	X, r24
          sei();   // Enables the global interrupt 
     29c:	78 94       	sei
}
     29e:	cf 91       	pop	r28
     2a0:	df 91       	pop	r29
     2a2:	08 95       	ret

000002a4 <right_position_encoder_interrupt_init>:


void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
     2a4:	df 93       	push	r29
     2a6:	cf 93       	push	r28
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
     2ac:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     2ae:	aa e6       	ldi	r26, 0x6A	; 106
     2b0:	b0 e0       	ldi	r27, 0x00	; 0
     2b2:	ea e6       	ldi	r30, 0x6A	; 106
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	88 60       	ori	r24, 0x08	; 8
     2ba:	8c 93       	st	X, r24
 	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     2bc:	ad e3       	ldi	r26, 0x3D	; 61
     2be:	b0 e0       	ldi	r27, 0x00	; 0
     2c0:	ed e3       	ldi	r30, 0x3D	; 61
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	80 81       	ld	r24, Z
     2c6:	80 62       	ori	r24, 0x20	; 32
     2c8:	8c 93       	st	X, r24
	sei();   // Enables the global interrupt 
     2ca:	78 94       	sei
}
     2cc:	cf 91       	pop	r28
     2ce:	df 91       	pop	r29
     2d0:	08 95       	ret

000002d2 <__vector_5>:

ISR(INT4_vect) 
{
     2d2:	1f 92       	push	r1
     2d4:	0f 92       	push	r0
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	0f 92       	push	r0
     2da:	11 24       	eor	r1, r1
     2dc:	8f 93       	push	r24
     2de:	9f 93       	push	r25
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
	LeftShaftCount++;  //increment left shaft position count
     2e8:	80 91 87 04 	lds	r24, 0x0487
     2ec:	90 91 88 04 	lds	r25, 0x0488
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	90 93 88 04 	sts	0x0488, r25
     2f6:	80 93 87 04 	sts	0x0487, r24
	//lcd_cursor(1,1);
	//lcd_string('0' + LeftShaftCount);
}
     2fa:	cf 91       	pop	r28
     2fc:	df 91       	pop	r29
     2fe:	9f 91       	pop	r25
     300:	8f 91       	pop	r24
     302:	0f 90       	pop	r0
     304:	0f be       	out	0x3f, r0	; 63
     306:	0f 90       	pop	r0
     308:	1f 90       	pop	r1
     30a:	18 95       	reti

0000030c <__vector_6>:

ISR(INT5_vect)
{
     30c:	1f 92       	push	r1
     30e:	0f 92       	push	r0
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	0f 92       	push	r0
     314:	11 24       	eor	r1, r1
     316:	8f 93       	push	r24
     318:	9f 93       	push	r25
     31a:	df 93       	push	r29
     31c:	cf 93       	push	r28
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
	RightShaftCount++;  //increment right shaft position count
     322:	80 91 59 04 	lds	r24, 0x0459
     326:	90 91 5a 04 	lds	r25, 0x045A
     32a:	01 96       	adiw	r24, 0x01	; 1
     32c:	90 93 5a 04 	sts	0x045A, r25
     330:	80 93 59 04 	sts	0x0459, r24
	//lcd_cursor(2,1);
	//lcd_string('0' + LeftShaftCount);
}
     334:	cf 91       	pop	r28
     336:	df 91       	pop	r29
     338:	9f 91       	pop	r25
     33a:	8f 91       	pop	r24
     33c:	0f 90       	pop	r0
     33e:	0f be       	out	0x3f, r0	; 63
     340:	0f 90       	pop	r0
     342:	1f 90       	pop	r1
     344:	18 95       	reti

00000346 <linear_distance_mm>:



void linear_distance_mm(unsigned int DistanceInMM)
{
     346:	df 93       	push	r29
     348:	cf 93       	push	r28
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	2a 97       	sbiw	r28, 0x0a	; 10
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	f8 94       	cli
     354:	de bf       	out	0x3e, r29	; 62
     356:	0f be       	out	0x3f, r0	; 63
     358:	cd bf       	out	0x3d, r28	; 61
     35a:	9a 87       	std	Y+10, r25	; 0x0a
     35c:	89 87       	std	Y+9, r24	; 0x09
 	float ReqdShaftCount = 0;
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	8d 83       	std	Y+5, r24	; 0x05
     368:	9e 83       	std	Y+6, r25	; 0x06
     36a:	af 83       	std	Y+7, r26	; 0x07
     36c:	b8 87       	std	Y+8, r27	; 0x08
	 unsigned long int ReqdShaftCountInt = 0;
     36e:	19 82       	std	Y+1, r1	; 0x01
     370:	1a 82       	std	Y+2, r1	; 0x02
     372:	1b 82       	std	Y+3, r1	; 0x03
     374:	1c 82       	std	Y+4, r1	; 0x04

 	ReqdShaftCount = DistanceInMM / 5.338; 
     376:	89 85       	ldd	r24, Y+9	; 0x09
     378:	9a 85       	ldd	r25, Y+10	; 0x0a
     37a:	cc 01       	movw	r24, r24
     37c:	a0 e0       	ldi	r26, 0x00	; 0
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	bc 01       	movw	r22, r24
     382:	cd 01       	movw	r24, r26
     384:	0e 94 7f 28 	call	0x50fe	; 0x50fe <__floatunsisf>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	bc 01       	movw	r22, r24
     38e:	cd 01       	movw	r24, r26
     390:	25 ee       	ldi	r18, 0xE5	; 229
     392:	30 ed       	ldi	r19, 0xD0	; 208
     394:	4a ea       	ldi	r20, 0xAA	; 170
     396:	50 e4       	ldi	r21, 0x40	; 64
     398:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__divsf3>
     39c:	dc 01       	movw	r26, r24
     39e:	cb 01       	movw	r24, r22
     3a0:	8d 83       	std	Y+5, r24	; 0x05
     3a2:	9e 83       	std	Y+6, r25	; 0x06
     3a4:	af 83       	std	Y+7, r26	; 0x07
     3a6:	b8 87       	std	Y+8, r27	; 0x08
	// division by resolution to get shaft count
	 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     3a8:	6d 81       	ldd	r22, Y+5	; 0x05
     3aa:	7e 81       	ldd	r23, Y+6	; 0x06
     3ac:	8f 81       	ldd	r24, Y+7	; 0x07
     3ae:	98 85       	ldd	r25, Y+8	; 0x08
     3b0:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
     3b4:	dc 01       	movw	r26, r24
     3b6:	cb 01       	movw	r24, r22
     3b8:	89 83       	std	Y+1, r24	; 0x01
     3ba:	9a 83       	std	Y+2, r25	; 0x02
     3bc:	ab 83       	std	Y+3, r26	; 0x03
     3be:	bc 83       	std	Y+4, r27	; 0x04
  
 	RightShaftCount = 0;
     3c0:	10 92 5a 04 	sts	0x045A, r1
     3c4:	10 92 59 04 	sts	0x0459, r1
	FORWARD();
     3c8:	0e 94 05 01 	call	0x20a	; 0x20a <FORWARD>
 	while(1)
 	{
  		if(RightShaftCount > ReqdShaftCountInt)
     3cc:	80 91 59 04 	lds	r24, 0x0459
     3d0:	90 91 5a 04 	lds	r25, 0x045A
     3d4:	9c 01       	movw	r18, r24
     3d6:	44 27       	eor	r20, r20
     3d8:	37 fd       	sbrc	r19, 7
     3da:	40 95       	com	r20
     3dc:	54 2f       	mov	r21, r20
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	9a 81       	ldd	r25, Y+2	; 0x02
     3e2:	ab 81       	ldd	r26, Y+3	; 0x03
     3e4:	bc 81       	ldd	r27, Y+4	; 0x04
     3e6:	82 17       	cp	r24, r18
     3e8:	93 07       	cpc	r25, r19
     3ea:	a4 07       	cpc	r26, r20
     3ec:	b5 07       	cpc	r27, r21
     3ee:	70 f7       	brcc	.-36     	; 0x3cc <linear_distance_mm+0x86>
 		 {
  		break;
 		 }
	 } 
 STOP(); //Stop action
     3f0:	0e 94 10 01 	call	0x220	; 0x220 <STOP>
}
     3f4:	2a 96       	adiw	r28, 0x0a	; 10
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
     400:	cf 91       	pop	r28
     402:	df 91       	pop	r29
     404:	08 95       	ret

00000406 <reverse_distance_mm>:


void reverse_distance_mm(unsigned int DistanceInMM)
{
     406:	df 93       	push	r29
     408:	cf 93       	push	r28
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	2a 97       	sbiw	r28, 0x0a	; 10
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	9a 87       	std	Y+10, r25	; 0x0a
     41c:	89 87       	std	Y+9, r24	; 0x09
	
 	float ReqdShaftCount = 0;
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	8d 83       	std	Y+5, r24	; 0x05
     428:	9e 83       	std	Y+6, r25	; 0x06
     42a:	af 83       	std	Y+7, r26	; 0x07
     42c:	b8 87       	std	Y+8, r27	; 0x08
	 unsigned long int ReqdShaftCountInt = 0;
     42e:	19 82       	std	Y+1, r1	; 0x01
     430:	1a 82       	std	Y+2, r1	; 0x02
     432:	1b 82       	std	Y+3, r1	; 0x03
     434:	1c 82       	std	Y+4, r1	; 0x04

 	ReqdShaftCount = DistanceInMM / 5.338; 
     436:	89 85       	ldd	r24, Y+9	; 0x09
     438:	9a 85       	ldd	r25, Y+10	; 0x0a
     43a:	cc 01       	movw	r24, r24
     43c:	a0 e0       	ldi	r26, 0x00	; 0
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	bc 01       	movw	r22, r24
     442:	cd 01       	movw	r24, r26
     444:	0e 94 7f 28 	call	0x50fe	; 0x50fe <__floatunsisf>
     448:	dc 01       	movw	r26, r24
     44a:	cb 01       	movw	r24, r22
     44c:	bc 01       	movw	r22, r24
     44e:	cd 01       	movw	r24, r26
     450:	25 ee       	ldi	r18, 0xE5	; 229
     452:	30 ed       	ldi	r19, 0xD0	; 208
     454:	4a ea       	ldi	r20, 0xAA	; 170
     456:	50 e4       	ldi	r21, 0x40	; 64
     458:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__divsf3>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	8d 83       	std	Y+5, r24	; 0x05
     462:	9e 83       	std	Y+6, r25	; 0x06
     464:	af 83       	std	Y+7, r26	; 0x07
     466:	b8 87       	std	Y+8, r27	; 0x08
	// division by resolution to get shaft count
	 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     468:	6d 81       	ldd	r22, Y+5	; 0x05
     46a:	7e 81       	ldd	r23, Y+6	; 0x06
     46c:	8f 81       	ldd	r24, Y+7	; 0x07
     46e:	98 85       	ldd	r25, Y+8	; 0x08
     470:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	89 83       	std	Y+1, r24	; 0x01
     47a:	9a 83       	std	Y+2, r25	; 0x02
     47c:	ab 83       	std	Y+3, r26	; 0x03
     47e:	bc 83       	std	Y+4, r27	; 0x04
  
 	RightShaftCount = 0;
     480:	10 92 5a 04 	sts	0x045A, r1
     484:	10 92 59 04 	sts	0x0459, r1
	REVERSE();
     488:	0e 94 1a 01 	call	0x234	; 0x234 <REVERSE>
 	while(1)
 	{
  		if(RightShaftCount > ReqdShaftCountInt)
     48c:	80 91 59 04 	lds	r24, 0x0459
     490:	90 91 5a 04 	lds	r25, 0x045A
     494:	9c 01       	movw	r18, r24
     496:	44 27       	eor	r20, r20
     498:	37 fd       	sbrc	r19, 7
     49a:	40 95       	com	r20
     49c:	54 2f       	mov	r21, r20
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	9a 81       	ldd	r25, Y+2	; 0x02
     4a2:	ab 81       	ldd	r26, Y+3	; 0x03
     4a4:	bc 81       	ldd	r27, Y+4	; 0x04
     4a6:	82 17       	cp	r24, r18
     4a8:	93 07       	cpc	r25, r19
     4aa:	a4 07       	cpc	r26, r20
     4ac:	b5 07       	cpc	r27, r21
     4ae:	70 f7       	brcc	.-36     	; 0x48c <reverse_distance_mm+0x86>
 		 {
  		break;
 		 }
	 } 
 STOP(); //Stop action
     4b0:	0e 94 10 01 	call	0x220	; 0x220 <STOP>
}
     4b4:	2a 96       	adiw	r28, 0x0a	; 10
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	cf 91       	pop	r28
     4c2:	df 91       	pop	r29
     4c4:	08 95       	ret

000004c6 <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees, int dir)
{
     4c6:	df 93       	push	r29
     4c8:	cf 93       	push	r28
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	2c 97       	sbiw	r28, 0x0c	; 12
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	9a 87       	std	Y+10, r25	; 0x0a
     4dc:	89 87       	std	Y+9, r24	; 0x09
     4de:	7c 87       	std	Y+12, r23	; 0x0c
     4e0:	6b 87       	std	Y+11, r22	; 0x0b
	velocity(100,100);
     4e2:	84 e6       	ldi	r24, 0x64	; 100
     4e4:	64 e6       	ldi	r22, 0x64	; 100
     4e6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <velocity>
    float ReqdShaftCount = 0;
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	a0 e0       	ldi	r26, 0x00	; 0
     4f0:	b0 e0       	ldi	r27, 0x00	; 0
     4f2:	8d 83       	std	Y+5, r24	; 0x05
     4f4:	9e 83       	std	Y+6, r25	; 0x06
     4f6:	af 83       	std	Y+7, r26	; 0x07
     4f8:	b8 87       	std	Y+8, r27	; 0x08
    unsigned long int ReqdShaftCountInt = 0;
     4fa:	19 82       	std	Y+1, r1	; 0x01
     4fc:	1a 82       	std	Y+2, r1	; 0x02
     4fe:	1b 82       	std	Y+3, r1	; 0x03
     500:	1c 82       	std	Y+4, r1	; 0x04
	//	Degrees = Degrees * (165/180);
	//else if(dir == 2)
	//	Degrees = Degrees * (135/180);

    
    RightShaftCount = 0; //defined globle variable
     502:	10 92 5a 04 	sts	0x045A, r1
     506:	10 92 59 04 	sts	0x0459, r1
    LeftShaftCount = 0; 
     50a:	10 92 88 04 	sts	0x0488, r1
     50e:	10 92 87 04 	sts	0x0487, r1

	if(dir == 1)
     512:	8b 85       	ldd	r24, Y+11	; 0x0b
     514:	9c 85       	ldd	r25, Y+12	; 0x0c
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	91 05       	cpc	r25, r1
     51a:	09 f0       	breq	.+2      	; 0x51e <angle_rotate+0x58>
     51c:	3f c0       	rjmp	.+126    	; 0x59c <angle_rotate+0xd6>
	{
		ReqdShaftCount = (float) Degrees * 155 / 4.090 / 180; // division by resolution to get shaft count
     51e:	89 85       	ldd	r24, Y+9	; 0x09
     520:	9a 85       	ldd	r25, Y+10	; 0x0a
     522:	cc 01       	movw	r24, r24
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	bc 01       	movw	r22, r24
     52a:	cd 01       	movw	r24, r26
     52c:	0e 94 7f 28 	call	0x50fe	; 0x50fe <__floatunsisf>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	bc 01       	movw	r22, r24
     536:	cd 01       	movw	r24, r26
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	4b e1       	ldi	r20, 0x1B	; 27
     53e:	53 e4       	ldi	r21, 0x43	; 67
     540:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
     544:	dc 01       	movw	r26, r24
     546:	cb 01       	movw	r24, r22
     548:	bc 01       	movw	r22, r24
     54a:	cd 01       	movw	r24, r26
     54c:	28 e4       	ldi	r18, 0x48	; 72
     54e:	31 ee       	ldi	r19, 0xE1	; 225
     550:	42 e8       	ldi	r20, 0x82	; 130
     552:	50 e4       	ldi	r21, 0x40	; 64
     554:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__divsf3>
     558:	dc 01       	movw	r26, r24
     55a:	cb 01       	movw	r24, r22
     55c:	bc 01       	movw	r22, r24
     55e:	cd 01       	movw	r24, r26
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	44 e3       	ldi	r20, 0x34	; 52
     566:	53 e4       	ldi	r21, 0x43	; 67
     568:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__divsf3>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	8d 83       	std	Y+5, r24	; 0x05
     572:	9e 83       	std	Y+6, r25	; 0x06
     574:	af 83       	std	Y+7, r26	; 0x07
     576:	b8 87       	std	Y+8, r27	; 0x08
    	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     578:	6d 81       	ldd	r22, Y+5	; 0x05
     57a:	7e 81       	ldd	r23, Y+6	; 0x06
     57c:	8f 81       	ldd	r24, Y+7	; 0x07
     57e:	98 85       	ldd	r25, Y+8	; 0x08
     580:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
     584:	dc 01       	movw	r26, r24
     586:	cb 01       	movw	r24, r22
     588:	cc 01       	movw	r24, r24
     58a:	a0 e0       	ldi	r26, 0x00	; 0
     58c:	b0 e0       	ldi	r27, 0x00	; 0
     58e:	89 83       	std	Y+1, r24	; 0x01
     590:	9a 83       	std	Y+2, r25	; 0x02
     592:	ab 83       	std	Y+3, r26	; 0x03
     594:	bc 83       	std	Y+4, r27	; 0x04
 
		LEFT_TURN();	
     596:	0e 94 25 01 	call	0x24a	; 0x24a <LEFT_TURN>
     59a:	43 c0       	rjmp	.+134    	; 0x622 <angle_rotate+0x15c>
	}
	else if(dir == 2)
     59c:	8b 85       	ldd	r24, Y+11	; 0x0b
     59e:	9c 85       	ldd	r25, Y+12	; 0x0c
     5a0:	82 30       	cpi	r24, 0x02	; 2
     5a2:	91 05       	cpc	r25, r1
     5a4:	f1 f5       	brne	.+124    	; 0x622 <angle_rotate+0x15c>
	{
		ReqdShaftCount = (float) Degrees * 145 / 4.090 / 180; // division by resolution to get shaft count
     5a6:	89 85       	ldd	r24, Y+9	; 0x09
     5a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     5aa:	cc 01       	movw	r24, r24
     5ac:	a0 e0       	ldi	r26, 0x00	; 0
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	bc 01       	movw	r22, r24
     5b2:	cd 01       	movw	r24, r26
     5b4:	0e 94 7f 28 	call	0x50fe	; 0x50fe <__floatunsisf>
     5b8:	dc 01       	movw	r26, r24
     5ba:	cb 01       	movw	r24, r22
     5bc:	bc 01       	movw	r22, r24
     5be:	cd 01       	movw	r24, r26
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	41 e1       	ldi	r20, 0x11	; 17
     5c6:	53 e4       	ldi	r21, 0x43	; 67
     5c8:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	bc 01       	movw	r22, r24
     5d2:	cd 01       	movw	r24, r26
     5d4:	28 e4       	ldi	r18, 0x48	; 72
     5d6:	31 ee       	ldi	r19, 0xE1	; 225
     5d8:	42 e8       	ldi	r20, 0x82	; 130
     5da:	50 e4       	ldi	r21, 0x40	; 64
     5dc:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__divsf3>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	bc 01       	movw	r22, r24
     5e6:	cd 01       	movw	r24, r26
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	44 e3       	ldi	r20, 0x34	; 52
     5ee:	53 e4       	ldi	r21, 0x43	; 67
     5f0:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__divsf3>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	8d 83       	std	Y+5, r24	; 0x05
     5fa:	9e 83       	std	Y+6, r25	; 0x06
     5fc:	af 83       	std	Y+7, r26	; 0x07
     5fe:	b8 87       	std	Y+8, r27	; 0x08
    	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     600:	6d 81       	ldd	r22, Y+5	; 0x05
     602:	7e 81       	ldd	r23, Y+6	; 0x06
     604:	8f 81       	ldd	r24, Y+7	; 0x07
     606:	98 85       	ldd	r25, Y+8	; 0x08
     608:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	cc 01       	movw	r24, r24
     612:	a0 e0       	ldi	r26, 0x00	; 0
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	89 83       	std	Y+1, r24	; 0x01
     618:	9a 83       	std	Y+2, r25	; 0x02
     61a:	ab 83       	std	Y+3, r26	; 0x03
     61c:	bc 83       	std	Y+4, r27	; 0x04
 

		RIGHT_TURN();
     61e:	0e 94 30 01 	call	0x260	; 0x260 <RIGHT_TURN>
	

 while (1)
  {

   if((RightShaftCount >= ReqdShaftCountInt) || (LeftShaftCount >= ReqdShaftCountInt))
     622:	80 91 59 04 	lds	r24, 0x0459
     626:	90 91 5a 04 	lds	r25, 0x045A
     62a:	9c 01       	movw	r18, r24
     62c:	44 27       	eor	r20, r20
     62e:	37 fd       	sbrc	r19, 7
     630:	40 95       	com	r20
     632:	54 2f       	mov	r21, r20
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	ab 81       	ldd	r26, Y+3	; 0x03
     63a:	bc 81       	ldd	r27, Y+4	; 0x04
     63c:	28 17       	cp	r18, r24
     63e:	39 07       	cpc	r19, r25
     640:	4a 07       	cpc	r20, r26
     642:	5b 07       	cpc	r21, r27
     644:	90 f4       	brcc	.+36     	; 0x66a <angle_rotate+0x1a4>
     646:	80 91 87 04 	lds	r24, 0x0487
     64a:	90 91 88 04 	lds	r25, 0x0488
     64e:	9c 01       	movw	r18, r24
     650:	44 27       	eor	r20, r20
     652:	37 fd       	sbrc	r19, 7
     654:	40 95       	com	r20
     656:	54 2f       	mov	r21, r20
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	ab 81       	ldd	r26, Y+3	; 0x03
     65e:	bc 81       	ldd	r27, Y+4	; 0x04
     660:	28 17       	cp	r18, r24
     662:	39 07       	cpc	r19, r25
     664:	4a 07       	cpc	r20, r26
     666:	5b 07       	cpc	r21, r27
     668:	e0 f2       	brcs	.-72     	; 0x622 <angle_rotate+0x15c>
      break;
  }
   STOP(); //Stop action
     66a:	0e 94 10 01 	call	0x220	; 0x220 <STOP>
}
     66e:	2c 96       	adiw	r28, 0x0c	; 12
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	cf 91       	pop	r28
     67c:	df 91       	pop	r29
     67e:	08 95       	ret

00000680 <ADC_Conversion_>:


unsigned char ADC_Conversion_(unsigned char Ch)
{
     680:	df 93       	push	r29
     682:	cf 93       	push	r28
     684:	0f 92       	push	r0
     686:	0f 92       	push	r0
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
     68e:	8a 81       	ldd	r24, Y+2	; 0x02
     690:	88 30       	cpi	r24, 0x08	; 8
     692:	20 f0       	brcs	.+8      	; 0x69c <ADC_Conversion_+0x1c>
		{
		ADCSRB = 0x08;			// select the ch. > 7
     694:	eb e7       	ldi	r30, 0x7B	; 123
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	88 e0       	ldi	r24, 0x08	; 8
     69a:	80 83       	st	Z, r24
		}
	Ch = Ch & 0x07;  			
     69c:	8a 81       	ldd	r24, Y+2	; 0x02
     69e:	87 70       	andi	r24, 0x07	; 7
     6a0:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		//do not disturb the left adjustment
     6a2:	ec e7       	ldi	r30, 0x7C	; 124
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	8a 81       	ldd	r24, Y+2	; 0x02
     6a8:	80 62       	ori	r24, 0x20	; 32
     6aa:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     6ac:	aa e7       	ldi	r26, 0x7A	; 122
     6ae:	b0 e0       	ldi	r27, 0x00	; 0
     6b0:	ea e7       	ldi	r30, 0x7A	; 122
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	80 64       	ori	r24, 0x40	; 64
     6b8:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     6ba:	ea e7       	ldi	r30, 0x7A	; 122
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	80 81       	ld	r24, Z
     6c0:	88 2f       	mov	r24, r24
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	80 71       	andi	r24, 0x10	; 16
     6c6:	90 70       	andi	r25, 0x00	; 0
     6c8:	00 97       	sbiw	r24, 0x00	; 0
     6ca:	b9 f3       	breq	.-18     	; 0x6ba <ADC_Conversion_+0x3a>
	a=ADCH;
     6cc:	e9 e7       	ldi	r30, 0x79	; 121
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	80 81       	ld	r24, Z
     6d2:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; 		//clear ADIF (ADC Interrupt Flag) by writing 1 to it
     6d4:	aa e7       	ldi	r26, 0x7A	; 122
     6d6:	b0 e0       	ldi	r27, 0x00	; 0
     6d8:	ea e7       	ldi	r30, 0x7A	; 122
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	80 81       	ld	r24, Z
     6de:	80 61       	ori	r24, 0x10	; 16
     6e0:	8c 93       	st	X, r24
	ADCSRB = 0x00;
     6e2:	eb e7       	ldi	r30, 0x7B	; 123
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	10 82       	st	Z, r1
	return a;
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
}
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	cf 91       	pop	r28
     6f0:	df 91       	pop	r29
     6f2:	08 95       	ret

000006f4 <main>:


////////////////////////////////////////////////Main function/////////////////////////////////

int main()
{
     6f4:	df 93       	push	r29
     6f6:	cf 93       	push	r28
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
	INIT_PORTS();
     6fc:	0e 94 ef 00 	call	0x1de	; 0x1de <INIT_PORTS>
	left_position_encoder_interrupt_init();
     700:	0e 94 3b 01 	call	0x276	; 0x276 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
     704:	0e 94 52 01 	call	0x2a4	; 0x2a4 <right_position_encoder_interrupt_init>

	timer5_init();
     708:	0e 94 95 00 	call	0x12a	; 0x12a <timer5_init>


	cli(); //Clears the global interrupts
     70c:	f8 94       	cli
	adc_pin_config();
     70e:	0e 94 ae 00 	call	0x15c	; 0x15c <adc_pin_config>
	adc_init();
     712:	0e 94 c1 00 	call	0x182	; 0x182 <adc_init>
	sei(); //Enables the global interrupts
     716:	78 94       	sei


	init_devices();
     718:	0e 94 b6 23 	call	0x476c	; 0x476c <init_devices>
	lcd_set_4bit();
     71c:	0e 94 0b 1a 	call	0x3416	; 0x3416 <lcd_set_4bit>
	lcd_init();
     720:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <lcd_init>
     724:	24 c0       	rjmp	.+72     	; 0x76e <main+0x7a>

	while (levelcount!=5)
	{


		if (levelcount==1)
     726:	80 91 00 02 	lds	r24, 0x0200
     72a:	90 91 01 02 	lds	r25, 0x0201
     72e:	81 30       	cpi	r24, 0x01	; 1
     730:	91 05       	cpc	r25, r1
     732:	11 f4       	brne	.+4      	; 0x738 <main+0x44>
			start_level();
     734:	0e 94 23 0a 	call	0x1446	; 0x1446 <start_level>


		if (levelcount==2)
     738:	80 91 00 02 	lds	r24, 0x0200
     73c:	90 91 01 02 	lds	r25, 0x0201
     740:	82 30       	cpi	r24, 0x02	; 2
     742:	91 05       	cpc	r25, r1
     744:	11 f4       	brne	.+4      	; 0x74a <main+0x56>
			level2();
     746:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <level2>


		if (levelcount==3)
     74a:	80 91 00 02 	lds	r24, 0x0200
     74e:	90 91 01 02 	lds	r25, 0x0201
     752:	83 30       	cpi	r24, 0x03	; 3
     754:	91 05       	cpc	r25, r1
     756:	11 f4       	brne	.+4      	; 0x75c <main+0x68>
			level3();
     758:	0e 94 8d 13 	call	0x271a	; 0x271a <level3>


		if (levelcount==4)
     75c:	80 91 00 02 	lds	r24, 0x0200
     760:	90 91 01 02 	lds	r25, 0x0201
     764:	84 30       	cpi	r24, 0x04	; 4
     766:	91 05       	cpc	r25, r1
     768:	11 f4       	brne	.+4      	; 0x76e <main+0x7a>
			final_level();
     76a:	0e 94 3f 18 	call	0x307e	; 0x307e <final_level>
	lcd_set_4bit();
	lcd_init();
	
	//////////start/////////////

	while (levelcount!=5)
     76e:	80 91 00 02 	lds	r24, 0x0200
     772:	90 91 01 02 	lds	r25, 0x0201
     776:	85 30       	cpi	r24, 0x05	; 5
     778:	91 05       	cpc	r25, r1
     77a:	a9 f6       	brne	.-86     	; 0x726 <main+0x32>
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
			final_level();

	}


}
     780:	cf 91       	pop	r28
     782:	df 91       	pop	r29
     784:	08 95       	ret

00000786 <final_move>:
void final_move()
{
     786:	df 93       	push	r29
     788:	cf 93       	push	r28
     78a:	0f 92       	push	r0
     78c:	0f 92       	push	r0
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
	levelcount=0;
     792:	10 92 01 02 	sts	0x0201, r1
     796:	10 92 00 02 	sts	0x0200, r1
	struct node* final;
	temp[levelcount]=&final;
     79a:	80 91 00 02 	lds	r24, 0x0200
     79e:	90 91 01 02 	lds	r25, 0x0201
     7a2:	9e 01       	movw	r18, r28
     7a4:	2f 5f       	subi	r18, 0xFF	; 255
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	fc 01       	movw	r30, r24
     7ae:	ef 5a       	subi	r30, 0xAF	; 175
     7b0:	fb 4f       	sbci	r31, 0xFB	; 251
     7b2:	31 83       	std	Z+1, r19	; 0x01
     7b4:	20 83       	st	Z, r18
	lev1Count = edgeDetect(temp[levelcount]);
     7b6:	80 91 00 02 	lds	r24, 0x0200
     7ba:	90 91 01 02 	lds	r25, 0x0201
     7be:	88 0f       	add	r24, r24
     7c0:	99 1f       	adc	r25, r25
     7c2:	fc 01       	movw	r30, r24
     7c4:	ef 5a       	subi	r30, 0xAF	; 175
     7c6:	fb 4f       	sbci	r31, 0xFB	; 251
     7c8:	80 81       	ld	r24, Z
     7ca:	91 81       	ldd	r25, Z+1	; 0x01
     7cc:	0e 94 6f 06 	call	0xcde	; 0xcde <edgeDetect>
     7d0:	90 93 86 04 	sts	0x0486, r25
     7d4:	80 93 85 04 	sts	0x0485, r24
	rotateSkipping(lev1Count-final_index[0]);
     7d8:	20 91 85 04 	lds	r18, 0x0485
     7dc:	30 91 86 04 	lds	r19, 0x0486
     7e0:	80 91 5b 04 	lds	r24, 0x045B
     7e4:	90 91 5c 04 	lds	r25, 0x045C
     7e8:	a9 01       	movw	r20, r18
     7ea:	48 1b       	sub	r20, r24
     7ec:	59 0b       	sbc	r21, r25
     7ee:	ca 01       	movw	r24, r20
     7f0:	0e 94 29 06 	call	0xc52	; 0xc52 <rotateSkipping>
	followWhiteLineTillNode();
     7f4:	0e 94 46 08 	call	0x108c	; 0x108c <followWhiteLineTillNode>
	linear_distance_mm(60);
     7f8:	8c e3       	ldi	r24, 0x3C	; 60
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 a3 01 	call	0x346	; 0x346 <linear_distance_mm>

	angle_rotate((temp[levelcount]->angles[final_index[0]])-10,2);
     800:	80 91 00 02 	lds	r24, 0x0200
     804:	90 91 01 02 	lds	r25, 0x0201
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	fc 01       	movw	r30, r24
     80e:	ef 5a       	subi	r30, 0xAF	; 175
     810:	fb 4f       	sbci	r31, 0xFB	; 251
     812:	20 81       	ld	r18, Z
     814:	31 81       	ldd	r19, Z+1	; 0x01
     816:	80 91 5b 04 	lds	r24, 0x045B
     81a:	90 91 5c 04 	lds	r25, 0x045C
     81e:	05 96       	adiw	r24, 0x05	; 5
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	f9 01       	movw	r30, r18
     826:	e8 0f       	add	r30, r24
     828:	f9 1f       	adc	r31, r25
     82a:	80 81       	ld	r24, Z
     82c:	91 81       	ldd	r25, Z+1	; 0x01
     82e:	0a 97       	sbiw	r24, 0x0a	; 10
     830:	62 e0       	ldi	r22, 0x02	; 2
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
	levelcount++;
     838:	80 91 00 02 	lds	r24, 0x0200
     83c:	90 91 01 02 	lds	r25, 0x0201
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	90 93 01 02 	sts	0x0201, r25
     846:	80 93 00 02 	sts	0x0200, r24
	lev2Count = edgeDetect(temp[levelcount]);
     84a:	80 91 00 02 	lds	r24, 0x0200
     84e:	90 91 01 02 	lds	r25, 0x0201
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	fc 01       	movw	r30, r24
     858:	ef 5a       	subi	r30, 0xAF	; 175
     85a:	fb 4f       	sbci	r31, 0xFB	; 251
     85c:	80 81       	ld	r24, Z
     85e:	91 81       	ldd	r25, Z+1	; 0x01
     860:	0e 94 6f 06 	call	0xcde	; 0xcde <edgeDetect>
     864:	90 93 92 04 	sts	0x0492, r25
     868:	80 93 91 04 	sts	0x0491, r24
	rotateSkipping(lev2Count-final_index[1]);
     86c:	20 91 91 04 	lds	r18, 0x0491
     870:	30 91 92 04 	lds	r19, 0x0492
     874:	80 91 5d 04 	lds	r24, 0x045D
     878:	90 91 5e 04 	lds	r25, 0x045E
     87c:	a9 01       	movw	r20, r18
     87e:	48 1b       	sub	r20, r24
     880:	59 0b       	sbc	r21, r25
     882:	ca 01       	movw	r24, r20
     884:	0e 94 29 06 	call	0xc52	; 0xc52 <rotateSkipping>
	followWhiteLineTillNode();
     888:	0e 94 46 08 	call	0x108c	; 0x108c <followWhiteLineTillNode>
	linear_distance_mm(60);
     88c:	8c e3       	ldi	r24, 0x3C	; 60
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 a3 01 	call	0x346	; 0x346 <linear_distance_mm>

	angle_rotate((temp[levelcount]->angles[final_index[1]])-10,2);
     894:	80 91 00 02 	lds	r24, 0x0200
     898:	90 91 01 02 	lds	r25, 0x0201
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	fc 01       	movw	r30, r24
     8a2:	ef 5a       	subi	r30, 0xAF	; 175
     8a4:	fb 4f       	sbci	r31, 0xFB	; 251
     8a6:	20 81       	ld	r18, Z
     8a8:	31 81       	ldd	r19, Z+1	; 0x01
     8aa:	80 91 5d 04 	lds	r24, 0x045D
     8ae:	90 91 5e 04 	lds	r25, 0x045E
     8b2:	05 96       	adiw	r24, 0x05	; 5
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	f9 01       	movw	r30, r18
     8ba:	e8 0f       	add	r30, r24
     8bc:	f9 1f       	adc	r31, r25
     8be:	80 81       	ld	r24, Z
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
     8c2:	0a 97       	sbiw	r24, 0x0a	; 10
     8c4:	62 e0       	ldi	r22, 0x02	; 2
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
	levelcount++;
     8cc:	80 91 00 02 	lds	r24, 0x0200
     8d0:	90 91 01 02 	lds	r25, 0x0201
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	90 93 01 02 	sts	0x0201, r25
     8da:	80 93 00 02 	sts	0x0200, r24
	lev3Count = edgeDetect(temp[levelcount]);
     8de:	80 91 00 02 	lds	r24, 0x0200
     8e2:	90 91 01 02 	lds	r25, 0x0201
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	fc 01       	movw	r30, r24
     8ec:	ef 5a       	subi	r30, 0xAF	; 175
     8ee:	fb 4f       	sbci	r31, 0xFB	; 251
     8f0:	80 81       	ld	r24, Z
     8f2:	91 81       	ldd	r25, Z+1	; 0x01
     8f4:	0e 94 6f 06 	call	0xcde	; 0xcde <edgeDetect>
     8f8:	90 93 84 04 	sts	0x0484, r25
     8fc:	80 93 83 04 	sts	0x0483, r24
	rotateSkipping(lev3Count-final_index[2]);
     900:	20 91 83 04 	lds	r18, 0x0483
     904:	30 91 84 04 	lds	r19, 0x0484
     908:	80 91 5f 04 	lds	r24, 0x045F
     90c:	90 91 60 04 	lds	r25, 0x0460
     910:	a9 01       	movw	r20, r18
     912:	48 1b       	sub	r20, r24
     914:	59 0b       	sbc	r21, r25
     916:	ca 01       	movw	r24, r20
     918:	0e 94 29 06 	call	0xc52	; 0xc52 <rotateSkipping>
	followWhiteLineTillNode();
     91c:	0e 94 46 08 	call	0x108c	; 0x108c <followWhiteLineTillNode>
	exit(0);
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <_exit>

00000928 <printMatrix>:

}

void printMatrix()
{
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	a4 97       	sbiw	r28, 0x24	; 36
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
	int minPath = 10000;	//TODO: Set The minPath greater than the largest path possible
     93c:	80 e1       	ldi	r24, 0x10	; 16
     93e:	97 e2       	ldi	r25, 0x27	; 39
     940:	9c a3       	std	Y+36, r25	; 0x24
     942:	8b a3       	std	Y+35, r24	; 0x23
	int minIndex = -1;
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	9f ef       	ldi	r25, 0xFF	; 255
     948:	9a a3       	std	Y+34, r25	; 0x22
     94a:	89 a3       	std	Y+33, r24	; 0x21
	for(int y=0; y<4; y++)
     94c:	18 a2       	std	Y+32, r1	; 0x20
     94e:	1f 8e       	std	Y+31, r1	; 0x1f
     950:	2a c0       	rjmp	.+84     	; 0x9a6 <printMatrix+0x7e>
	{
		if(finalPathMatrix[y][3] < minPath)
     952:	8f 8d       	ldd	r24, Y+31	; 0x1f
     954:	98 a1       	ldd	r25, Y+32	; 0x20
     956:	88 0f       	add	r24, r24
     958:	99 1f       	adc	r25, r25
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	88 0f       	add	r24, r24
     960:	99 1f       	adc	r25, r25
     962:	fc 01       	movw	r30, r24
     964:	e7 59       	subi	r30, 0x97	; 151
     966:	fb 4f       	sbci	r31, 0xFB	; 251
     968:	20 81       	ld	r18, Z
     96a:	31 81       	ldd	r19, Z+1	; 0x01
     96c:	8b a1       	ldd	r24, Y+35	; 0x23
     96e:	9c a1       	ldd	r25, Y+36	; 0x24
     970:	28 17       	cp	r18, r24
     972:	39 07       	cpc	r19, r25
     974:	9c f4       	brge	.+38     	; 0x99c <printMatrix+0x74>
		{
			minPath = finalPathMatrix[y][3];
     976:	8f 8d       	ldd	r24, Y+31	; 0x1f
     978:	98 a1       	ldd	r25, Y+32	; 0x20
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	fc 01       	movw	r30, r24
     988:	e7 59       	subi	r30, 0x97	; 151
     98a:	fb 4f       	sbci	r31, 0xFB	; 251
     98c:	80 81       	ld	r24, Z
     98e:	91 81       	ldd	r25, Z+1	; 0x01
     990:	9c a3       	std	Y+36, r25	; 0x24
     992:	8b a3       	std	Y+35, r24	; 0x23
			minIndex = y;
     994:	8f 8d       	ldd	r24, Y+31	; 0x1f
     996:	98 a1       	ldd	r25, Y+32	; 0x20
     998:	9a a3       	std	Y+34, r25	; 0x22
     99a:	89 a3       	std	Y+33, r24	; 0x21

void printMatrix()
{
	int minPath = 10000;	//TODO: Set The minPath greater than the largest path possible
	int minIndex = -1;
	for(int y=0; y<4; y++)
     99c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     99e:	98 a1       	ldd	r25, Y+32	; 0x20
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	98 a3       	std	Y+32, r25	; 0x20
     9a4:	8f 8f       	std	Y+31, r24	; 0x1f
     9a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9a8:	98 a1       	ldd	r25, Y+32	; 0x20
     9aa:	84 30       	cpi	r24, 0x04	; 4
     9ac:	91 05       	cpc	r25, r1
     9ae:	8c f2       	brlt	.-94     	; 0x952 <printMatrix+0x2a>
			minPath = finalPathMatrix[y][3];
			minIndex = y;
		}
	}

	lcd_reset();
     9b0:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
	lcd_cursor(1,1);
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	lcd_string("Optimal Path:");
     9c0:	88 e0       	ldi	r24, 0x08	; 8
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
	
	lcd_cursor(2,1);
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	for(int x =0; x<3; x++)
     9d4:	1e 8e       	std	Y+30, r1	; 0x1e
     9d6:	1d 8e       	std	Y+29, r1	; 0x1d
     9d8:	ae c0       	rjmp	.+348    	; 0xb36 <printMatrix+0x20e>
	{
		itoa(finalPathMatrix[minIndex][x],buff,10);
     9da:	89 a1       	ldd	r24, Y+33	; 0x21
     9dc:	9a a1       	ldd	r25, Y+34	; 0x22
     9de:	2d 8d       	ldd	r18, Y+29	; 0x1d
     9e0:	3e 8d       	ldd	r19, Y+30	; 0x1e
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	82 0f       	add	r24, r18
     9ec:	93 1f       	adc	r25, r19
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	fc 01       	movw	r30, r24
     9f4:	ed 59       	subi	r30, 0x9D	; 157
     9f6:	fb 4f       	sbci	r31, 0xFB	; 251
     9f8:	80 81       	ld	r24, Z
     9fa:	91 81       	ldd	r25, Z+1	; 0x01
     9fc:	2a e2       	ldi	r18, 0x2A	; 42
     9fe:	34 e0       	ldi	r19, 0x04	; 4
     a00:	b9 01       	movw	r22, r18
     a02:	4a e0       	ldi	r20, 0x0A	; 10
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
		final_index[x]=finalPathMatrix[minIndex][x];
     a0a:	4d 8d       	ldd	r20, Y+29	; 0x1d
     a0c:	5e 8d       	ldd	r21, Y+30	; 0x1e
     a0e:	89 a1       	ldd	r24, Y+33	; 0x21
     a10:	9a a1       	ldd	r25, Y+34	; 0x22
     a12:	2d 8d       	ldd	r18, Y+29	; 0x1d
     a14:	3e 8d       	ldd	r19, Y+30	; 0x1e
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	82 0f       	add	r24, r18
     a20:	93 1f       	adc	r25, r19
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	fc 01       	movw	r30, r24
     a28:	ed 59       	subi	r30, 0x9D	; 157
     a2a:	fb 4f       	sbci	r31, 0xFB	; 251
     a2c:	20 81       	ld	r18, Z
     a2e:	31 81       	ldd	r19, Z+1	; 0x01
     a30:	ca 01       	movw	r24, r20
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	fc 01       	movw	r30, r24
     a38:	e5 5a       	subi	r30, 0xA5	; 165
     a3a:	fb 4f       	sbci	r31, 0xFB	; 251
     a3c:	31 83       	std	Z+1, r19	; 0x01
     a3e:	20 83       	st	Z, r18
		lcd_string(buff);		
     a40:	8a e2       	ldi	r24, 0x2A	; 42
     a42:	94 e0       	ldi	r25, 0x04	; 4
     a44:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	aa ef       	ldi	r26, 0xFA	; 250
     a4e:	b4 e4       	ldi	r27, 0x44	; 68
     a50:	89 8f       	std	Y+25, r24	; 0x19
     a52:	9a 8f       	std	Y+26, r25	; 0x1a
     a54:	ab 8f       	std	Y+27, r26	; 0x1b
     a56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a58:	69 8d       	ldd	r22, Y+25	; 0x19
     a5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a60:	2d ec       	ldi	r18, 0xCD	; 205
     a62:	3c ec       	ldi	r19, 0xCC	; 204
     a64:	4c e2       	ldi	r20, 0x2C	; 44
     a66:	55 e4       	ldi	r21, 0x45	; 69
     a68:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
     a6c:	dc 01       	movw	r26, r24
     a6e:	cb 01       	movw	r24, r22
     a70:	8d 8b       	std	Y+21, r24	; 0x15
     a72:	9e 8b       	std	Y+22, r25	; 0x16
     a74:	af 8b       	std	Y+23, r26	; 0x17
     a76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     a78:	6d 89       	ldd	r22, Y+21	; 0x15
     a7a:	7e 89       	ldd	r23, Y+22	; 0x16
     a7c:	8f 89       	ldd	r24, Y+23	; 0x17
     a7e:	98 8d       	ldd	r25, Y+24	; 0x18
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e8       	ldi	r20, 0x80	; 128
     a86:	5f e3       	ldi	r21, 0x3F	; 63
     a88:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
     a8c:	88 23       	and	r24, r24
     a8e:	2c f4       	brge	.+10     	; 0xa9a <printMatrix+0x172>
		__ticks = 1;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	9c 8b       	std	Y+20, r25	; 0x14
     a96:	8b 8b       	std	Y+19, r24	; 0x13
     a98:	3f c0       	rjmp	.+126    	; 0xb18 <printMatrix+0x1f0>
	else if (__tmp > 65535)
     a9a:	6d 89       	ldd	r22, Y+21	; 0x15
     a9c:	7e 89       	ldd	r23, Y+22	; 0x16
     a9e:	8f 89       	ldd	r24, Y+23	; 0x17
     aa0:	98 8d       	ldd	r25, Y+24	; 0x18
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	3f ef       	ldi	r19, 0xFF	; 255
     aa6:	4f e7       	ldi	r20, 0x7F	; 127
     aa8:	57 e4       	ldi	r21, 0x47	; 71
     aaa:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
     aae:	18 16       	cp	r1, r24
     ab0:	4c f5       	brge	.+82     	; 0xb04 <printMatrix+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ab2:	69 8d       	ldd	r22, Y+25	; 0x19
     ab4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ab6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ab8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e2       	ldi	r20, 0x20	; 32
     ac0:	51 e4       	ldi	r21, 0x41	; 65
     ac2:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
     ac6:	dc 01       	movw	r26, r24
     ac8:	cb 01       	movw	r24, r22
     aca:	bc 01       	movw	r22, r24
     acc:	cd 01       	movw	r24, r26
     ace:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
     ad2:	dc 01       	movw	r26, r24
     ad4:	cb 01       	movw	r24, r22
     ad6:	9c 8b       	std	Y+20, r25	; 0x14
     ad8:	8b 8b       	std	Y+19, r24	; 0x13
     ada:	0f c0       	rjmp	.+30     	; 0xafa <printMatrix+0x1d2>
     adc:	84 e1       	ldi	r24, 0x14	; 20
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	9a 8b       	std	Y+18, r25	; 0x12
     ae2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ae4:	89 89       	ldd	r24, Y+17	; 0x11
     ae6:	9a 89       	ldd	r25, Y+18	; 0x12
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <printMatrix+0x1c0>
     aec:	9a 8b       	std	Y+18, r25	; 0x12
     aee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     af0:	8b 89       	ldd	r24, Y+19	; 0x13
     af2:	9c 89       	ldd	r25, Y+20	; 0x14
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	9c 8b       	std	Y+20, r25	; 0x14
     af8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     afa:	8b 89       	ldd	r24, Y+19	; 0x13
     afc:	9c 89       	ldd	r25, Y+20	; 0x14
     afe:	00 97       	sbiw	r24, 0x00	; 0
     b00:	69 f7       	brne	.-38     	; 0xadc <printMatrix+0x1b4>
     b02:	14 c0       	rjmp	.+40     	; 0xb2c <printMatrix+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b04:	6d 89       	ldd	r22, Y+21	; 0x15
     b06:	7e 89       	ldd	r23, Y+22	; 0x16
     b08:	8f 89       	ldd	r24, Y+23	; 0x17
     b0a:	98 8d       	ldd	r25, Y+24	; 0x18
     b0c:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	9c 8b       	std	Y+20, r25	; 0x14
     b16:	8b 8b       	std	Y+19, r24	; 0x13
     b18:	8b 89       	ldd	r24, Y+19	; 0x13
     b1a:	9c 89       	ldd	r25, Y+20	; 0x14
     b1c:	98 8b       	std	Y+16, r25	; 0x10
     b1e:	8f 87       	std	Y+15, r24	; 0x0f
     b20:	8f 85       	ldd	r24, Y+15	; 0x0f
     b22:	98 89       	ldd	r25, Y+16	; 0x10
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <printMatrix+0x1fc>
     b28:	98 8b       	std	Y+16, r25	; 0x10
     b2a:	8f 87       	std	Y+15, r24	; 0x0f
	lcd_reset();
	lcd_cursor(1,1);
	lcd_string("Optimal Path:");
	
	lcd_cursor(2,1);
	for(int x =0; x<3; x++)
     b2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	9e 8f       	std	Y+30, r25	; 0x1e
     b34:	8d 8f       	std	Y+29, r24	; 0x1d
     b36:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b38:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b3a:	83 30       	cpi	r24, 0x03	; 3
     b3c:	91 05       	cpc	r25, r1
     b3e:	0c f4       	brge	.+2      	; 0xb42 <printMatrix+0x21a>
     b40:	4c cf       	rjmp	.-360    	; 0x9da <printMatrix+0xb2>
		final_index[x]=finalPathMatrix[minIndex][x];
		lcd_string(buff);		
		_delay_ms(2000);
	}

	itoa(minPath,buff,10);
     b42:	8b a1       	ldd	r24, Y+35	; 0x23
     b44:	9c a1       	ldd	r25, Y+36	; 0x24
     b46:	2a e2       	ldi	r18, 0x2A	; 42
     b48:	34 e0       	ldi	r19, 0x04	; 4
     b4a:	b9 01       	movw	r22, r18
     b4c:	4a e0       	ldi	r20, 0x0A	; 10
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
	lcd_string(buff);
     b54:	8a e2       	ldi	r24, 0x2A	; 42
     b56:	94 e0       	ldi	r25, 0x04	; 4
     b58:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 e4       	ldi	r25, 0x40	; 64
     b60:	ac e9       	ldi	r26, 0x9C	; 156
     b62:	b5 e4       	ldi	r27, 0x45	; 69
     b64:	8b 87       	std	Y+11, r24	; 0x0b
     b66:	9c 87       	std	Y+12, r25	; 0x0c
     b68:	ad 87       	std	Y+13, r26	; 0x0d
     b6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b70:	8d 85       	ldd	r24, Y+13	; 0x0d
     b72:	9e 85       	ldd	r25, Y+14	; 0x0e
     b74:	2d ec       	ldi	r18, 0xCD	; 205
     b76:	3c ec       	ldi	r19, 0xCC	; 204
     b78:	4c e2       	ldi	r20, 0x2C	; 44
     b7a:	55 e4       	ldi	r21, 0x45	; 69
     b7c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
     b80:	dc 01       	movw	r26, r24
     b82:	cb 01       	movw	r24, r22
     b84:	8f 83       	std	Y+7, r24	; 0x07
     b86:	98 87       	std	Y+8, r25	; 0x08
     b88:	a9 87       	std	Y+9, r26	; 0x09
     b8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b8c:	6f 81       	ldd	r22, Y+7	; 0x07
     b8e:	78 85       	ldd	r23, Y+8	; 0x08
     b90:	89 85       	ldd	r24, Y+9	; 0x09
     b92:	9a 85       	ldd	r25, Y+10	; 0x0a
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	40 e8       	ldi	r20, 0x80	; 128
     b9a:	5f e3       	ldi	r21, 0x3F	; 63
     b9c:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
     ba0:	88 23       	and	r24, r24
     ba2:	2c f4       	brge	.+10     	; 0xbae <printMatrix+0x286>
		__ticks = 1;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	9e 83       	std	Y+6, r25	; 0x06
     baa:	8d 83       	std	Y+5, r24	; 0x05
     bac:	3f c0       	rjmp	.+126    	; 0xc2c <printMatrix+0x304>
	else if (__tmp > 65535)
     bae:	6f 81       	ldd	r22, Y+7	; 0x07
     bb0:	78 85       	ldd	r23, Y+8	; 0x08
     bb2:	89 85       	ldd	r24, Y+9	; 0x09
     bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	3f ef       	ldi	r19, 0xFF	; 255
     bba:	4f e7       	ldi	r20, 0x7F	; 127
     bbc:	57 e4       	ldi	r21, 0x47	; 71
     bbe:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
     bc2:	18 16       	cp	r1, r24
     bc4:	4c f5       	brge	.+82     	; 0xc18 <printMatrix+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
     bca:	8d 85       	ldd	r24, Y+13	; 0x0d
     bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e2       	ldi	r20, 0x20	; 32
     bd4:	51 e4       	ldi	r21, 0x41	; 65
     bd6:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
     bda:	dc 01       	movw	r26, r24
     bdc:	cb 01       	movw	r24, r22
     bde:	bc 01       	movw	r22, r24
     be0:	cd 01       	movw	r24, r26
     be2:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
     bee:	0f c0       	rjmp	.+30     	; 0xc0e <printMatrix+0x2e6>
     bf0:	84 e1       	ldi	r24, 0x14	; 20
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	9c 83       	std	Y+4, r25	; 0x04
     bf6:	8b 83       	std	Y+3, r24	; 0x03
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	9c 81       	ldd	r25, Y+4	; 0x04
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	f1 f7       	brne	.-4      	; 0xbfc <printMatrix+0x2d4>
     c00:	9c 83       	std	Y+4, r25	; 0x04
     c02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c04:	8d 81       	ldd	r24, Y+5	; 0x05
     c06:	9e 81       	ldd	r25, Y+6	; 0x06
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c0e:	8d 81       	ldd	r24, Y+5	; 0x05
     c10:	9e 81       	ldd	r25, Y+6	; 0x06
     c12:	00 97       	sbiw	r24, 0x00	; 0
     c14:	69 f7       	brne	.-38     	; 0xbf0 <printMatrix+0x2c8>
     c16:	14 c0       	rjmp	.+40     	; 0xc40 <printMatrix+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c18:	6f 81       	ldd	r22, Y+7	; 0x07
     c1a:	78 85       	ldd	r23, Y+8	; 0x08
     c1c:	89 85       	ldd	r24, Y+9	; 0x09
     c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c20:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
     c24:	dc 01       	movw	r26, r24
     c26:	cb 01       	movw	r24, r22
     c28:	9e 83       	std	Y+6, r25	; 0x06
     c2a:	8d 83       	std	Y+5, r24	; 0x05
     c2c:	8d 81       	ldd	r24, Y+5	; 0x05
     c2e:	9e 81       	ldd	r25, Y+6	; 0x06
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	89 83       	std	Y+1, r24	; 0x01
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <printMatrix+0x310>
     c3c:	9a 83       	std	Y+2, r25	; 0x02
     c3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5000);




}
     c40:	a4 96       	adiw	r28, 0x24	; 36
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <rotateSkipping>:

//////////////////////////////////////////////////functions//////////////////////////////////////

void rotateSkipping(int n)
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	27 97       	sbiw	r28, 0x07	; 7
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	9f 83       	std	Y+7, r25	; 0x07
     c68:	8e 83       	std	Y+6, r24	; 0x06
	unsigned char sharp1, sharp2, sharp3;
	int alreadyOnWhite = 0;	// Holds the number of outgoing edges 
     c6a:	1a 82       	std	Y+2, r1	; 0x02
     c6c:	19 82       	std	Y+1, r1	; 0x01
     c6e:	29 c0       	rjmp	.+82     	; 0xcc2 <rotateSkipping+0x70>

	while(n > 0)
	{
		sharp1 = ADC_Conversion_(1);
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	0e 94 40 03 	call	0x680	; 0x680 <ADC_Conversion_>
     c76:	8d 83       	std	Y+5, r24	; 0x05
		sharp2 = ADC_Conversion_(2);
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	0e 94 40 03 	call	0x680	; 0x680 <ADC_Conversion_>
     c7e:	8c 83       	std	Y+4, r24	; 0x04
		sharp3 = ADC_Conversion_(3);
     c80:	83 e0       	ldi	r24, 0x03	; 3
     c82:	0e 94 40 03 	call	0x680	; 0x680 <ADC_Conversion_>
     c86:	8b 83       	std	Y+3, r24	; 0x03
		if(sharp2<15)
     c88:	8c 81       	ldd	r24, Y+4	; 0x04
     c8a:	8f 30       	cpi	r24, 0x0F	; 15
     c8c:	70 f4       	brcc	.+28     	; 0xcaa <rotateSkipping+0x58>
		{
			if(alreadyOnWhite == 0)
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	61 f4       	brne	.+24     	; 0xcae <rotateSkipping+0x5c>
			{
				n--;
     c96:	8e 81       	ldd	r24, Y+6	; 0x06
     c98:	9f 81       	ldd	r25, Y+7	; 0x07
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	9f 83       	std	Y+7, r25	; 0x07
     c9e:	8e 83       	std	Y+6, r24	; 0x06
				alreadyOnWhite = 1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <rotateSkipping+0x5c>
			}
		}
		else
		{
			alreadyOnWhite = 0;		
     caa:	1a 82       	std	Y+2, r1	; 0x02
     cac:	19 82       	std	Y+1, r1	; 0x01
		}
		
		velocity(95,95);
     cae:	8f e5       	ldi	r24, 0x5F	; 95
     cb0:	6f e5       	ldi	r22, 0x5F	; 95
     cb2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <velocity>
		angle_rotate(10, 2);
     cb6:	8a e0       	ldi	r24, 0x0A	; 10
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	62 e0       	ldi	r22, 0x02	; 2
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
void rotateSkipping(int n)
{
	unsigned char sharp1, sharp2, sharp3;
	int alreadyOnWhite = 0;	// Holds the number of outgoing edges 

	while(n > 0)
     cc2:	8e 81       	ldd	r24, Y+6	; 0x06
     cc4:	9f 81       	ldd	r25, Y+7	; 0x07
     cc6:	18 16       	cp	r1, r24
     cc8:	19 06       	cpc	r1, r25
     cca:	94 f2       	brlt	.-92     	; 0xc70 <rotateSkipping+0x1e>
		velocity(95,95);
		angle_rotate(10, 2);
	}
	

}
     ccc:	27 96       	adiw	r28, 0x07	; 7
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <edgeDetect>:


//////////////////Edge detection/////////////////////////////////////

int edgeDetect(struct Node* node)
{
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	a7 97       	sbiw	r28, 0x27	; 39
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	9a a3       	std	Y+34, r25	; 0x22
     cf8:	89 a3       	std	Y+33, r24	; 0x21
	unsigned char sharp1, sharp2, sharp3;
	int count = 0;	// Holds the number of outgoing edges 
     cfa:	1c 8a       	std	Y+20, r1	; 0x14
     cfc:	1b 8a       	std	Y+19, r1	; 0x13
	lcd_reset();
     cfe:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
	lcd_cursor(1,1);
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	lcd_string("Scanning");
     d0e:	86 e1       	ldi	r24, 0x16	; 22
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>

	// PRE-REQUISUITE:  the FB towards positive Y-Axis
	int ang, alreadyOnWhite = 0;
     d16:	18 8a       	std	Y+16, r1	; 0x10
     d18:	1f 86       	std	Y+15, r1	; 0x0f
	
	// Polling:
	// Rotate it by 180 degrees in increments of 5 degrees
	// at each 5 degrees, check if an edge is present. If so, note the angle.
	for(ang=0; ang<=180+error; ang+=5)
     d1a:	1a 8a       	std	Y+18, r1	; 0x12
     d1c:	19 8a       	std	Y+17, r1	; 0x11
     d1e:	78 c0       	rjmp	.+240    	; 0xe10 <edgeDetect+0x132>
	{

		sharp1 = ADC_Conversion_(1);
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	0e 94 40 03 	call	0x680	; 0x680 <ADC_Conversion_>
     d26:	8f 8b       	std	Y+23, r24	; 0x17
		sharp2 = ADC_Conversion_(2);
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	0e 94 40 03 	call	0x680	; 0x680 <ADC_Conversion_>
     d2e:	8e 8b       	std	Y+22, r24	; 0x16
		sharp3 = ADC_Conversion_(3);
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	0e 94 40 03 	call	0x680	; 0x680 <ADC_Conversion_>
     d36:	8d 8b       	std	Y+21, r24	; 0x15

		if(sharp2<15)
     d38:	8e 89       	ldd	r24, Y+22	; 0x16
     d3a:	8f 30       	cpi	r24, 0x0F	; 15
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <edgeDetect+0x62>
     d3e:	57 c0       	rjmp	.+174    	; 0xdee <edgeDetect+0x110>
		{
			if(alreadyOnWhite == 0)
     d40:	8f 85       	ldd	r24, Y+15	; 0x0f
     d42:	98 89       	ldd	r25, Y+16	; 0x10
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	09 f0       	breq	.+2      	; 0xd4a <edgeDetect+0x6c>
     d48:	54 c0       	rjmp	.+168    	; 0xdf2 <edgeDetect+0x114>
			{
				((node)->validChildIndex)++;
     d4a:	e9 a1       	ldd	r30, Y+33	; 0x21
     d4c:	fa a1       	ldd	r31, Y+34	; 0x22
     d4e:	80 a1       	ldd	r24, Z+32	; 0x20
     d50:	91 a1       	ldd	r25, Z+33	; 0x21
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	e9 a1       	ldd	r30, Y+33	; 0x21
     d56:	fa a1       	ldd	r31, Y+34	; 0x22
     d58:	91 a3       	std	Z+33, r25	; 0x21
     d5a:	80 a3       	std	Z+32, r24	; 0x20
				node->angles[count] = ang;
     d5c:	8b 89       	ldd	r24, Y+19	; 0x13
     d5e:	9c 89       	ldd	r25, Y+20	; 0x14
     d60:	29 a1       	ldd	r18, Y+33	; 0x21
     d62:	3a a1       	ldd	r19, Y+34	; 0x22
     d64:	05 96       	adiw	r24, 0x05	; 5
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	f9 01       	movw	r30, r18
     d6c:	e8 0f       	add	r30, r24
     d6e:	f9 1f       	adc	r31, r25
     d70:	89 89       	ldd	r24, Y+17	; 0x11
     d72:	9a 89       	ldd	r25, Y+18	; 0x12
     d74:	91 83       	std	Z+1, r25	; 0x01
     d76:	80 83       	st	Z, r24
				node->children[count] = (struct Node*)malloc(sizeof(struct Node));
     d78:	0b 89       	ldd	r16, Y+19	; 0x13
     d7a:	1c 89       	ldd	r17, Y+20	; 0x14
     d7c:	82 e2       	ldi	r24, 0x22	; 34
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 38 2b 	call	0x5670	; 0x5670 <malloc>
     d84:	ac 01       	movw	r20, r24
     d86:	29 a1       	ldd	r18, Y+33	; 0x21
     d88:	3a a1       	ldd	r19, Y+34	; 0x22
     d8a:	c8 01       	movw	r24, r16
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	f9 01       	movw	r30, r18
     d94:	e8 0f       	add	r30, r24
     d96:	f9 1f       	adc	r31, r25
     d98:	51 83       	std	Z+1, r21	; 0x01
     d9a:	40 83       	st	Z, r20
				initNode(node->children[count]);
     d9c:	8b 89       	ldd	r24, Y+19	; 0x13
     d9e:	9c 89       	ldd	r25, Y+20	; 0x14
     da0:	29 a1       	ldd	r18, Y+33	; 0x21
     da2:	3a a1       	ldd	r19, Y+34	; 0x22
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	f9 01       	movw	r30, r18
     dac:	e8 0f       	add	r30, r24
     dae:	f9 1f       	adc	r31, r25
     db0:	80 81       	ld	r24, Z
     db2:	91 81       	ldd	r25, Z+1	; 0x01
     db4:	0e 94 d7 07 	call	0xfae	; 0xfae <initNode>
				(node->children[count])->parent = node;
     db8:	8b 89       	ldd	r24, Y+19	; 0x13
     dba:	9c 89       	ldd	r25, Y+20	; 0x14
     dbc:	29 a1       	ldd	r18, Y+33	; 0x21
     dbe:	3a a1       	ldd	r19, Y+34	; 0x22
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	f9 01       	movw	r30, r18
     dc8:	e8 0f       	add	r30, r24
     dca:	f9 1f       	adc	r31, r25
     dcc:	01 90       	ld	r0, Z+
     dce:	f0 81       	ld	r31, Z
     dd0:	e0 2d       	mov	r30, r0
     dd2:	89 a1       	ldd	r24, Y+33	; 0x21
     dd4:	9a a1       	ldd	r25, Y+34	; 0x22
     dd6:	91 83       	std	Z+1, r25	; 0x01
     dd8:	80 83       	st	Z, r24

				count++;
     dda:	8b 89       	ldd	r24, Y+19	; 0x13
     ddc:	9c 89       	ldd	r25, Y+20	; 0x14
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	9c 8b       	std	Y+20, r25	; 0x14
     de2:	8b 8b       	std	Y+19, r24	; 0x13
				alreadyOnWhite = 1;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	98 8b       	std	Y+16, r25	; 0x10
     dea:	8f 87       	std	Y+15, r24	; 0x0f
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <edgeDetect+0x114>
			}
		}	
		else
		{
			alreadyOnWhite = 0;
     dee:	18 8a       	std	Y+16, r1	; 0x10
     df0:	1f 86       	std	Y+15, r1	; 0x0f
		}

		velocity(100,100);
     df2:	84 e6       	ldi	r24, 0x64	; 100
     df4:	64 e6       	ldi	r22, 0x64	; 100
     df6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <velocity>
		angle_rotate(5, 1);
     dfa:	85 e0       	ldi	r24, 0x05	; 5
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
	int ang, alreadyOnWhite = 0;
	
	// Polling:
	// Rotate it by 180 degrees in increments of 5 degrees
	// at each 5 degrees, check if an edge is present. If so, note the angle.
	for(ang=0; ang<=180+error; ang+=5)
     e06:	89 89       	ldd	r24, Y+17	; 0x11
     e08:	9a 89       	ldd	r25, Y+18	; 0x12
     e0a:	05 96       	adiw	r24, 0x05	; 5
     e0c:	9a 8b       	std	Y+18, r25	; 0x12
     e0e:	89 8b       	std	Y+17, r24	; 0x11
     e10:	80 91 02 02 	lds	r24, 0x0202
     e14:	90 91 03 02 	lds	r25, 0x0203
     e18:	9c 01       	movw	r18, r24
     e1a:	2c 54       	subi	r18, 0x4C	; 76
     e1c:	3f 4f       	sbci	r19, 0xFF	; 255
     e1e:	89 89       	ldd	r24, Y+17	; 0x11
     e20:	9a 89       	ldd	r25, Y+18	; 0x12
     e22:	28 17       	cp	r18, r24
     e24:	39 07       	cpc	r19, r25
     e26:	0c f0       	brlt	.+2      	; 0xe2a <edgeDetect+0x14c>
     e28:	7b cf       	rjmp	.-266    	; 0xd20 <edgeDetect+0x42>
		angle_rotate(5, 1);
		
	}


	char str[9] = "count: ";
     e2a:	ce 01       	movw	r24, r28
     e2c:	48 96       	adiw	r24, 0x18	; 24
     e2e:	9c a3       	std	Y+36, r25	; 0x24
     e30:	8b a3       	std	Y+35, r24	; 0x23
     e32:	ee e2       	ldi	r30, 0x2E	; 46
     e34:	f2 e0       	ldi	r31, 0x02	; 2
     e36:	fe a3       	std	Y+38, r31	; 0x26
     e38:	ed a3       	std	Y+37, r30	; 0x25
     e3a:	f8 e0       	ldi	r31, 0x08	; 8
     e3c:	ff a3       	std	Y+39, r31	; 0x27
     e3e:	ed a1       	ldd	r30, Y+37	; 0x25
     e40:	fe a1       	ldd	r31, Y+38	; 0x26
     e42:	00 80       	ld	r0, Z
     e44:	8d a1       	ldd	r24, Y+37	; 0x25
     e46:	9e a1       	ldd	r25, Y+38	; 0x26
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	9e a3       	std	Y+38, r25	; 0x26
     e4c:	8d a3       	std	Y+37, r24	; 0x25
     e4e:	eb a1       	ldd	r30, Y+35	; 0x23
     e50:	fc a1       	ldd	r31, Y+36	; 0x24
     e52:	00 82       	st	Z, r0
     e54:	8b a1       	ldd	r24, Y+35	; 0x23
     e56:	9c a1       	ldd	r25, Y+36	; 0x24
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	9c a3       	std	Y+36, r25	; 0x24
     e5c:	8b a3       	std	Y+35, r24	; 0x23
     e5e:	9f a1       	ldd	r25, Y+39	; 0x27
     e60:	91 50       	subi	r25, 0x01	; 1
     e62:	9f a3       	std	Y+39, r25	; 0x27
     e64:	ef a1       	ldd	r30, Y+39	; 0x27
     e66:	ee 23       	and	r30, r30
     e68:	51 f7       	brne	.-44     	; 0xe3e <edgeDetect+0x160>
     e6a:	18 a2       	std	Y+32, r1	; 0x20
	str[7] = '0' + count;
     e6c:	8b 89       	ldd	r24, Y+19	; 0x13
     e6e:	80 5d       	subi	r24, 0xD0	; 208
     e70:	8f 8f       	std	Y+31, r24	; 0x1f
	str[8] = '\0';
     e72:	18 a2       	std	Y+32, r1	; 0x20
	lcd_reset();
     e74:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
	lcd_cursor(2,1);
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	61 e0       	ldi	r22, 0x01	; 1
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	lcd_string("Scanning Done.");
     e84:	8f e1       	ldi	r24, 0x1F	; 31
     e86:	92 e0       	ldi	r25, 0x02	; 2
     e88:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	aa e7       	ldi	r26, 0x7A	; 122
     e92:	b4 e4       	ldi	r27, 0x44	; 68
     e94:	8b 87       	std	Y+11, r24	; 0x0b
     e96:	9c 87       	std	Y+12, r25	; 0x0c
     e98:	ad 87       	std	Y+13, r26	; 0x0d
     e9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea4:	2d ec       	ldi	r18, 0xCD	; 205
     ea6:	3c ec       	ldi	r19, 0xCC	; 204
     ea8:	4c e2       	ldi	r20, 0x2C	; 44
     eaa:	55 e4       	ldi	r21, 0x45	; 69
     eac:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	8f 83       	std	Y+7, r24	; 0x07
     eb6:	98 87       	std	Y+8, r25	; 0x08
     eb8:	a9 87       	std	Y+9, r26	; 0x09
     eba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	2c f4       	brge	.+10     	; 0xede <edgeDetect+0x200>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	8d 83       	std	Y+5, r24	; 0x05
     edc:	3f c0       	rjmp	.+126    	; 0xf5c <edgeDetect+0x27e>
	else if (__tmp > 65535)
     ede:	6f 81       	ldd	r22, Y+7	; 0x07
     ee0:	78 85       	ldd	r23, Y+8	; 0x08
     ee2:	89 85       	ldd	r24, Y+9	; 0x09
     ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	57 e4       	ldi	r21, 0x47	; 71
     eee:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	4c f5       	brge	.+82     	; 0xf48 <edgeDetect+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
     efa:	8d 85       	ldd	r24, Y+13	; 0x0d
     efc:	9e 85       	ldd	r25, Y+14	; 0x0e
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e2       	ldi	r20, 0x20	; 32
     f04:	51 e4       	ldi	r21, 0x41	; 65
     f06:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	9e 83       	std	Y+6, r25	; 0x06
     f1c:	8d 83       	std	Y+5, r24	; 0x05
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <edgeDetect+0x260>
     f20:	84 e1       	ldi	r24, 0x14	; 20
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	9c 83       	std	Y+4, r25	; 0x04
     f26:	8b 83       	std	Y+3, r24	; 0x03
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <edgeDetect+0x24e>
     f30:	9c 83       	std	Y+4, r25	; 0x04
     f32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	9e 83       	std	Y+6, r25	; 0x06
     f3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	69 f7       	brne	.-38     	; 0xf20 <edgeDetect+0x242>
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <edgeDetect+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f48:	6f 81       	ldd	r22, Y+7	; 0x07
     f4a:	78 85       	ldd	r23, Y+8	; 0x08
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9e 83       	std	Y+6, r25	; 0x06
     f5a:	8d 83       	std	Y+5, r24	; 0x05
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	9e 81       	ldd	r25, Y+6	; 0x06
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <edgeDetect+0x28a>
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	lcd_cursor(1,1);
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	lcd_string(str);
     f7c:	ce 01       	movw	r24, r28
     f7e:	48 96       	adiw	r24, 0x18	; 24
     f80:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
	reverse_distance_mm(20);
     f84:	84 e1       	ldi	r24, 0x14	; 20
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 03 02 	call	0x406	; 0x406 <reverse_distance_mm>
	velocity(100,100);
     f8c:	84 e6       	ldi	r24, 0x64	; 100
     f8e:	64 e6       	ldi	r22, 0x64	; 100
     f90:	0e 94 da 00 	call	0x1b4	; 0x1b4 <velocity>
	return count;
     f94:	8b 89       	ldd	r24, Y+19	; 0x13
     f96:	9c 89       	ldd	r25, Y+20	; 0x14
	
}
     f98:	a7 96       	adiw	r28, 0x27	; 39
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	08 95       	ret

00000fae <initNode>:

///////////////////////////////////////////////node Initialization/////////////////////////////////
void initNode(struct Node* node)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	0f 92       	push	r0
     fb4:	0f 92       	push	r0
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	9a 83       	std	Y+2, r25	; 0x02
     fbc:	89 83       	std	Y+1, r24	; 0x01
	node->parent = NULL;
     fbe:	e9 81       	ldd	r30, Y+1	; 0x01
     fc0:	fa 81       	ldd	r31, Y+2	; 0x02
     fc2:	11 82       	std	Z+1, r1	; 0x01
     fc4:	10 82       	st	Z, r1
	
	node->children[0] = NULL;
     fc6:	e9 81       	ldd	r30, Y+1	; 0x01
     fc8:	fa 81       	ldd	r31, Y+2	; 0x02
     fca:	13 82       	std	Z+3, r1	; 0x03
     fcc:	12 82       	std	Z+2, r1	; 0x02
	node->children[1] = NULL;
     fce:	e9 81       	ldd	r30, Y+1	; 0x01
     fd0:	fa 81       	ldd	r31, Y+2	; 0x02
     fd2:	15 82       	std	Z+5, r1	; 0x05
     fd4:	14 82       	std	Z+4, r1	; 0x04
	node->children[2] = NULL;
     fd6:	e9 81       	ldd	r30, Y+1	; 0x01
     fd8:	fa 81       	ldd	r31, Y+2	; 0x02
     fda:	17 82       	std	Z+7, r1	; 0x07
     fdc:	16 82       	std	Z+6, r1	; 0x06
	node->children[3] = NULL;	
     fde:	e9 81       	ldd	r30, Y+1	; 0x01
     fe0:	fa 81       	ldd	r31, Y+2	; 0x02
     fe2:	11 86       	std	Z+9, r1	; 0x09
     fe4:	10 86       	std	Z+8, r1	; 0x08
		

	// Set all the angles to 0
	node->angles[0] = node->angles[1] = node->angles[2] = node->angles[3] = 0;			
     fe6:	e9 81       	ldd	r30, Y+1	; 0x01
     fe8:	fa 81       	ldd	r31, Y+2	; 0x02
     fea:	11 8a       	std	Z+17, r1	; 0x11
     fec:	10 8a       	std	Z+16, r1	; 0x10
     fee:	e9 81       	ldd	r30, Y+1	; 0x01
     ff0:	fa 81       	ldd	r31, Y+2	; 0x02
     ff2:	80 89       	ldd	r24, Z+16	; 0x10
     ff4:	91 89       	ldd	r25, Z+17	; 0x11
     ff6:	e9 81       	ldd	r30, Y+1	; 0x01
     ff8:	fa 81       	ldd	r31, Y+2	; 0x02
     ffa:	97 87       	std	Z+15, r25	; 0x0f
     ffc:	86 87       	std	Z+14, r24	; 0x0e
     ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    1000:	fa 81       	ldd	r31, Y+2	; 0x02
    1002:	86 85       	ldd	r24, Z+14	; 0x0e
    1004:	97 85       	ldd	r25, Z+15	; 0x0f
    1006:	e9 81       	ldd	r30, Y+1	; 0x01
    1008:	fa 81       	ldd	r31, Y+2	; 0x02
    100a:	95 87       	std	Z+13, r25	; 0x0d
    100c:	84 87       	std	Z+12, r24	; 0x0c
    100e:	e9 81       	ldd	r30, Y+1	; 0x01
    1010:	fa 81       	ldd	r31, Y+2	; 0x02
    1012:	84 85       	ldd	r24, Z+12	; 0x0c
    1014:	95 85       	ldd	r25, Z+13	; 0x0d
    1016:	e9 81       	ldd	r30, Y+1	; 0x01
    1018:	fa 81       	ldd	r31, Y+2	; 0x02
    101a:	93 87       	std	Z+11, r25	; 0x0b
    101c:	82 87       	std	Z+10, r24	; 0x0a
	
	// Initially none of the children are visited.
	node->visited[0] = node->visited[1] = node->visited[2] = node->visited[3]=node->visited[4]=node->visited[5] = 0;	
    101e:	e9 81       	ldd	r30, Y+1	; 0x01
    1020:	fa 81       	ldd	r31, Y+2	; 0x02
    1022:	17 8e       	std	Z+31, r1	; 0x1f
    1024:	16 8e       	std	Z+30, r1	; 0x1e
    1026:	e9 81       	ldd	r30, Y+1	; 0x01
    1028:	fa 81       	ldd	r31, Y+2	; 0x02
    102a:	86 8d       	ldd	r24, Z+30	; 0x1e
    102c:	97 8d       	ldd	r25, Z+31	; 0x1f
    102e:	e9 81       	ldd	r30, Y+1	; 0x01
    1030:	fa 81       	ldd	r31, Y+2	; 0x02
    1032:	95 8f       	std	Z+29, r25	; 0x1d
    1034:	84 8f       	std	Z+28, r24	; 0x1c
    1036:	e9 81       	ldd	r30, Y+1	; 0x01
    1038:	fa 81       	ldd	r31, Y+2	; 0x02
    103a:	84 8d       	ldd	r24, Z+28	; 0x1c
    103c:	95 8d       	ldd	r25, Z+29	; 0x1d
    103e:	e9 81       	ldd	r30, Y+1	; 0x01
    1040:	fa 81       	ldd	r31, Y+2	; 0x02
    1042:	93 8f       	std	Z+27, r25	; 0x1b
    1044:	82 8f       	std	Z+26, r24	; 0x1a
    1046:	e9 81       	ldd	r30, Y+1	; 0x01
    1048:	fa 81       	ldd	r31, Y+2	; 0x02
    104a:	82 8d       	ldd	r24, Z+26	; 0x1a
    104c:	93 8d       	ldd	r25, Z+27	; 0x1b
    104e:	e9 81       	ldd	r30, Y+1	; 0x01
    1050:	fa 81       	ldd	r31, Y+2	; 0x02
    1052:	91 8f       	std	Z+25, r25	; 0x19
    1054:	80 8f       	std	Z+24, r24	; 0x18
    1056:	e9 81       	ldd	r30, Y+1	; 0x01
    1058:	fa 81       	ldd	r31, Y+2	; 0x02
    105a:	80 8d       	ldd	r24, Z+24	; 0x18
    105c:	91 8d       	ldd	r25, Z+25	; 0x19
    105e:	e9 81       	ldd	r30, Y+1	; 0x01
    1060:	fa 81       	ldd	r31, Y+2	; 0x02
    1062:	97 8b       	std	Z+23, r25	; 0x17
    1064:	86 8b       	std	Z+22, r24	; 0x16
    1066:	e9 81       	ldd	r30, Y+1	; 0x01
    1068:	fa 81       	ldd	r31, Y+2	; 0x02
    106a:	86 89       	ldd	r24, Z+22	; 0x16
    106c:	97 89       	ldd	r25, Z+23	; 0x17
    106e:	e9 81       	ldd	r30, Y+1	; 0x01
    1070:	fa 81       	ldd	r31, Y+2	; 0x02
    1072:	95 8b       	std	Z+21, r25	; 0x15
    1074:	84 8b       	std	Z+20, r24	; 0x14

	// index of the maximum child which is valid, initially it is -1
	node->validChildIndex = -1;	
    1076:	e9 81       	ldd	r30, Y+1	; 0x01
    1078:	fa 81       	ldd	r31, Y+2	; 0x02
    107a:	8f ef       	ldi	r24, 0xFF	; 255
    107c:	9f ef       	ldi	r25, 0xFF	; 255
    107e:	91 a3       	std	Z+33, r25	; 0x21
    1080:	80 a3       	std	Z+32, r24	; 0x20
}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <followWhiteLineTillNode>:


// Returns the total distance
// Follows the White line till a node is reached
int followWhiteLineTillNode()
{
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	a1 97       	sbiw	r28, 0x21	; 33
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
	unsigned char sharp1, sharp2, sharp3;
	lcd_reset();
    10a0:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
	lcd_cursor(1,1);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	61 e0       	ldi	r22, 0x01	; 1
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	lcd_string("Following Edge");
    10b0:	87 e3       	ldi	r24, 0x37	; 55
    10b2:	92 e0       	ldi	r25, 0x02	; 2
    10b4:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
	

	int startShaftCount = RightShaftCount;
    10b8:	80 91 59 04 	lds	r24, 0x0459
    10bc:	90 91 5a 04 	lds	r25, 0x045A
    10c0:	9e 8f       	std	Y+30, r25	; 0x1e
    10c2:	8d 8f       	std	Y+29, r24	; 0x1d
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	aa e7       	ldi	r26, 0x7A	; 122
    10ca:	b4 e4       	ldi	r27, 0x44	; 68
    10cc:	89 8f       	std	Y+25, r24	; 0x19
    10ce:	9a 8f       	std	Y+26, r25	; 0x1a
    10d0:	ab 8f       	std	Y+27, r26	; 0x1b
    10d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d4:	69 8d       	ldd	r22, Y+25	; 0x19
    10d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10dc:	2d ec       	ldi	r18, 0xCD	; 205
    10de:	3c ec       	ldi	r19, 0xCC	; 204
    10e0:	4c e2       	ldi	r20, 0x2C	; 44
    10e2:	55 e4       	ldi	r21, 0x45	; 69
    10e4:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	8d 8b       	std	Y+21, r24	; 0x15
    10ee:	9e 8b       	std	Y+22, r25	; 0x16
    10f0:	af 8b       	std	Y+23, r26	; 0x17
    10f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10f4:	6d 89       	ldd	r22, Y+21	; 0x15
    10f6:	7e 89       	ldd	r23, Y+22	; 0x16
    10f8:	8f 89       	ldd	r24, Y+23	; 0x17
    10fa:	98 8d       	ldd	r25, Y+24	; 0x18
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e8       	ldi	r20, 0x80	; 128
    1102:	5f e3       	ldi	r21, 0x3F	; 63
    1104:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    1108:	88 23       	and	r24, r24
    110a:	2c f4       	brge	.+10     	; 0x1116 <followWhiteLineTillNode+0x8a>
		__ticks = 1;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	9c 8b       	std	Y+20, r25	; 0x14
    1112:	8b 8b       	std	Y+19, r24	; 0x13
    1114:	3f c0       	rjmp	.+126    	; 0x1194 <followWhiteLineTillNode+0x108>
	else if (__tmp > 65535)
    1116:	6d 89       	ldd	r22, Y+21	; 0x15
    1118:	7e 89       	ldd	r23, Y+22	; 0x16
    111a:	8f 89       	ldd	r24, Y+23	; 0x17
    111c:	98 8d       	ldd	r25, Y+24	; 0x18
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	3f ef       	ldi	r19, 0xFF	; 255
    1122:	4f e7       	ldi	r20, 0x7F	; 127
    1124:	57 e4       	ldi	r21, 0x47	; 71
    1126:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    112a:	18 16       	cp	r1, r24
    112c:	4c f5       	brge	.+82     	; 0x1180 <followWhiteLineTillNode+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    112e:	69 8d       	ldd	r22, Y+25	; 0x19
    1130:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1132:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1134:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e2       	ldi	r20, 0x20	; 32
    113c:	51 e4       	ldi	r21, 0x41	; 65
    113e:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	bc 01       	movw	r22, r24
    1148:	cd 01       	movw	r24, r26
    114a:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	9c 8b       	std	Y+20, r25	; 0x14
    1154:	8b 8b       	std	Y+19, r24	; 0x13
    1156:	0f c0       	rjmp	.+30     	; 0x1176 <followWhiteLineTillNode+0xea>
    1158:	84 e1       	ldi	r24, 0x14	; 20
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	9a 8b       	std	Y+18, r25	; 0x12
    115e:	89 8b       	std	Y+17, r24	; 0x11
    1160:	89 89       	ldd	r24, Y+17	; 0x11
    1162:	9a 89       	ldd	r25, Y+18	; 0x12
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <followWhiteLineTillNode+0xd8>
    1168:	9a 8b       	std	Y+18, r25	; 0x12
    116a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116c:	8b 89       	ldd	r24, Y+19	; 0x13
    116e:	9c 89       	ldd	r25, Y+20	; 0x14
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	9c 8b       	std	Y+20, r25	; 0x14
    1174:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1176:	8b 89       	ldd	r24, Y+19	; 0x13
    1178:	9c 89       	ldd	r25, Y+20	; 0x14
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	69 f7       	brne	.-38     	; 0x1158 <followWhiteLineTillNode+0xcc>
    117e:	14 c0       	rjmp	.+40     	; 0x11a8 <followWhiteLineTillNode+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1180:	6d 89       	ldd	r22, Y+21	; 0x15
    1182:	7e 89       	ldd	r23, Y+22	; 0x16
    1184:	8f 89       	ldd	r24, Y+23	; 0x17
    1186:	98 8d       	ldd	r25, Y+24	; 0x18
    1188:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	9c 8b       	std	Y+20, r25	; 0x14
    1192:	8b 8b       	std	Y+19, r24	; 0x13
    1194:	8b 89       	ldd	r24, Y+19	; 0x13
    1196:	9c 89       	ldd	r25, Y+20	; 0x14
    1198:	98 8b       	std	Y+16, r25	; 0x10
    119a:	8f 87       	std	Y+15, r24	; 0x0f
    119c:	8f 85       	ldd	r24, Y+15	; 0x0f
    119e:	98 89       	ldd	r25, Y+16	; 0x10
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <followWhiteLineTillNode+0x114>
    11a4:	98 8b       	std	Y+16, r25	; 0x10
    11a6:	8f 87       	std	Y+15, r24	; 0x0f
	

	_delay_ms(1000);
	while(1)
	{
		sharp1 = ADC_Conversion_(1);
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	0e 94 40 03 	call	0x680	; 0x680 <ADC_Conversion_>
    11ae:	89 a3       	std	Y+33, r24	; 0x21
		sharp2 = ADC_Conversion_(2);
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	0e 94 40 03 	call	0x680	; 0x680 <ADC_Conversion_>
    11b6:	88 a3       	std	Y+32, r24	; 0x20
		sharp3 = ADC_Conversion_(3);
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	0e 94 40 03 	call	0x680	; 0x680 <ADC_Conversion_>
    11be:	8f 8f       	std	Y+31, r24	; 0x1f

		if(sharp1>50&&sharp2<15)
    11c0:	89 a1       	ldd	r24, Y+33	; 0x21
    11c2:	83 33       	cpi	r24, 0x33	; 51
    11c4:	50 f0       	brcs	.+20     	; 0x11da <followWhiteLineTillNode+0x14e>
    11c6:	88 a1       	ldd	r24, Y+32	; 0x20
    11c8:	8f 30       	cpi	r24, 0x0F	; 15
    11ca:	38 f4       	brcc	.+14     	; 0x11da <followWhiteLineTillNode+0x14e>
		{
				velocity(45,110);		//Left
    11cc:	8d e2       	ldi	r24, 0x2D	; 45
    11ce:	6e e6       	ldi	r22, 0x6E	; 110
    11d0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <velocity>
				FORWARD();
    11d4:	0e 94 05 01 	call	0x20a	; 0x20a <FORWARD>
    11d8:	e7 cf       	rjmp	.-50     	; 0x11a8 <followWhiteLineTillNode+0x11c>
		}
		else if(sharp3>50&&sharp2<15)
    11da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11dc:	83 33       	cpi	r24, 0x33	; 51
    11de:	50 f0       	brcs	.+20     	; 0x11f4 <followWhiteLineTillNode+0x168>
    11e0:	88 a1       	ldd	r24, Y+32	; 0x20
    11e2:	8f 30       	cpi	r24, 0x0F	; 15
    11e4:	38 f4       	brcc	.+14     	; 0x11f4 <followWhiteLineTillNode+0x168>
		{
				velocity(110,45);		//Right
    11e6:	8e e6       	ldi	r24, 0x6E	; 110
    11e8:	6d e2       	ldi	r22, 0x2D	; 45
    11ea:	0e 94 da 00 	call	0x1b4	; 0x1b4 <velocity>
				FORWARD();
    11ee:	0e 94 05 01 	call	0x20a	; 0x20a <FORWARD>
    11f2:	da cf       	rjmp	.-76     	; 0x11a8 <followWhiteLineTillNode+0x11c>
		}
		else if(sharp1<15 && sharp2<15 && sharp3<15)
    11f4:	89 a1       	ldd	r24, Y+33	; 0x21
    11f6:	8f 30       	cpi	r24, 0x0F	; 15
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <followWhiteLineTillNode+0x170>
    11fa:	1a c1       	rjmp	.+564    	; 0x1430 <followWhiteLineTillNode+0x3a4>
    11fc:	88 a1       	ldd	r24, Y+32	; 0x20
    11fe:	8f 30       	cpi	r24, 0x0F	; 15
    1200:	08 f0       	brcs	.+2      	; 0x1204 <followWhiteLineTillNode+0x178>
    1202:	16 c1       	rjmp	.+556    	; 0x1430 <followWhiteLineTillNode+0x3a4>
    1204:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1206:	8f 30       	cpi	r24, 0x0F	; 15
    1208:	08 f0       	brcs	.+2      	; 0x120c <followWhiteLineTillNode+0x180>
    120a:	12 c1       	rjmp	.+548    	; 0x1430 <followWhiteLineTillNode+0x3a4>
		{
	
			//_delay_ms(6000);
			STOP();
    120c:	0e 94 10 01 	call	0x220	; 0x220 <STOP>
				velocity(115,115);
				FORWARD();
		}
	}
	
	velocity(100,100);
    1210:	84 e6       	ldi	r24, 0x64	; 100
    1212:	64 e6       	ldi	r22, 0x64	; 100
    1214:	0e 94 da 00 	call	0x1b4	; 0x1b4 <velocity>
	lcd_reset();
    1218:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>

	
	lcd_cursor(1,1);
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	itoa(((RightShaftCount - startShaftCount) * 5.338 / 10) + 11, buff,10);
    1228:	20 91 59 04 	lds	r18, 0x0459
    122c:	30 91 5a 04 	lds	r19, 0x045A
    1230:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1232:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1234:	a9 01       	movw	r20, r18
    1236:	48 1b       	sub	r20, r24
    1238:	59 0b       	sbc	r21, r25
    123a:	ca 01       	movw	r24, r20
    123c:	aa 27       	eor	r26, r26
    123e:	97 fd       	sbrc	r25, 7
    1240:	a0 95       	com	r26
    1242:	ba 2f       	mov	r27, r26
    1244:	bc 01       	movw	r22, r24
    1246:	cd 01       	movw	r24, r26
    1248:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <__floatsisf>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	bc 01       	movw	r22, r24
    1252:	cd 01       	movw	r24, r26
    1254:	25 ee       	ldi	r18, 0xE5	; 229
    1256:	30 ed       	ldi	r19, 0xD0	; 208
    1258:	4a ea       	ldi	r20, 0xAA	; 170
    125a:	50 e4       	ldi	r21, 0x40	; 64
    125c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	bc 01       	movw	r22, r24
    1266:	cd 01       	movw	r24, r26
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e2       	ldi	r20, 0x20	; 32
    126e:	51 e4       	ldi	r21, 0x41	; 65
    1270:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__divsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e3       	ldi	r20, 0x30	; 48
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__addsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 2b 28 	call	0x5056	; 0x5056 <__fixsfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	2a e2       	ldi	r18, 0x2A	; 42
    129a:	34 e0       	ldi	r19, 0x04	; 4
    129c:	b9 01       	movw	r22, r18
    129e:	4a e0       	ldi	r20, 0x0A	; 10
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
	lcd_string("Distance: ");
    12a6:	86 e4       	ldi	r24, 0x46	; 70
    12a8:	92 e0       	ldi	r25, 0x02	; 2
    12aa:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
	lcd_string(buff);
    12ae:	8a e2       	ldi	r24, 0x2A	; 42
    12b0:	94 e0       	ldi	r25, 0x04	; 4
    12b2:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>


	lcd_cursor(2,1);
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	lcd_string("Followed Edge");
    12c2:	81 e5       	ldi	r24, 0x51	; 81
    12c4:	92 e0       	ldi	r25, 0x02	; 2
    12c6:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	aa e7       	ldi	r26, 0x7A	; 122
    12d0:	b4 e4       	ldi	r27, 0x44	; 68
    12d2:	8b 87       	std	Y+11, r24	; 0x0b
    12d4:	9c 87       	std	Y+12, r25	; 0x0c
    12d6:	ad 87       	std	Y+13, r26	; 0x0d
    12d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12da:	6b 85       	ldd	r22, Y+11	; 0x0b
    12dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12de:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e2:	2d ec       	ldi	r18, 0xCD	; 205
    12e4:	3c ec       	ldi	r19, 0xCC	; 204
    12e6:	4c e2       	ldi	r20, 0x2C	; 44
    12e8:	55 e4       	ldi	r21, 0x45	; 69
    12ea:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	8f 83       	std	Y+7, r24	; 0x07
    12f4:	98 87       	std	Y+8, r25	; 0x08
    12f6:	a9 87       	std	Y+9, r26	; 0x09
    12f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12fa:	6f 81       	ldd	r22, Y+7	; 0x07
    12fc:	78 85       	ldd	r23, Y+8	; 0x08
    12fe:	89 85       	ldd	r24, Y+9	; 0x09
    1300:	9a 85       	ldd	r25, Y+10	; 0x0a
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e8       	ldi	r20, 0x80	; 128
    1308:	5f e3       	ldi	r21, 0x3F	; 63
    130a:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    130e:	88 23       	and	r24, r24
    1310:	2c f4       	brge	.+10     	; 0x131c <followWhiteLineTillNode+0x290>
		__ticks = 1;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	9e 83       	std	Y+6, r25	; 0x06
    1318:	8d 83       	std	Y+5, r24	; 0x05
    131a:	3f c0       	rjmp	.+126    	; 0x139a <followWhiteLineTillNode+0x30e>
	else if (__tmp > 65535)
    131c:	6f 81       	ldd	r22, Y+7	; 0x07
    131e:	78 85       	ldd	r23, Y+8	; 0x08
    1320:	89 85       	ldd	r24, Y+9	; 0x09
    1322:	9a 85       	ldd	r25, Y+10	; 0x0a
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	3f ef       	ldi	r19, 0xFF	; 255
    1328:	4f e7       	ldi	r20, 0x7F	; 127
    132a:	57 e4       	ldi	r21, 0x47	; 71
    132c:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    1330:	18 16       	cp	r1, r24
    1332:	4c f5       	brge	.+82     	; 0x1386 <followWhiteLineTillNode+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1334:	6b 85       	ldd	r22, Y+11	; 0x0b
    1336:	7c 85       	ldd	r23, Y+12	; 0x0c
    1338:	8d 85       	ldd	r24, Y+13	; 0x0d
    133a:	9e 85       	ldd	r25, Y+14	; 0x0e
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e2       	ldi	r20, 0x20	; 32
    1342:	51 e4       	ldi	r21, 0x41	; 65
    1344:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	bc 01       	movw	r22, r24
    134e:	cd 01       	movw	r24, r26
    1350:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	9e 83       	std	Y+6, r25	; 0x06
    135a:	8d 83       	std	Y+5, r24	; 0x05
    135c:	0f c0       	rjmp	.+30     	; 0x137c <followWhiteLineTillNode+0x2f0>
    135e:	84 e1       	ldi	r24, 0x14	; 20
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	9c 83       	std	Y+4, r25	; 0x04
    1364:	8b 83       	std	Y+3, r24	; 0x03
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	f1 f7       	brne	.-4      	; 0x136a <followWhiteLineTillNode+0x2de>
    136e:	9c 83       	std	Y+4, r25	; 0x04
    1370:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	9e 83       	std	Y+6, r25	; 0x06
    137a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137c:	8d 81       	ldd	r24, Y+5	; 0x05
    137e:	9e 81       	ldd	r25, Y+6	; 0x06
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	69 f7       	brne	.-38     	; 0x135e <followWhiteLineTillNode+0x2d2>
    1384:	14 c0       	rjmp	.+40     	; 0x13ae <followWhiteLineTillNode+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1386:	6f 81       	ldd	r22, Y+7	; 0x07
    1388:	78 85       	ldd	r23, Y+8	; 0x08
    138a:	89 85       	ldd	r24, Y+9	; 0x09
    138c:	9a 85       	ldd	r25, Y+10	; 0x0a
    138e:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	9e 83       	std	Y+6, r25	; 0x06
    1398:	8d 83       	std	Y+5, r24	; 0x05
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	9e 81       	ldd	r25, Y+6	; 0x06
    139e:	9a 83       	std	Y+2, r25	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	9a 81       	ldd	r25, Y+2	; 0x02
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <followWhiteLineTillNode+0x31a>
    13aa:	9a 83       	std	Y+2, r25	; 0x02
    13ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	return (((RightShaftCount - startShaftCount) * 5.338 / 10) + 11); 
    13ae:	20 91 59 04 	lds	r18, 0x0459
    13b2:	30 91 5a 04 	lds	r19, 0x045A
    13b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13ba:	a9 01       	movw	r20, r18
    13bc:	48 1b       	sub	r20, r24
    13be:	59 0b       	sbc	r21, r25
    13c0:	ca 01       	movw	r24, r20
    13c2:	aa 27       	eor	r26, r26
    13c4:	97 fd       	sbrc	r25, 7
    13c6:	a0 95       	com	r26
    13c8:	ba 2f       	mov	r27, r26
    13ca:	bc 01       	movw	r22, r24
    13cc:	cd 01       	movw	r24, r26
    13ce:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <__floatsisf>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	bc 01       	movw	r22, r24
    13d8:	cd 01       	movw	r24, r26
    13da:	25 ee       	ldi	r18, 0xE5	; 229
    13dc:	30 ed       	ldi	r19, 0xD0	; 208
    13de:	4a ea       	ldi	r20, 0xAA	; 170
    13e0:	50 e4       	ldi	r21, 0x40	; 64
    13e2:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e2       	ldi	r20, 0x20	; 32
    13f4:	51 e4       	ldi	r21, 0x41	; 65
    13f6:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__divsf3>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	bc 01       	movw	r22, r24
    1400:	cd 01       	movw	r24, r26
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e3       	ldi	r20, 0x30	; 48
    1408:	51 e4       	ldi	r21, 0x41	; 65
    140a:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__addsf3>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	0e 94 2b 28 	call	0x5056	; 0x5056 <__fixsfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
}
    141e:	a1 96       	adiw	r28, 0x21	; 33
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret
	
			//_delay_ms(6000);
			STOP();
			break;
		}
		else if(sharp2<15)
    1430:	88 a1       	ldd	r24, Y+32	; 0x20
    1432:	8f 30       	cpi	r24, 0x0F	; 15
    1434:	08 f0       	brcs	.+2      	; 0x1438 <followWhiteLineTillNode+0x3ac>
    1436:	b8 ce       	rjmp	.-656    	; 0x11a8 <followWhiteLineTillNode+0x11c>
		{
				velocity(115,115);
    1438:	83 e7       	ldi	r24, 0x73	; 115
    143a:	63 e7       	ldi	r22, 0x73	; 115
    143c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <velocity>
				FORWARD();
    1440:	0e 94 05 01 	call	0x20a	; 0x20a <FORWARD>
    1444:	b1 ce       	rjmp	.-670    	; 0x11a8 <followWhiteLineTillNode+0x11c>

00001446 <start_level>:


/////////////////////////////////////////////////////levels in graph//////////////////////////////////////////

void start_level()
{	
    1446:	0f 93       	push	r16
    1448:	1f 93       	push	r17
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	aa 97       	sbiw	r28, 0x2a	; 42
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
	
	if(flag[levelcount]==0)
    145e:	80 91 00 02 	lds	r24, 0x0200
    1462:	90 91 01 02 	lds	r25, 0x0201
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	fc 01       	movw	r30, r24
    146c:	e2 5f       	subi	r30, 0xF2	; 242
    146e:	fb 4f       	sbci	r31, 0xFB	; 251
    1470:	80 81       	ld	r24, Z
    1472:	91 81       	ldd	r25, Z+1	; 0x01
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	09 f0       	breq	.+2      	; 0x147a <start_level+0x34>
    1478:	33 c2       	rjmp	.+1126   	; 0x18e0 <start_level+0x49a>
	{
		if(first_time_flag==0)
    147a:	80 91 22 04 	lds	r24, 0x0422
    147e:	90 91 23 04 	lds	r25, 0x0423
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	09 f0       	breq	.+2      	; 0x1488 <start_level+0x42>
    1486:	45 c0       	rjmp	.+138    	; 0x1512 <start_level+0xcc>
		{
			temp[levelcount]=&node;
    1488:	80 91 00 02 	lds	r24, 0x0200
    148c:	90 91 01 02 	lds	r25, 0x0201
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	fc 01       	movw	r30, r24
    1496:	ef 5a       	subi	r30, 0xAF	; 175
    1498:	fb 4f       	sbci	r31, 0xFB	; 251
    149a:	8f e2       	ldi	r24, 0x2F	; 47
    149c:	94 e0       	ldi	r25, 0x04	; 4
    149e:	91 83       	std	Z+1, r25	; 0x01
    14a0:	80 83       	st	Z, r24
			lev1Count = edgeDetect(temp[levelcount]);
    14a2:	80 91 00 02 	lds	r24, 0x0200
    14a6:	90 91 01 02 	lds	r25, 0x0201
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	fc 01       	movw	r30, r24
    14b0:	ef 5a       	subi	r30, 0xAF	; 175
    14b2:	fb 4f       	sbci	r31, 0xFB	; 251
    14b4:	80 81       	ld	r24, Z
    14b6:	91 81       	ldd	r25, Z+1	; 0x01
    14b8:	0e 94 6f 06 	call	0xcde	; 0xcde <edgeDetect>
    14bc:	90 93 86 04 	sts	0x0486, r25
    14c0:	80 93 85 04 	sts	0x0485, r24
			lcd_reset();
    14c4:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
			lcd_cursor(1,1);
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	61 e0       	ldi	r22, 0x01	; 1
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
			lcd_string("Count: ");
    14d4:	8f e5       	ldi	r24, 0x5F	; 95
    14d6:	92 e0       	ldi	r25, 0x02	; 2
    14d8:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
			lcd_cursor(2,1);
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	61 e0       	ldi	r22, 0x01	; 1
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
			itoa(lev1Count, buff,10);
    14e8:	80 91 85 04 	lds	r24, 0x0485
    14ec:	90 91 86 04 	lds	r25, 0x0486
    14f0:	2a e2       	ldi	r18, 0x2A	; 42
    14f2:	34 e0       	ldi	r19, 0x04	; 4
    14f4:	b9 01       	movw	r22, r18
    14f6:	4a e0       	ldi	r20, 0x0A	; 10
    14f8:	50 e0       	ldi	r21, 0x00	; 0
    14fa:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
			lcd_string(buff);
    14fe:	8a e2       	ldi	r24, 0x2A	; 42
    1500:	94 e0       	ldi	r25, 0x04	; 4
    1502:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
			first_time_flag=1;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	90 93 23 04 	sts	0x0423, r25
    150e:	80 93 22 04 	sts	0x0422, r24
		}
		i1=0;
    1512:	10 92 8a 04 	sts	0x048A, r1
    1516:	10 92 89 04 	sts	0x0489, r1
    151a:	ac c0       	rjmp	.+344    	; 0x1674 <start_level+0x22e>
		while(temp[levelcount]->visited[i1]==1)
		{
			i1++;
    151c:	80 91 89 04 	lds	r24, 0x0489
    1520:	90 91 8a 04 	lds	r25, 0x048A
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	90 93 8a 04 	sts	0x048A, r25
    152a:	80 93 89 04 	sts	0x0489, r24
			if (i1>=lev1Count)
    152e:	20 91 89 04 	lds	r18, 0x0489
    1532:	30 91 8a 04 	lds	r19, 0x048A
    1536:	80 91 85 04 	lds	r24, 0x0485
    153a:	90 91 86 04 	lds	r25, 0x0486
    153e:	28 17       	cp	r18, r24
    1540:	39 07       	cpc	r19, r25
    1542:	0c f4       	brge	.+2      	; 0x1546 <start_level+0x100>
    1544:	97 c0       	rjmp	.+302    	; 0x1674 <start_level+0x22e>
			{
				lcd_cursor(2,1);
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	61 e0       	ldi	r22, 0x01	; 1
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
				lcd_string("Exiting");
    1552:	87 e6       	ldi	r24, 0x67	; 103
    1554:	92 e0       	ldi	r25, 0x02	; 2
    1556:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
				reverse_distance_mm(20);
    155a:	84 e1       	ldi	r24, 0x14	; 20
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 03 02 	call	0x406	; 0x406 <reverse_distance_mm>
				angle_rotate(190,2);
    1562:	8e eb       	ldi	r24, 0xBE	; 190
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	62 e0       	ldi	r22, 0x02	; 2
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
				free(temp[levelcount]);
    156e:	80 91 00 02 	lds	r24, 0x0200
    1572:	90 91 01 02 	lds	r25, 0x0201
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	fc 01       	movw	r30, r24
    157c:	ef 5a       	subi	r30, 0xAF	; 175
    157e:	fb 4f       	sbci	r31, 0xFB	; 251
    1580:	80 81       	ld	r24, Z
    1582:	91 81       	ldd	r25, Z+1	; 0x01
    1584:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <free>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	aa e7       	ldi	r26, 0x7A	; 122
    158e:	b4 e4       	ldi	r27, 0x44	; 68
    1590:	8f a3       	std	Y+39, r24	; 0x27
    1592:	98 a7       	std	Y+40, r25	; 0x28
    1594:	a9 a7       	std	Y+41, r26	; 0x29
    1596:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1598:	6f a1       	ldd	r22, Y+39	; 0x27
    159a:	78 a5       	ldd	r23, Y+40	; 0x28
    159c:	89 a5       	ldd	r24, Y+41	; 0x29
    159e:	9a a5       	ldd	r25, Y+42	; 0x2a
    15a0:	2d ec       	ldi	r18, 0xCD	; 205
    15a2:	3c ec       	ldi	r19, 0xCC	; 204
    15a4:	4c e2       	ldi	r20, 0x2C	; 44
    15a6:	55 e4       	ldi	r21, 0x45	; 69
    15a8:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	8b a3       	std	Y+35, r24	; 0x23
    15b2:	9c a3       	std	Y+36, r25	; 0x24
    15b4:	ad a3       	std	Y+37, r26	; 0x25
    15b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15b8:	6b a1       	ldd	r22, Y+35	; 0x23
    15ba:	7c a1       	ldd	r23, Y+36	; 0x24
    15bc:	8d a1       	ldd	r24, Y+37	; 0x25
    15be:	9e a1       	ldd	r25, Y+38	; 0x26
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	2c f4       	brge	.+10     	; 0x15da <start_level+0x194>
		__ticks = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9a a3       	std	Y+34, r25	; 0x22
    15d6:	89 a3       	std	Y+33, r24	; 0x21
    15d8:	3f c0       	rjmp	.+126    	; 0x1658 <start_level+0x212>
	else if (__tmp > 65535)
    15da:	6b a1       	ldd	r22, Y+35	; 0x23
    15dc:	7c a1       	ldd	r23, Y+36	; 0x24
    15de:	8d a1       	ldd	r24, Y+37	; 0x25
    15e0:	9e a1       	ldd	r25, Y+38	; 0x26
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	4f e7       	ldi	r20, 0x7F	; 127
    15e8:	57 e4       	ldi	r21, 0x47	; 71
    15ea:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	4c f5       	brge	.+82     	; 0x1644 <start_level+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	6f a1       	ldd	r22, Y+39	; 0x27
    15f4:	78 a5       	ldd	r23, Y+40	; 0x28
    15f6:	89 a5       	ldd	r24, Y+41	; 0x29
    15f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e2       	ldi	r20, 0x20	; 32
    1600:	51 e4       	ldi	r21, 0x41	; 65
    1602:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9a a3       	std	Y+34, r25	; 0x22
    1618:	89 a3       	std	Y+33, r24	; 0x21
    161a:	0f c0       	rjmp	.+30     	; 0x163a <start_level+0x1f4>
    161c:	84 e1       	ldi	r24, 0x14	; 20
    161e:	91 e0       	ldi	r25, 0x01	; 1
    1620:	98 a3       	std	Y+32, r25	; 0x20
    1622:	8f 8f       	std	Y+31, r24	; 0x1f
    1624:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1626:	98 a1       	ldd	r25, Y+32	; 0x20
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <start_level+0x1e2>
    162c:	98 a3       	std	Y+32, r25	; 0x20
    162e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1630:	89 a1       	ldd	r24, Y+33	; 0x21
    1632:	9a a1       	ldd	r25, Y+34	; 0x22
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	9a a3       	std	Y+34, r25	; 0x22
    1638:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163a:	89 a1       	ldd	r24, Y+33	; 0x21
    163c:	9a a1       	ldd	r25, Y+34	; 0x22
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	69 f7       	brne	.-38     	; 0x161c <start_level+0x1d6>
    1642:	14 c0       	rjmp	.+40     	; 0x166c <start_level+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1644:	6b a1       	ldd	r22, Y+35	; 0x23
    1646:	7c a1       	ldd	r23, Y+36	; 0x24
    1648:	8d a1       	ldd	r24, Y+37	; 0x25
    164a:	9e a1       	ldd	r25, Y+38	; 0x26
    164c:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	9a a3       	std	Y+34, r25	; 0x22
    1656:	89 a3       	std	Y+33, r24	; 0x21
    1658:	89 a1       	ldd	r24, Y+33	; 0x21
    165a:	9a a1       	ldd	r25, Y+34	; 0x22
    165c:	9e 8f       	std	Y+30, r25	; 0x1e
    165e:	8d 8f       	std	Y+29, r24	; 0x1d
    1660:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1662:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <start_level+0x21e>
    1668:	9e 8f       	std	Y+30, r25	; 0x1e
    166a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				printMatrix();
    166c:	0e 94 94 04 	call	0x928	; 0x928 <printMatrix>
				final_move();
    1670:	0e 94 c3 03 	call	0x786	; 0x786 <final_move>
			itoa(lev1Count, buff,10);
			lcd_string(buff);
			first_time_flag=1;
		}
		i1=0;
		while(temp[levelcount]->visited[i1]==1)
    1674:	80 91 00 02 	lds	r24, 0x0200
    1678:	90 91 01 02 	lds	r25, 0x0201
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	fc 01       	movw	r30, r24
    1682:	ef 5a       	subi	r30, 0xAF	; 175
    1684:	fb 4f       	sbci	r31, 0xFB	; 251
    1686:	20 81       	ld	r18, Z
    1688:	31 81       	ldd	r19, Z+1	; 0x01
    168a:	80 91 89 04 	lds	r24, 0x0489
    168e:	90 91 8a 04 	lds	r25, 0x048A
    1692:	0a 96       	adiw	r24, 0x0a	; 10
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	f9 01       	movw	r30, r18
    169a:	e8 0f       	add	r30, r24
    169c:	f9 1f       	adc	r31, r25
    169e:	80 81       	ld	r24, Z
    16a0:	91 81       	ldd	r25, Z+1	; 0x01
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	91 05       	cpc	r25, r1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <start_level+0x264>
    16a8:	39 cf       	rjmp	.-398    	; 0x151c <start_level+0xd6>
				printMatrix();
				final_move();
								
			}
		}
		error=(i1+1)*7;
    16aa:	80 91 89 04 	lds	r24, 0x0489
    16ae:	90 91 8a 04 	lds	r25, 0x048A
    16b2:	9c 01       	movw	r18, r24
    16b4:	2f 5f       	subi	r18, 0xFF	; 255
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	c9 01       	movw	r24, r18
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	82 1b       	sub	r24, r18
    16c8:	93 0b       	sbc	r25, r19
    16ca:	90 93 03 02 	sts	0x0203, r25
    16ce:	80 93 02 02 	sts	0x0202, r24
		temp[levelcount+1]=temp[levelcount]->children[i1];
    16d2:	80 91 00 02 	lds	r24, 0x0200
    16d6:	90 91 01 02 	lds	r25, 0x0201
    16da:	ac 01       	movw	r20, r24
    16dc:	4f 5f       	subi	r20, 0xFF	; 255
    16de:	5f 4f       	sbci	r21, 0xFF	; 255
    16e0:	80 91 00 02 	lds	r24, 0x0200
    16e4:	90 91 01 02 	lds	r25, 0x0201
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	fc 01       	movw	r30, r24
    16ee:	ef 5a       	subi	r30, 0xAF	; 175
    16f0:	fb 4f       	sbci	r31, 0xFB	; 251
    16f2:	20 81       	ld	r18, Z
    16f4:	31 81       	ldd	r19, Z+1	; 0x01
    16f6:	80 91 89 04 	lds	r24, 0x0489
    16fa:	90 91 8a 04 	lds	r25, 0x048A
    16fe:	01 96       	adiw	r24, 0x01	; 1
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	f9 01       	movw	r30, r18
    1706:	e8 0f       	add	r30, r24
    1708:	f9 1f       	adc	r31, r25
    170a:	20 81       	ld	r18, Z
    170c:	31 81       	ldd	r19, Z+1	; 0x01
    170e:	ca 01       	movw	r24, r20
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	fc 01       	movw	r30, r24
    1716:	ef 5a       	subi	r30, 0xAF	; 175
    1718:	fb 4f       	sbci	r31, 0xFB	; 251
    171a:	31 83       	std	Z+1, r19	; 0x01
    171c:	20 83       	st	Z, r18
		rotateSkipping(lev1Count-i1);
    171e:	20 91 85 04 	lds	r18, 0x0485
    1722:	30 91 86 04 	lds	r19, 0x0486
    1726:	80 91 89 04 	lds	r24, 0x0489
    172a:	90 91 8a 04 	lds	r25, 0x048A
    172e:	a9 01       	movw	r20, r18
    1730:	48 1b       	sub	r20, r24
    1732:	59 0b       	sbc	r21, r25
    1734:	ca 01       	movw	r24, r20
    1736:	0e 94 29 06 	call	0xc52	; 0xc52 <rotateSkipping>
		lcd_reset();
    173a:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
		lcd_cursor(1,1);
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	61 e0       	ldi	r22, 0x01	; 1
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
		lcd_string("new child");
    174a:	8f e6       	ldi	r24, 0x6F	; 111
    174c:	92 e0       	ldi	r25, 0x02	; 2
    174e:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
		lcd_cursor(2,1);
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
		itoa(temp[levelcount]->angles[i1], buff,10);
    175e:	80 91 00 02 	lds	r24, 0x0200
    1762:	90 91 01 02 	lds	r25, 0x0201
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	fc 01       	movw	r30, r24
    176c:	ef 5a       	subi	r30, 0xAF	; 175
    176e:	fb 4f       	sbci	r31, 0xFB	; 251
    1770:	20 81       	ld	r18, Z
    1772:	31 81       	ldd	r19, Z+1	; 0x01
    1774:	80 91 89 04 	lds	r24, 0x0489
    1778:	90 91 8a 04 	lds	r25, 0x048A
    177c:	05 96       	adiw	r24, 0x05	; 5
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	f9 01       	movw	r30, r18
    1784:	e8 0f       	add	r30, r24
    1786:	f9 1f       	adc	r31, r25
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
    178c:	2a e2       	ldi	r18, 0x2A	; 42
    178e:	34 e0       	ldi	r19, 0x04	; 4
    1790:	b9 01       	movw	r22, r18
    1792:	4a e0       	ldi	r20, 0x0A	; 10
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
		lcd_string(buff);
    179a:	8a e2       	ldi	r24, 0x2A	; 42
    179c:	94 e0       	ldi	r25, 0x04	; 4
    179e:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>

		distanceStackTop++;									// Add the Path distance to stack
    17a2:	80 91 04 02 	lds	r24, 0x0204
    17a6:	90 91 05 02 	lds	r25, 0x0205
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	90 93 05 02 	sts	0x0205, r25
    17b0:	80 93 04 02 	sts	0x0204, r24
		distanceStack[distanceStackTop] = followWhiteLineTillNode();
    17b4:	00 91 04 02 	lds	r16, 0x0204
    17b8:	10 91 05 02 	lds	r17, 0x0205
    17bc:	0e 94 46 08 	call	0x108c	; 0x108c <followWhiteLineTillNode>
    17c0:	9c 01       	movw	r18, r24
    17c2:	c8 01       	movw	r24, r16
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	fc 01       	movw	r30, r24
    17ca:	e5 57       	subi	r30, 0x75	; 117
    17cc:	fb 4f       	sbci	r31, 0xFB	; 251
    17ce:	31 83       	std	Z+1, r19	; 0x01
    17d0:	20 83       	st	Z, r18
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	aa e7       	ldi	r26, 0x7A	; 122
    17d8:	b4 e4       	ldi	r27, 0x44	; 68
    17da:	89 8f       	std	Y+25, r24	; 0x19
    17dc:	9a 8f       	std	Y+26, r25	; 0x1a
    17de:	ab 8f       	std	Y+27, r26	; 0x1b
    17e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e2:	69 8d       	ldd	r22, Y+25	; 0x19
    17e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ea:	2d ec       	ldi	r18, 0xCD	; 205
    17ec:	3c ec       	ldi	r19, 0xCC	; 204
    17ee:	4c e2       	ldi	r20, 0x2C	; 44
    17f0:	55 e4       	ldi	r21, 0x45	; 69
    17f2:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	8d 8b       	std	Y+21, r24	; 0x15
    17fc:	9e 8b       	std	Y+22, r25	; 0x16
    17fe:	af 8b       	std	Y+23, r26	; 0x17
    1800:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1802:	6d 89       	ldd	r22, Y+21	; 0x15
    1804:	7e 89       	ldd	r23, Y+22	; 0x16
    1806:	8f 89       	ldd	r24, Y+23	; 0x17
    1808:	98 8d       	ldd	r25, Y+24	; 0x18
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e8       	ldi	r20, 0x80	; 128
    1810:	5f e3       	ldi	r21, 0x3F	; 63
    1812:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    1816:	88 23       	and	r24, r24
    1818:	2c f4       	brge	.+10     	; 0x1824 <start_level+0x3de>
		__ticks = 1;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	9c 8b       	std	Y+20, r25	; 0x14
    1820:	8b 8b       	std	Y+19, r24	; 0x13
    1822:	3f c0       	rjmp	.+126    	; 0x18a2 <start_level+0x45c>
	else if (__tmp > 65535)
    1824:	6d 89       	ldd	r22, Y+21	; 0x15
    1826:	7e 89       	ldd	r23, Y+22	; 0x16
    1828:	8f 89       	ldd	r24, Y+23	; 0x17
    182a:	98 8d       	ldd	r25, Y+24	; 0x18
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	3f ef       	ldi	r19, 0xFF	; 255
    1830:	4f e7       	ldi	r20, 0x7F	; 127
    1832:	57 e4       	ldi	r21, 0x47	; 71
    1834:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    1838:	18 16       	cp	r1, r24
    183a:	4c f5       	brge	.+82     	; 0x188e <start_level+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183c:	69 8d       	ldd	r22, Y+25	; 0x19
    183e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1840:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1842:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e2       	ldi	r20, 0x20	; 32
    184a:	51 e4       	ldi	r21, 0x41	; 65
    184c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	bc 01       	movw	r22, r24
    1856:	cd 01       	movw	r24, r26
    1858:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9c 8b       	std	Y+20, r25	; 0x14
    1862:	8b 8b       	std	Y+19, r24	; 0x13
    1864:	0f c0       	rjmp	.+30     	; 0x1884 <start_level+0x43e>
    1866:	84 e1       	ldi	r24, 0x14	; 20
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	9a 8b       	std	Y+18, r25	; 0x12
    186c:	89 8b       	std	Y+17, r24	; 0x11
    186e:	89 89       	ldd	r24, Y+17	; 0x11
    1870:	9a 89       	ldd	r25, Y+18	; 0x12
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <start_level+0x42c>
    1876:	9a 8b       	std	Y+18, r25	; 0x12
    1878:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187a:	8b 89       	ldd	r24, Y+19	; 0x13
    187c:	9c 89       	ldd	r25, Y+20	; 0x14
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	9c 8b       	std	Y+20, r25	; 0x14
    1882:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1884:	8b 89       	ldd	r24, Y+19	; 0x13
    1886:	9c 89       	ldd	r25, Y+20	; 0x14
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	69 f7       	brne	.-38     	; 0x1866 <start_level+0x420>
    188c:	14 c0       	rjmp	.+40     	; 0x18b6 <start_level+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188e:	6d 89       	ldd	r22, Y+21	; 0x15
    1890:	7e 89       	ldd	r23, Y+22	; 0x16
    1892:	8f 89       	ldd	r24, Y+23	; 0x17
    1894:	98 8d       	ldd	r25, Y+24	; 0x18
    1896:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	9c 8b       	std	Y+20, r25	; 0x14
    18a0:	8b 8b       	std	Y+19, r24	; 0x13
    18a2:	8b 89       	ldd	r24, Y+19	; 0x13
    18a4:	9c 89       	ldd	r25, Y+20	; 0x14
    18a6:	98 8b       	std	Y+16, r25	; 0x10
    18a8:	8f 87       	std	Y+15, r24	; 0x0f
    18aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ac:	98 89       	ldd	r25, Y+16	; 0x10
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <start_level+0x468>
    18b2:	98 8b       	std	Y+16, r25	; 0x10
    18b4:	8f 87       	std	Y+15, r24	; 0x0f


		_delay_ms(1000);
		levelcount++;
    18b6:	80 91 00 02 	lds	r24, 0x0200
    18ba:	90 91 01 02 	lds	r25, 0x0201
    18be:	01 96       	adiw	r24, 0x01	; 1
    18c0:	90 93 01 02 	sts	0x0201, r25
    18c4:	80 93 00 02 	sts	0x0200, r24
		flag[levelcount]=0;
    18c8:	80 91 00 02 	lds	r24, 0x0200
    18cc:	90 91 01 02 	lds	r25, 0x0201
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	fc 01       	movw	r30, r24
    18d6:	e2 5f       	subi	r30, 0xF2	; 242
    18d8:	fb 4f       	sbci	r31, 0xFB	; 251
    18da:	11 82       	std	Z+1, r1	; 0x01
    18dc:	10 82       	st	Z, r1
    18de:	b6 c0       	rjmp	.+364    	; 0x1a4c <start_level+0x606>
	}
	else
	{
		linear_distance_mm(45);
    18e0:	8d e2       	ldi	r24, 0x2D	; 45
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 a3 01 	call	0x346	; 0x346 <linear_distance_mm>
		angle_rotate((temp[levelcount]->angles[i1])-10,2);
    18e8:	80 91 00 02 	lds	r24, 0x0200
    18ec:	90 91 01 02 	lds	r25, 0x0201
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	fc 01       	movw	r30, r24
    18f6:	ef 5a       	subi	r30, 0xAF	; 175
    18f8:	fb 4f       	sbci	r31, 0xFB	; 251
    18fa:	20 81       	ld	r18, Z
    18fc:	31 81       	ldd	r19, Z+1	; 0x01
    18fe:	80 91 89 04 	lds	r24, 0x0489
    1902:	90 91 8a 04 	lds	r25, 0x048A
    1906:	05 96       	adiw	r24, 0x05	; 5
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	f9 01       	movw	r30, r18
    190e:	e8 0f       	add	r30, r24
    1910:	f9 1f       	adc	r31, r25
    1912:	80 81       	ld	r24, Z
    1914:	91 81       	ldd	r25, Z+1	; 0x01
    1916:	0a 97       	sbiw	r24, 0x0a	; 10
    1918:	62 e0       	ldi	r22, 0x02	; 2
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
		temp[levelcount]->visited[i1]=1;
    1920:	80 91 00 02 	lds	r24, 0x0200
    1924:	90 91 01 02 	lds	r25, 0x0201
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	fc 01       	movw	r30, r24
    192e:	ef 5a       	subi	r30, 0xAF	; 175
    1930:	fb 4f       	sbci	r31, 0xFB	; 251
    1932:	20 81       	ld	r18, Z
    1934:	31 81       	ldd	r19, Z+1	; 0x01
    1936:	80 91 89 04 	lds	r24, 0x0489
    193a:	90 91 8a 04 	lds	r25, 0x048A
    193e:	0a 96       	adiw	r24, 0x0a	; 10
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	f9 01       	movw	r30, r18
    1946:	e8 0f       	add	r30, r24
    1948:	f9 1f       	adc	r31, r25
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	80 83       	st	Z, r24
		flag[levelcount]=0;
    1952:	80 91 00 02 	lds	r24, 0x0200
    1956:	90 91 01 02 	lds	r25, 0x0201
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	fc 01       	movw	r30, r24
    1960:	e2 5f       	subi	r30, 0xF2	; 242
    1962:	fb 4f       	sbci	r31, 0xFB	; 251
    1964:	11 82       	std	Z+1, r1	; 0x01
    1966:	10 82       	st	Z, r1
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	aa e7       	ldi	r26, 0x7A	; 122
    196e:	b4 e4       	ldi	r27, 0x44	; 68
    1970:	8b 87       	std	Y+11, r24	; 0x0b
    1972:	9c 87       	std	Y+12, r25	; 0x0c
    1974:	ad 87       	std	Y+13, r26	; 0x0d
    1976:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1978:	6b 85       	ldd	r22, Y+11	; 0x0b
    197a:	7c 85       	ldd	r23, Y+12	; 0x0c
    197c:	8d 85       	ldd	r24, Y+13	; 0x0d
    197e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1980:	2d ec       	ldi	r18, 0xCD	; 205
    1982:	3c ec       	ldi	r19, 0xCC	; 204
    1984:	4c e2       	ldi	r20, 0x2C	; 44
    1986:	55 e4       	ldi	r21, 0x45	; 69
    1988:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	8f 83       	std	Y+7, r24	; 0x07
    1992:	98 87       	std	Y+8, r25	; 0x08
    1994:	a9 87       	std	Y+9, r26	; 0x09
    1996:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1998:	6f 81       	ldd	r22, Y+7	; 0x07
    199a:	78 85       	ldd	r23, Y+8	; 0x08
    199c:	89 85       	ldd	r24, Y+9	; 0x09
    199e:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e8       	ldi	r20, 0x80	; 128
    19a6:	5f e3       	ldi	r21, 0x3F	; 63
    19a8:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    19ac:	88 23       	and	r24, r24
    19ae:	2c f4       	brge	.+10     	; 0x19ba <start_level+0x574>
		__ticks = 1;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
    19b8:	3f c0       	rjmp	.+126    	; 0x1a38 <start_level+0x5f2>
	else if (__tmp > 65535)
    19ba:	6f 81       	ldd	r22, Y+7	; 0x07
    19bc:	78 85       	ldd	r23, Y+8	; 0x08
    19be:	89 85       	ldd	r24, Y+9	; 0x09
    19c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	3f ef       	ldi	r19, 0xFF	; 255
    19c6:	4f e7       	ldi	r20, 0x7F	; 127
    19c8:	57 e4       	ldi	r21, 0x47	; 71
    19ca:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    19ce:	18 16       	cp	r1, r24
    19d0:	4c f5       	brge	.+82     	; 0x1a24 <start_level+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e2       	ldi	r20, 0x20	; 32
    19e0:	51 e4       	ldi	r21, 0x41	; 65
    19e2:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	bc 01       	movw	r22, r24
    19ec:	cd 01       	movw	r24, r26
    19ee:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	9e 83       	std	Y+6, r25	; 0x06
    19f8:	8d 83       	std	Y+5, r24	; 0x05
    19fa:	0f c0       	rjmp	.+30     	; 0x1a1a <start_level+0x5d4>
    19fc:	84 e1       	ldi	r24, 0x14	; 20
    19fe:	91 e0       	ldi	r25, 0x01	; 1
    1a00:	9c 83       	std	Y+4, r25	; 0x04
    1a02:	8b 83       	std	Y+3, r24	; 0x03
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	9c 81       	ldd	r25, Y+4	; 0x04
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <start_level+0x5c2>
    1a0c:	9c 83       	std	Y+4, r25	; 0x04
    1a0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	9e 81       	ldd	r25, Y+6	; 0x06
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	69 f7       	brne	.-38     	; 0x19fc <start_level+0x5b6>
    1a22:	14 c0       	rjmp	.+40     	; 0x1a4c <start_level+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a24:	6f 81       	ldd	r22, Y+7	; 0x07
    1a26:	78 85       	ldd	r23, Y+8	; 0x08
    1a28:	89 85       	ldd	r24, Y+9	; 0x09
    1a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2c:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	9e 83       	std	Y+6, r25	; 0x06
    1a36:	8d 83       	std	Y+5, r24	; 0x05
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	9a 81       	ldd	r25, Y+2	; 0x02
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <start_level+0x5fe>
    1a48:	9a 83       	std	Y+2, r25	; 0x02
    1a4a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}
}
    1a4c:	aa 96       	adiw	r28, 0x2a	; 42
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	08 95       	ret

00001a62 <level2>:
*/



void level2()
{
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	c6 54       	subi	r28, 0x46	; 70
    1a70:	d0 40       	sbci	r29, 0x00	; 0
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
	
	if(flag[levelcount]==0)				//If First time coming to the Node.
    1a7c:	80 91 00 02 	lds	r24, 0x0200
    1a80:	90 91 01 02 	lds	r25, 0x0201
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	fc 01       	movw	r30, r24
    1a8a:	e2 5f       	subi	r30, 0xF2	; 242
    1a8c:	fb 4f       	sbci	r31, 0xFB	; 251
    1a8e:	80 81       	ld	r24, Z
    1a90:	91 81       	ldd	r25, Z+1	; 0x01
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <level2+0x36>
    1a96:	70 c1       	rjmp	.+736    	; 0x1d78 <level2+0x316>
	{
		
		//adjusting itself for counting
		linear_distance_mm(55);
    1a98:	87 e3       	ldi	r24, 0x37	; 55
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 a3 01 	call	0x346	; 0x346 <linear_distance_mm>
		angle_rotate(temp[levelcount-1]->angles[i1]-error,2);
    1aa0:	80 91 00 02 	lds	r24, 0x0200
    1aa4:	90 91 01 02 	lds	r25, 0x0201
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	fc 01       	movw	r30, r24
    1ab0:	ef 5a       	subi	r30, 0xAF	; 175
    1ab2:	fb 4f       	sbci	r31, 0xFB	; 251
    1ab4:	20 81       	ld	r18, Z
    1ab6:	31 81       	ldd	r19, Z+1	; 0x01
    1ab8:	80 91 89 04 	lds	r24, 0x0489
    1abc:	90 91 8a 04 	lds	r25, 0x048A
    1ac0:	05 96       	adiw	r24, 0x05	; 5
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	f9 01       	movw	r30, r18
    1ac8:	e8 0f       	add	r30, r24
    1aca:	f9 1f       	adc	r31, r25
    1acc:	20 81       	ld	r18, Z
    1ace:	31 81       	ldd	r19, Z+1	; 0x01
    1ad0:	80 91 02 02 	lds	r24, 0x0202
    1ad4:	90 91 03 02 	lds	r25, 0x0203
    1ad8:	a9 01       	movw	r20, r18
    1ada:	48 1b       	sub	r20, r24
    1adc:	59 0b       	sbc	r21, r25
    1ade:	ca 01       	movw	r24, r20
    1ae0:	62 e0       	ldi	r22, 0x02	; 2
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
		//At Level 2
		lev2Count = edgeDetect(temp[levelcount]);
    1ae8:	80 91 00 02 	lds	r24, 0x0200
    1aec:	90 91 01 02 	lds	r25, 0x0201
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	fc 01       	movw	r30, r24
    1af6:	ef 5a       	subi	r30, 0xAF	; 175
    1af8:	fb 4f       	sbci	r31, 0xFB	; 251
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	0e 94 6f 06 	call	0xcde	; 0xcde <edgeDetect>
    1b02:	90 93 92 04 	sts	0x0492, r25
    1b06:	80 93 91 04 	sts	0x0491, r24
		lcd_reset();
    1b0a:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
		lcd_cursor(1,1);
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
		lcd_string("Count: ");
    1b1a:	8f e5       	ldi	r24, 0x5F	; 95
    1b1c:	92 e0       	ldi	r25, 0x02	; 2
    1b1e:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
		lcd_cursor(2,1);
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
		itoa(lev2Count, buff,10);
    1b2e:	80 91 91 04 	lds	r24, 0x0491
    1b32:	90 91 92 04 	lds	r25, 0x0492
    1b36:	2a e2       	ldi	r18, 0x2A	; 42
    1b38:	34 e0       	ldi	r19, 0x04	; 4
    1b3a:	b9 01       	movw	r22, r18
    1b3c:	4a e0       	ldi	r20, 0x0A	; 10
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
		lcd_string(buff);
    1b44:	8a e2       	ldi	r24, 0x2A	; 42
    1b46:	94 e0       	ldi	r25, 0x04	; 4
    1b48:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
		i2=0;
    1b4c:	10 92 29 04 	sts	0x0429, r1
    1b50:	10 92 28 04 	sts	0x0428, r1
		temp[levelcount+1]=temp[levelcount]->children[i2];
    1b54:	80 91 00 02 	lds	r24, 0x0200
    1b58:	90 91 01 02 	lds	r25, 0x0201
    1b5c:	ac 01       	movw	r20, r24
    1b5e:	4f 5f       	subi	r20, 0xFF	; 255
    1b60:	5f 4f       	sbci	r21, 0xFF	; 255
    1b62:	80 91 00 02 	lds	r24, 0x0200
    1b66:	90 91 01 02 	lds	r25, 0x0201
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	fc 01       	movw	r30, r24
    1b70:	ef 5a       	subi	r30, 0xAF	; 175
    1b72:	fb 4f       	sbci	r31, 0xFB	; 251
    1b74:	20 81       	ld	r18, Z
    1b76:	31 81       	ldd	r19, Z+1	; 0x01
    1b78:	80 91 28 04 	lds	r24, 0x0428
    1b7c:	90 91 29 04 	lds	r25, 0x0429
    1b80:	01 96       	adiw	r24, 0x01	; 1
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	f9 01       	movw	r30, r18
    1b88:	e8 0f       	add	r30, r24
    1b8a:	f9 1f       	adc	r31, r25
    1b8c:	20 81       	ld	r18, Z
    1b8e:	31 81       	ldd	r19, Z+1	; 0x01
    1b90:	ca 01       	movw	r24, r20
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	fc 01       	movw	r30, r24
    1b98:	ef 5a       	subi	r30, 0xAF	; 175
    1b9a:	fb 4f       	sbci	r31, 0xFB	; 251
    1b9c:	31 83       	std	Z+1, r19	; 0x01
    1b9e:	20 83       	st	Z, r18
		rotateSkipping(lev2Count);
    1ba0:	80 91 91 04 	lds	r24, 0x0491
    1ba4:	90 91 92 04 	lds	r25, 0x0492
    1ba8:	0e 94 29 06 	call	0xc52	; 0xc52 <rotateSkipping>
		lcd_reset();
    1bac:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
		lcd_cursor(1,1);
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
		lcd_string("new child");
    1bbc:	8f e6       	ldi	r24, 0x6F	; 111
    1bbe:	92 e0       	ldi	r25, 0x02	; 2
    1bc0:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
		lcd_cursor(2,1);
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
		itoa(temp[levelcount]->angles[i2], buff,10);
    1bd0:	80 91 00 02 	lds	r24, 0x0200
    1bd4:	90 91 01 02 	lds	r25, 0x0201
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	fc 01       	movw	r30, r24
    1bde:	ef 5a       	subi	r30, 0xAF	; 175
    1be0:	fb 4f       	sbci	r31, 0xFB	; 251
    1be2:	20 81       	ld	r18, Z
    1be4:	31 81       	ldd	r19, Z+1	; 0x01
    1be6:	80 91 28 04 	lds	r24, 0x0428
    1bea:	90 91 29 04 	lds	r25, 0x0429
    1bee:	05 96       	adiw	r24, 0x05	; 5
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	f9 01       	movw	r30, r18
    1bf6:	e8 0f       	add	r30, r24
    1bf8:	f9 1f       	adc	r31, r25
    1bfa:	80 81       	ld	r24, Z
    1bfc:	91 81       	ldd	r25, Z+1	; 0x01
    1bfe:	2a e2       	ldi	r18, 0x2A	; 42
    1c00:	34 e0       	ldi	r19, 0x04	; 4
    1c02:	b9 01       	movw	r22, r18
    1c04:	4a e0       	ldi	r20, 0x0A	; 10
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
		lcd_string(buff);
    1c0c:	8a e2       	ldi	r24, 0x2A	; 42
    1c0e:	94 e0       	ldi	r25, 0x04	; 4
    1c10:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>



		distanceStackTop++;									// Add the Path distance to stack
    1c14:	80 91 04 02 	lds	r24, 0x0204
    1c18:	90 91 05 02 	lds	r25, 0x0205
    1c1c:	01 96       	adiw	r24, 0x01	; 1
    1c1e:	90 93 05 02 	sts	0x0205, r25
    1c22:	80 93 04 02 	sts	0x0204, r24
		distanceStack[distanceStackTop] = followWhiteLineTillNode();
    1c26:	00 91 04 02 	lds	r16, 0x0204
    1c2a:	10 91 05 02 	lds	r17, 0x0205
    1c2e:	0e 94 46 08 	call	0x108c	; 0x108c <followWhiteLineTillNode>
    1c32:	9c 01       	movw	r18, r24
    1c34:	c8 01       	movw	r24, r16
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	e5 57       	subi	r30, 0x75	; 117
    1c3e:	fb 4f       	sbci	r31, 0xFB	; 251
    1c40:	31 83       	std	Z+1, r19	; 0x01
    1c42:	20 83       	st	Z, r18
    1c44:	fe 01       	movw	r30, r28
    1c46:	ed 5b       	subi	r30, 0xBD	; 189
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	aa e7       	ldi	r26, 0x7A	; 122
    1c50:	b4 e4       	ldi	r27, 0x44	; 68
    1c52:	80 83       	st	Z, r24
    1c54:	91 83       	std	Z+1, r25	; 0x01
    1c56:	a2 83       	std	Z+2, r26	; 0x02
    1c58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5a:	8e 01       	movw	r16, r28
    1c5c:	01 5c       	subi	r16, 0xC1	; 193
    1c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c60:	fe 01       	movw	r30, r28
    1c62:	ed 5b       	subi	r30, 0xBD	; 189
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	2d ec       	ldi	r18, 0xCD	; 205
    1c70:	3c ec       	ldi	r19, 0xCC	; 204
    1c72:	4c e2       	ldi	r20, 0x2C	; 44
    1c74:	55 e4       	ldi	r21, 0x45	; 69
    1c76:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	f8 01       	movw	r30, r16
    1c80:	80 83       	st	Z, r24
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	a2 83       	std	Z+2, r26	; 0x02
    1c86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c88:	fe 01       	movw	r30, r28
    1c8a:	ff 96       	adiw	r30, 0x3f	; 63
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e8       	ldi	r20, 0x80	; 128
    1c9a:	5f e3       	ldi	r21, 0x3F	; 63
    1c9c:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    1ca0:	88 23       	and	r24, r24
    1ca2:	2c f4       	brge	.+10     	; 0x1cae <level2+0x24c>
		__ticks = 1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9e af       	std	Y+62, r25	; 0x3e
    1caa:	8d af       	std	Y+61, r24	; 0x3d
    1cac:	46 c0       	rjmp	.+140    	; 0x1d3a <level2+0x2d8>
	else if (__tmp > 65535)
    1cae:	fe 01       	movw	r30, r28
    1cb0:	ff 96       	adiw	r30, 0x3f	; 63
    1cb2:	60 81       	ld	r22, Z
    1cb4:	71 81       	ldd	r23, Z+1	; 0x01
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	3f ef       	ldi	r19, 0xFF	; 255
    1cbe:	4f e7       	ldi	r20, 0x7F	; 127
    1cc0:	57 e4       	ldi	r21, 0x47	; 71
    1cc2:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    1cc6:	18 16       	cp	r1, r24
    1cc8:	64 f5       	brge	.+88     	; 0x1d22 <level2+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ed 5b       	subi	r30, 0xBD	; 189
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	60 81       	ld	r22, Z
    1cd2:	71 81       	ldd	r23, Z+1	; 0x01
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9e af       	std	Y+62, r25	; 0x3e
    1cf6:	8d af       	std	Y+61, r24	; 0x3d
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <level2+0x2b6>
    1cfa:	84 e1       	ldi	r24, 0x14	; 20
    1cfc:	91 e0       	ldi	r25, 0x01	; 1
    1cfe:	9c af       	std	Y+60, r25	; 0x3c
    1d00:	8b af       	std	Y+59, r24	; 0x3b
    1d02:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d04:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <level2+0x2a4>
    1d0a:	9c af       	std	Y+60, r25	; 0x3c
    1d0c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d10:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	9e af       	std	Y+62, r25	; 0x3e
    1d16:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <level2+0x298>
    1d20:	16 c0       	rjmp	.+44     	; 0x1d4e <level2+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	fe 01       	movw	r30, r28
    1d24:	ff 96       	adiw	r30, 0x3f	; 63
    1d26:	60 81       	ld	r22, Z
    1d28:	71 81       	ldd	r23, Z+1	; 0x01
    1d2a:	82 81       	ldd	r24, Z+2	; 0x02
    1d2c:	93 81       	ldd	r25, Z+3	; 0x03
    1d2e:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	9e af       	std	Y+62, r25	; 0x3e
    1d38:	8d af       	std	Y+61, r24	; 0x3d
    1d3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d3e:	9a af       	std	Y+58, r25	; 0x3a
    1d40:	89 af       	std	Y+57, r24	; 0x39
    1d42:	89 ad       	ldd	r24, Y+57	; 0x39
    1d44:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <level2+0x2e4>
    1d4a:	9a af       	std	Y+58, r25	; 0x3a
    1d4c:	89 af       	std	Y+57, r24	; 0x39


		_delay_ms(1000);
		levelcount++;
    1d4e:	80 91 00 02 	lds	r24, 0x0200
    1d52:	90 91 01 02 	lds	r25, 0x0201
    1d56:	01 96       	adiw	r24, 0x01	; 1
    1d58:	90 93 01 02 	sts	0x0201, r25
    1d5c:	80 93 00 02 	sts	0x0200, r24
		flag[levelcount]=0;
    1d60:	80 91 00 02 	lds	r24, 0x0200
    1d64:	90 91 01 02 	lds	r25, 0x0201
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	e2 5f       	subi	r30, 0xF2	; 242
    1d70:	fb 4f       	sbci	r31, 0xFB	; 251
    1d72:	11 82       	std	Z+1, r1	; 0x01
    1d74:	10 82       	st	Z, r1
    1d76:	c5 c4       	rjmp	.+2442   	; 0x2702 <__stack+0x503>
		
	}
	else
	{
		temp[levelcount]->visited[i2]=1;
    1d78:	80 91 00 02 	lds	r24, 0x0200
    1d7c:	90 91 01 02 	lds	r25, 0x0201
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	fc 01       	movw	r30, r24
    1d86:	ef 5a       	subi	r30, 0xAF	; 175
    1d88:	fb 4f       	sbci	r31, 0xFB	; 251
    1d8a:	20 81       	ld	r18, Z
    1d8c:	31 81       	ldd	r19, Z+1	; 0x01
    1d8e:	80 91 28 04 	lds	r24, 0x0428
    1d92:	90 91 29 04 	lds	r25, 0x0429
    1d96:	0a 96       	adiw	r24, 0x0a	; 10
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	f9 01       	movw	r30, r18
    1d9e:	e8 0f       	add	r30, r24
    1da0:	f9 1f       	adc	r31, r25
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	80 83       	st	Z, r24
		i2=0;
    1daa:	10 92 29 04 	sts	0x0429, r1
    1dae:	10 92 28 04 	sts	0x0428, r1
    1db2:	09 c0       	rjmp	.+18     	; 0x1dc6 <level2+0x364>
		while(temp[levelcount]->visited[i2]==1)
			i2++;
    1db4:	80 91 28 04 	lds	r24, 0x0428
    1db8:	90 91 29 04 	lds	r25, 0x0429
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	90 93 29 04 	sts	0x0429, r25
    1dc2:	80 93 28 04 	sts	0x0428, r24
	}
	else
	{
		temp[levelcount]->visited[i2]=1;
		i2=0;
		while(temp[levelcount]->visited[i2]==1)
    1dc6:	80 91 00 02 	lds	r24, 0x0200
    1dca:	90 91 01 02 	lds	r25, 0x0201
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	ef 5a       	subi	r30, 0xAF	; 175
    1dd6:	fb 4f       	sbci	r31, 0xFB	; 251
    1dd8:	20 81       	ld	r18, Z
    1dda:	31 81       	ldd	r19, Z+1	; 0x01
    1ddc:	80 91 28 04 	lds	r24, 0x0428
    1de0:	90 91 29 04 	lds	r25, 0x0429
    1de4:	0a 96       	adiw	r24, 0x0a	; 10
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	f9 01       	movw	r30, r18
    1dec:	e8 0f       	add	r30, r24
    1dee:	f9 1f       	adc	r31, r25
    1df0:	80 81       	ld	r24, Z
    1df2:	91 81       	ldd	r25, Z+1	; 0x01
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	91 05       	cpc	r25, r1
    1df8:	e9 f2       	breq	.-70     	; 0x1db4 <level2+0x352>
			i2++;
		if (i2>=lev2Count)
    1dfa:	20 91 28 04 	lds	r18, 0x0428
    1dfe:	30 91 29 04 	lds	r19, 0x0429
    1e02:	80 91 91 04 	lds	r24, 0x0491
    1e06:	90 91 92 04 	lds	r25, 0x0492
    1e0a:	28 17       	cp	r18, r24
    1e0c:	39 07       	cpc	r19, r25
    1e0e:	0c f4       	brge	.+2      	; 0x1e12 <level2+0x3b0>
    1e10:	6c c2       	rjmp	.+1240   	; 0x22ea <__stack+0xeb>
		{
			lcd_reset();
    1e12:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
			lcd_cursor(1,1);
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	61 e0       	ldi	r22, 0x01	; 1
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
			lcd_string("bac gret");
    1e22:	89 e7       	ldi	r24, 0x79	; 121
    1e24:	92 e0       	ldi	r25, 0x02	; 2
    1e26:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
			lcd_cursor(2,1);
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	61 e0       	ldi	r22, 0x01	; 1
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
			itoa(temp[levelcount]->angles[i2-1], buff,10);
    1e36:	80 91 00 02 	lds	r24, 0x0200
    1e3a:	90 91 01 02 	lds	r25, 0x0201
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	fc 01       	movw	r30, r24
    1e44:	ef 5a       	subi	r30, 0xAF	; 175
    1e46:	fb 4f       	sbci	r31, 0xFB	; 251
    1e48:	20 81       	ld	r18, Z
    1e4a:	31 81       	ldd	r19, Z+1	; 0x01
    1e4c:	80 91 28 04 	lds	r24, 0x0428
    1e50:	90 91 29 04 	lds	r25, 0x0429
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	05 96       	adiw	r24, 0x05	; 5
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	f9 01       	movw	r30, r18
    1e5e:	e8 0f       	add	r30, r24
    1e60:	f9 1f       	adc	r31, r25
    1e62:	80 81       	ld	r24, Z
    1e64:	91 81       	ldd	r25, Z+1	; 0x01
    1e66:	2a e2       	ldi	r18, 0x2A	; 42
    1e68:	34 e0       	ldi	r19, 0x04	; 4
    1e6a:	b9 01       	movw	r22, r18
    1e6c:	4a e0       	ldi	r20, 0x0A	; 10
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
			lcd_string(buff);
    1e74:	8a e2       	ldi	r24, 0x2A	; 42
    1e76:	94 e0       	ldi	r25, 0x04	; 4
    1e78:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
			linear_distance_mm(60);
    1e7c:	8c e3       	ldi	r24, 0x3C	; 60
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 a3 01 	call	0x346	; 0x346 <linear_distance_mm>
			if((temp[levelcount-1]->angles[i1])>110)// here in place of 110 we should use 90 but to match the error we have chosen 110. it can vary.
    1e84:	80 91 00 02 	lds	r24, 0x0200
    1e88:	90 91 01 02 	lds	r25, 0x0201
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	fc 01       	movw	r30, r24
    1e94:	ef 5a       	subi	r30, 0xAF	; 175
    1e96:	fb 4f       	sbci	r31, 0xFB	; 251
    1e98:	20 81       	ld	r18, Z
    1e9a:	31 81       	ldd	r19, Z+1	; 0x01
    1e9c:	80 91 89 04 	lds	r24, 0x0489
    1ea0:	90 91 8a 04 	lds	r25, 0x048A
    1ea4:	05 96       	adiw	r24, 0x05	; 5
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	f9 01       	movw	r30, r18
    1eac:	e8 0f       	add	r30, r24
    1eae:	f9 1f       	adc	r31, r25
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	8f 36       	cpi	r24, 0x6F	; 111
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	0c f4       	brge	.+2      	; 0x1ebc <level2+0x45a>
    1eba:	a9 c0       	rjmp	.+338    	; 0x200e <level2+0x5ac>
			{
				if((temp[levelcount]->angles[lev2Count-1])>=(temp[levelcount-1]->angles[i1]))
    1ebc:	80 91 00 02 	lds	r24, 0x0200
    1ec0:	90 91 01 02 	lds	r25, 0x0201
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	fc 01       	movw	r30, r24
    1eca:	ef 5a       	subi	r30, 0xAF	; 175
    1ecc:	fb 4f       	sbci	r31, 0xFB	; 251
    1ece:	20 81       	ld	r18, Z
    1ed0:	31 81       	ldd	r19, Z+1	; 0x01
    1ed2:	80 91 91 04 	lds	r24, 0x0491
    1ed6:	90 91 92 04 	lds	r25, 0x0492
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	05 96       	adiw	r24, 0x05	; 5
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	f9 01       	movw	r30, r18
    1ee4:	e8 0f       	add	r30, r24
    1ee6:	f9 1f       	adc	r31, r25
    1ee8:	40 81       	ld	r20, Z
    1eea:	51 81       	ldd	r21, Z+1	; 0x01
    1eec:	80 91 00 02 	lds	r24, 0x0200
    1ef0:	90 91 01 02 	lds	r25, 0x0201
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	fc 01       	movw	r30, r24
    1efc:	ef 5a       	subi	r30, 0xAF	; 175
    1efe:	fb 4f       	sbci	r31, 0xFB	; 251
    1f00:	20 81       	ld	r18, Z
    1f02:	31 81       	ldd	r19, Z+1	; 0x01
    1f04:	80 91 89 04 	lds	r24, 0x0489
    1f08:	90 91 8a 04 	lds	r25, 0x048A
    1f0c:	05 96       	adiw	r24, 0x05	; 5
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	f9 01       	movw	r30, r18
    1f14:	e8 0f       	add	r30, r24
    1f16:	f9 1f       	adc	r31, r25
    1f18:	80 81       	ld	r24, Z
    1f1a:	91 81       	ldd	r25, Z+1	; 0x01
    1f1c:	48 17       	cp	r20, r24
    1f1e:	59 07       	cpc	r21, r25
    1f20:	dc f1       	brlt	.+118    	; 0x1f98 <level2+0x536>
					angle_rotate((360-((temp[levelcount]->angles[lev2Count-1])-(temp[levelcount-1]->angles[i1]))+5),2);
    1f22:	80 91 00 02 	lds	r24, 0x0200
    1f26:	90 91 01 02 	lds	r25, 0x0201
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	fc 01       	movw	r30, r24
    1f32:	ef 5a       	subi	r30, 0xAF	; 175
    1f34:	fb 4f       	sbci	r31, 0xFB	; 251
    1f36:	20 81       	ld	r18, Z
    1f38:	31 81       	ldd	r19, Z+1	; 0x01
    1f3a:	80 91 89 04 	lds	r24, 0x0489
    1f3e:	90 91 8a 04 	lds	r25, 0x048A
    1f42:	05 96       	adiw	r24, 0x05	; 5
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	f9 01       	movw	r30, r18
    1f4a:	e8 0f       	add	r30, r24
    1f4c:	f9 1f       	adc	r31, r25
    1f4e:	40 81       	ld	r20, Z
    1f50:	51 81       	ldd	r21, Z+1	; 0x01
    1f52:	80 91 00 02 	lds	r24, 0x0200
    1f56:	90 91 01 02 	lds	r25, 0x0201
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	fc 01       	movw	r30, r24
    1f60:	ef 5a       	subi	r30, 0xAF	; 175
    1f62:	fb 4f       	sbci	r31, 0xFB	; 251
    1f64:	20 81       	ld	r18, Z
    1f66:	31 81       	ldd	r19, Z+1	; 0x01
    1f68:	80 91 91 04 	lds	r24, 0x0491
    1f6c:	90 91 92 04 	lds	r25, 0x0492
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	05 96       	adiw	r24, 0x05	; 5
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	f9 01       	movw	r30, r18
    1f7a:	e8 0f       	add	r30, r24
    1f7c:	f9 1f       	adc	r31, r25
    1f7e:	80 81       	ld	r24, Z
    1f80:	91 81       	ldd	r25, Z+1	; 0x01
    1f82:	9a 01       	movw	r18, r20
    1f84:	28 1b       	sub	r18, r24
    1f86:	39 0b       	sbc	r19, r25
    1f88:	c9 01       	movw	r24, r18
    1f8a:	83 59       	subi	r24, 0x93	; 147
    1f8c:	9e 4f       	sbci	r25, 0xFE	; 254
    1f8e:	62 e0       	ldi	r22, 0x02	; 2
    1f90:	70 e0       	ldi	r23, 0x00	; 0
    1f92:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
    1f96:	e1 c0       	rjmp	.+450    	; 0x215a <level2+0x6f8>
				else
					angle_rotate((360-((temp[levelcount-1]->angles[i1])-(temp[levelcount]->angles[lev2Count-1]))+5),2);
    1f98:	80 91 00 02 	lds	r24, 0x0200
    1f9c:	90 91 01 02 	lds	r25, 0x0201
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	ef 5a       	subi	r30, 0xAF	; 175
    1fa8:	fb 4f       	sbci	r31, 0xFB	; 251
    1faa:	20 81       	ld	r18, Z
    1fac:	31 81       	ldd	r19, Z+1	; 0x01
    1fae:	80 91 91 04 	lds	r24, 0x0491
    1fb2:	90 91 92 04 	lds	r25, 0x0492
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	05 96       	adiw	r24, 0x05	; 5
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	f9 01       	movw	r30, r18
    1fc0:	e8 0f       	add	r30, r24
    1fc2:	f9 1f       	adc	r31, r25
    1fc4:	40 81       	ld	r20, Z
    1fc6:	51 81       	ldd	r21, Z+1	; 0x01
    1fc8:	80 91 00 02 	lds	r24, 0x0200
    1fcc:	90 91 01 02 	lds	r25, 0x0201
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	ef 5a       	subi	r30, 0xAF	; 175
    1fda:	fb 4f       	sbci	r31, 0xFB	; 251
    1fdc:	20 81       	ld	r18, Z
    1fde:	31 81       	ldd	r19, Z+1	; 0x01
    1fe0:	80 91 89 04 	lds	r24, 0x0489
    1fe4:	90 91 8a 04 	lds	r25, 0x048A
    1fe8:	05 96       	adiw	r24, 0x05	; 5
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	f9 01       	movw	r30, r18
    1ff0:	e8 0f       	add	r30, r24
    1ff2:	f9 1f       	adc	r31, r25
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	fa 01       	movw	r30, r20
    1ffa:	e8 1b       	sub	r30, r24
    1ffc:	f9 0b       	sbc	r31, r25
    1ffe:	cf 01       	movw	r24, r30
    2000:	83 59       	subi	r24, 0x93	; 147
    2002:	9e 4f       	sbci	r25, 0xFE	; 254
    2004:	62 e0       	ldi	r22, 0x02	; 2
    2006:	70 e0       	ldi	r23, 0x00	; 0
    2008:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
    200c:	a6 c0       	rjmp	.+332    	; 0x215a <level2+0x6f8>
			}
			else
			{
				if((temp[levelcount]->angles[lev2Count-1])>=(temp[levelcount-1]->angles[i1]))
    200e:	80 91 00 02 	lds	r24, 0x0200
    2012:	90 91 01 02 	lds	r25, 0x0201
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	fc 01       	movw	r30, r24
    201c:	ef 5a       	subi	r30, 0xAF	; 175
    201e:	fb 4f       	sbci	r31, 0xFB	; 251
    2020:	20 81       	ld	r18, Z
    2022:	31 81       	ldd	r19, Z+1	; 0x01
    2024:	80 91 91 04 	lds	r24, 0x0491
    2028:	90 91 92 04 	lds	r25, 0x0492
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	05 96       	adiw	r24, 0x05	; 5
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	f9 01       	movw	r30, r18
    2036:	e8 0f       	add	r30, r24
    2038:	f9 1f       	adc	r31, r25
    203a:	40 81       	ld	r20, Z
    203c:	51 81       	ldd	r21, Z+1	; 0x01
    203e:	80 91 00 02 	lds	r24, 0x0200
    2042:	90 91 01 02 	lds	r25, 0x0201
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	fc 01       	movw	r30, r24
    204e:	ef 5a       	subi	r30, 0xAF	; 175
    2050:	fb 4f       	sbci	r31, 0xFB	; 251
    2052:	20 81       	ld	r18, Z
    2054:	31 81       	ldd	r19, Z+1	; 0x01
    2056:	80 91 89 04 	lds	r24, 0x0489
    205a:	90 91 8a 04 	lds	r25, 0x048A
    205e:	05 96       	adiw	r24, 0x05	; 5
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	f9 01       	movw	r30, r18
    2066:	e8 0f       	add	r30, r24
    2068:	f9 1f       	adc	r31, r25
    206a:	80 81       	ld	r24, Z
    206c:	91 81       	ldd	r25, Z+1	; 0x01
    206e:	48 17       	cp	r20, r24
    2070:	59 07       	cpc	r21, r25
    2072:	d4 f1       	brlt	.+116    	; 0x20e8 <level2+0x686>
					angle_rotate(((temp[levelcount]->angles[lev2Count-1])-(temp[levelcount-1]->angles[i1])-15),2);
    2074:	80 91 00 02 	lds	r24, 0x0200
    2078:	90 91 01 02 	lds	r25, 0x0201
    207c:	88 0f       	add	r24, r24
    207e:	99 1f       	adc	r25, r25
    2080:	fc 01       	movw	r30, r24
    2082:	ef 5a       	subi	r30, 0xAF	; 175
    2084:	fb 4f       	sbci	r31, 0xFB	; 251
    2086:	20 81       	ld	r18, Z
    2088:	31 81       	ldd	r19, Z+1	; 0x01
    208a:	80 91 91 04 	lds	r24, 0x0491
    208e:	90 91 92 04 	lds	r25, 0x0492
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	05 96       	adiw	r24, 0x05	; 5
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	f9 01       	movw	r30, r18
    209c:	e8 0f       	add	r30, r24
    209e:	f9 1f       	adc	r31, r25
    20a0:	40 81       	ld	r20, Z
    20a2:	51 81       	ldd	r21, Z+1	; 0x01
    20a4:	80 91 00 02 	lds	r24, 0x0200
    20a8:	90 91 01 02 	lds	r25, 0x0201
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	fc 01       	movw	r30, r24
    20b4:	ef 5a       	subi	r30, 0xAF	; 175
    20b6:	fb 4f       	sbci	r31, 0xFB	; 251
    20b8:	20 81       	ld	r18, Z
    20ba:	31 81       	ldd	r19, Z+1	; 0x01
    20bc:	80 91 89 04 	lds	r24, 0x0489
    20c0:	90 91 8a 04 	lds	r25, 0x048A
    20c4:	05 96       	adiw	r24, 0x05	; 5
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	f9 01       	movw	r30, r18
    20cc:	e8 0f       	add	r30, r24
    20ce:	f9 1f       	adc	r31, r25
    20d0:	80 81       	ld	r24, Z
    20d2:	91 81       	ldd	r25, Z+1	; 0x01
    20d4:	9a 01       	movw	r18, r20
    20d6:	28 1b       	sub	r18, r24
    20d8:	39 0b       	sbc	r19, r25
    20da:	c9 01       	movw	r24, r18
    20dc:	0f 97       	sbiw	r24, 0x0f	; 15
    20de:	62 e0       	ldi	r22, 0x02	; 2
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
    20e6:	39 c0       	rjmp	.+114    	; 0x215a <level2+0x6f8>
				else
					angle_rotate(((temp[levelcount-1]->angles[i1])-(temp[levelcount]->angles[lev2Count-1])-15),2);
    20e8:	80 91 00 02 	lds	r24, 0x0200
    20ec:	90 91 01 02 	lds	r25, 0x0201
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	88 0f       	add	r24, r24
    20f4:	99 1f       	adc	r25, r25
    20f6:	fc 01       	movw	r30, r24
    20f8:	ef 5a       	subi	r30, 0xAF	; 175
    20fa:	fb 4f       	sbci	r31, 0xFB	; 251
    20fc:	20 81       	ld	r18, Z
    20fe:	31 81       	ldd	r19, Z+1	; 0x01
    2100:	80 91 89 04 	lds	r24, 0x0489
    2104:	90 91 8a 04 	lds	r25, 0x048A
    2108:	05 96       	adiw	r24, 0x05	; 5
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	f9 01       	movw	r30, r18
    2110:	e8 0f       	add	r30, r24
    2112:	f9 1f       	adc	r31, r25
    2114:	40 81       	ld	r20, Z
    2116:	51 81       	ldd	r21, Z+1	; 0x01
    2118:	80 91 00 02 	lds	r24, 0x0200
    211c:	90 91 01 02 	lds	r25, 0x0201
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	fc 01       	movw	r30, r24
    2126:	ef 5a       	subi	r30, 0xAF	; 175
    2128:	fb 4f       	sbci	r31, 0xFB	; 251
    212a:	20 81       	ld	r18, Z
    212c:	31 81       	ldd	r19, Z+1	; 0x01
    212e:	80 91 91 04 	lds	r24, 0x0491
    2132:	90 91 92 04 	lds	r25, 0x0492
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	05 96       	adiw	r24, 0x05	; 5
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	f9 01       	movw	r30, r18
    2140:	e8 0f       	add	r30, r24
    2142:	f9 1f       	adc	r31, r25
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	fa 01       	movw	r30, r20
    214a:	e8 1b       	sub	r30, r24
    214c:	f9 0b       	sbc	r31, r25
    214e:	cf 01       	movw	r24, r30
    2150:	0f 97       	sbiw	r24, 0x0f	; 15
    2152:	62 e0       	ldi	r22, 0x02	; 2
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
			}
			
	 		rotateSkipping(1);	
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0e 94 29 06 	call	0xc52	; 0xc52 <rotateSkipping>
			lcd_reset();
    2162:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
			lcd_cursor(1,1);
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	61 e0       	ldi	r22, 0x01	; 1
    216c:	70 e0       	ldi	r23, 0x00	; 0
    216e:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
			lcd_string("Going back 1");
    2172:	82 e8       	ldi	r24, 0x82	; 130
    2174:	92 e0       	ldi	r25, 0x02	; 2
    2176:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>

			followWhiteLineTillNode();
    217a:	0e 94 46 08 	call	0x108c	; 0x108c <followWhiteLineTillNode>
			distanceStack[distanceStackTop] = 0;		// Pop from Distance Stack 
    217e:	80 91 04 02 	lds	r24, 0x0204
    2182:	90 91 05 02 	lds	r25, 0x0205
    2186:	88 0f       	add	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	fc 01       	movw	r30, r24
    218c:	e5 57       	subi	r30, 0x75	; 117
    218e:	fb 4f       	sbci	r31, 0xFB	; 251
    2190:	11 82       	std	Z+1, r1	; 0x01
    2192:	10 82       	st	Z, r1
			distanceStackTop--;							// during backtracking
    2194:	80 91 04 02 	lds	r24, 0x0204
    2198:	90 91 05 02 	lds	r25, 0x0205
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	90 93 05 02 	sts	0x0205, r25
    21a2:	80 93 04 02 	sts	0x0204, r24

			free(temp[levelcount]);
    21a6:	80 91 00 02 	lds	r24, 0x0200
    21aa:	90 91 01 02 	lds	r25, 0x0201
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	fc 01       	movw	r30, r24
    21b4:	ef 5a       	subi	r30, 0xAF	; 175
    21b6:	fb 4f       	sbci	r31, 0xFB	; 251
    21b8:	80 81       	ld	r24, Z
    21ba:	91 81       	ldd	r25, Z+1	; 0x01
    21bc:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <free>
			lcd_reset();
    21c0:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
			lcd_cursor(1,1);
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	61 e0       	ldi	r22, 0x01	; 1
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
			lcd_string("node gone");
    21d0:	8f e8       	ldi	r24, 0x8F	; 143
    21d2:	92 e0       	ldi	r25, 0x02	; 2
    21d4:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	aa e7       	ldi	r26, 0x7A	; 122
    21de:	b4 e4       	ldi	r27, 0x44	; 68
    21e0:	8d ab       	std	Y+53, r24	; 0x35
    21e2:	9e ab       	std	Y+54, r25	; 0x36
    21e4:	af ab       	std	Y+55, r26	; 0x37
    21e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e8:	6d a9       	ldd	r22, Y+53	; 0x35
    21ea:	7e a9       	ldd	r23, Y+54	; 0x36
    21ec:	8f a9       	ldd	r24, Y+55	; 0x37
    21ee:	98 ad       	ldd	r25, Y+56	; 0x38
    21f0:	2d ec       	ldi	r18, 0xCD	; 205
    21f2:	3c ec       	ldi	r19, 0xCC	; 204
    21f4:	4c e2       	ldi	r20, 0x2C	; 44
    21f6:	55 e4       	ldi	r21, 0x45	; 69
    21f8:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	89 ab       	std	Y+49, r24	; 0x31
    2202:	9a ab       	std	Y+50, r25	; 0x32
    2204:	ab ab       	std	Y+51, r26	; 0x33
    2206:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2208:	69 a9       	ldd	r22, Y+49	; 0x31
    220a:	7a a9       	ldd	r23, Y+50	; 0x32
    220c:	8b a9       	ldd	r24, Y+51	; 0x33
    220e:	9c a9       	ldd	r25, Y+52	; 0x34
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e8       	ldi	r20, 0x80	; 128
    2216:	5f e3       	ldi	r21, 0x3F	; 63
    2218:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    221c:	88 23       	and	r24, r24
    221e:	2c f4       	brge	.+10     	; 0x222a <__stack+0x2b>
		__ticks = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	98 ab       	std	Y+48, r25	; 0x30
    2226:	8f a7       	std	Y+47, r24	; 0x2f
    2228:	3f c0       	rjmp	.+126    	; 0x22a8 <__stack+0xa9>
	else if (__tmp > 65535)
    222a:	69 a9       	ldd	r22, Y+49	; 0x31
    222c:	7a a9       	ldd	r23, Y+50	; 0x32
    222e:	8b a9       	ldd	r24, Y+51	; 0x33
    2230:	9c a9       	ldd	r25, Y+52	; 0x34
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	3f ef       	ldi	r19, 0xFF	; 255
    2236:	4f e7       	ldi	r20, 0x7F	; 127
    2238:	57 e4       	ldi	r21, 0x47	; 71
    223a:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    223e:	18 16       	cp	r1, r24
    2240:	4c f5       	brge	.+82     	; 0x2294 <__stack+0x95>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2242:	6d a9       	ldd	r22, Y+53	; 0x35
    2244:	7e a9       	ldd	r23, Y+54	; 0x36
    2246:	8f a9       	ldd	r24, Y+55	; 0x37
    2248:	98 ad       	ldd	r25, Y+56	; 0x38
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e2       	ldi	r20, 0x20	; 32
    2250:	51 e4       	ldi	r21, 0x41	; 65
    2252:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	98 ab       	std	Y+48, r25	; 0x30
    2268:	8f a7       	std	Y+47, r24	; 0x2f
    226a:	0f c0       	rjmp	.+30     	; 0x228a <__stack+0x8b>
    226c:	84 e1       	ldi	r24, 0x14	; 20
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	9e a7       	std	Y+46, r25	; 0x2e
    2272:	8d a7       	std	Y+45, r24	; 0x2d
    2274:	8d a5       	ldd	r24, Y+45	; 0x2d
    2276:	9e a5       	ldd	r25, Y+46	; 0x2e
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <__stack+0x79>
    227c:	9e a7       	std	Y+46, r25	; 0x2e
    227e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2280:	8f a5       	ldd	r24, Y+47	; 0x2f
    2282:	98 a9       	ldd	r25, Y+48	; 0x30
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	98 ab       	std	Y+48, r25	; 0x30
    2288:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228a:	8f a5       	ldd	r24, Y+47	; 0x2f
    228c:	98 a9       	ldd	r25, Y+48	; 0x30
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	69 f7       	brne	.-38     	; 0x226c <__stack+0x6d>
    2292:	14 c0       	rjmp	.+40     	; 0x22bc <__stack+0xbd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2294:	69 a9       	ldd	r22, Y+49	; 0x31
    2296:	7a a9       	ldd	r23, Y+50	; 0x32
    2298:	8b a9       	ldd	r24, Y+51	; 0x33
    229a:	9c a9       	ldd	r25, Y+52	; 0x34
    229c:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	98 ab       	std	Y+48, r25	; 0x30
    22a6:	8f a7       	std	Y+47, r24	; 0x2f
    22a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22aa:	98 a9       	ldd	r25, Y+48	; 0x30
    22ac:	9c a7       	std	Y+44, r25	; 0x2c
    22ae:	8b a7       	std	Y+43, r24	; 0x2b
    22b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <__stack+0xb5>
    22b8:	9c a7       	std	Y+44, r25	; 0x2c
    22ba:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			levelcount--;
    22bc:	80 91 00 02 	lds	r24, 0x0200
    22c0:	90 91 01 02 	lds	r25, 0x0201
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	90 93 01 02 	sts	0x0201, r25
    22ca:	80 93 00 02 	sts	0x0200, r24
			flag[levelcount]=1;
    22ce:	80 91 00 02 	lds	r24, 0x0200
    22d2:	90 91 01 02 	lds	r25, 0x0201
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	fc 01       	movw	r30, r24
    22dc:	e2 5f       	subi	r30, 0xF2	; 242
    22de:	fb 4f       	sbci	r31, 0xFB	; 251
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
    22e8:	0c c2       	rjmp	.+1048   	; 0x2702 <__stack+0x503>
		}
		else 
		{
			lcd_reset();
    22ea:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
			lcd_cursor(2,1);
    22ee:	82 e0       	ldi	r24, 0x02	; 2
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	61 e0       	ldi	r22, 0x01	; 1
    22f4:	70 e0       	ldi	r23, 0x00	; 0
    22f6:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
			itoa(temp[levelcount]->angles[i2], buff,10);
    22fa:	80 91 00 02 	lds	r24, 0x0200
    22fe:	90 91 01 02 	lds	r25, 0x0201
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	fc 01       	movw	r30, r24
    2308:	ef 5a       	subi	r30, 0xAF	; 175
    230a:	fb 4f       	sbci	r31, 0xFB	; 251
    230c:	20 81       	ld	r18, Z
    230e:	31 81       	ldd	r19, Z+1	; 0x01
    2310:	80 91 28 04 	lds	r24, 0x0428
    2314:	90 91 29 04 	lds	r25, 0x0429
    2318:	05 96       	adiw	r24, 0x05	; 5
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	f9 01       	movw	r30, r18
    2320:	e8 0f       	add	r30, r24
    2322:	f9 1f       	adc	r31, r25
    2324:	80 81       	ld	r24, Z
    2326:	91 81       	ldd	r25, Z+1	; 0x01
    2328:	2a e2       	ldi	r18, 0x2A	; 42
    232a:	34 e0       	ldi	r19, 0x04	; 4
    232c:	b9 01       	movw	r22, r18
    232e:	4a e0       	ldi	r20, 0x0A	; 10
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
			lcd_string(buff);
    2336:	8a e2       	ldi	r24, 0x2A	; 42
    2338:	94 e0       	ldi	r25, 0x04	; 4
    233a:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	aa e7       	ldi	r26, 0x7A	; 122
    2344:	b4 e4       	ldi	r27, 0x44	; 68
    2346:	8f a3       	std	Y+39, r24	; 0x27
    2348:	98 a7       	std	Y+40, r25	; 0x28
    234a:	a9 a7       	std	Y+41, r26	; 0x29
    234c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234e:	6f a1       	ldd	r22, Y+39	; 0x27
    2350:	78 a5       	ldd	r23, Y+40	; 0x28
    2352:	89 a5       	ldd	r24, Y+41	; 0x29
    2354:	9a a5       	ldd	r25, Y+42	; 0x2a
    2356:	2d ec       	ldi	r18, 0xCD	; 205
    2358:	3c ec       	ldi	r19, 0xCC	; 204
    235a:	4c e2       	ldi	r20, 0x2C	; 44
    235c:	55 e4       	ldi	r21, 0x45	; 69
    235e:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	8b a3       	std	Y+35, r24	; 0x23
    2368:	9c a3       	std	Y+36, r25	; 0x24
    236a:	ad a3       	std	Y+37, r26	; 0x25
    236c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    236e:	6b a1       	ldd	r22, Y+35	; 0x23
    2370:	7c a1       	ldd	r23, Y+36	; 0x24
    2372:	8d a1       	ldd	r24, Y+37	; 0x25
    2374:	9e a1       	ldd	r25, Y+38	; 0x26
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e8       	ldi	r20, 0x80	; 128
    237c:	5f e3       	ldi	r21, 0x3F	; 63
    237e:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    2382:	88 23       	and	r24, r24
    2384:	2c f4       	brge	.+10     	; 0x2390 <__stack+0x191>
		__ticks = 1;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9a a3       	std	Y+34, r25	; 0x22
    238c:	89 a3       	std	Y+33, r24	; 0x21
    238e:	3f c0       	rjmp	.+126    	; 0x240e <__stack+0x20f>
	else if (__tmp > 65535)
    2390:	6b a1       	ldd	r22, Y+35	; 0x23
    2392:	7c a1       	ldd	r23, Y+36	; 0x24
    2394:	8d a1       	ldd	r24, Y+37	; 0x25
    2396:	9e a1       	ldd	r25, Y+38	; 0x26
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	3f ef       	ldi	r19, 0xFF	; 255
    239c:	4f e7       	ldi	r20, 0x7F	; 127
    239e:	57 e4       	ldi	r21, 0x47	; 71
    23a0:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    23a4:	18 16       	cp	r1, r24
    23a6:	4c f5       	brge	.+82     	; 0x23fa <__stack+0x1fb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a8:	6f a1       	ldd	r22, Y+39	; 0x27
    23aa:	78 a5       	ldd	r23, Y+40	; 0x28
    23ac:	89 a5       	ldd	r24, Y+41	; 0x29
    23ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e2       	ldi	r20, 0x20	; 32
    23b6:	51 e4       	ldi	r21, 0x41	; 65
    23b8:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9a a3       	std	Y+34, r25	; 0x22
    23ce:	89 a3       	std	Y+33, r24	; 0x21
    23d0:	0f c0       	rjmp	.+30     	; 0x23f0 <__stack+0x1f1>
    23d2:	84 e1       	ldi	r24, 0x14	; 20
    23d4:	91 e0       	ldi	r25, 0x01	; 1
    23d6:	98 a3       	std	Y+32, r25	; 0x20
    23d8:	8f 8f       	std	Y+31, r24	; 0x1f
    23da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23dc:	98 a1       	ldd	r25, Y+32	; 0x20
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <__stack+0x1df>
    23e2:	98 a3       	std	Y+32, r25	; 0x20
    23e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e6:	89 a1       	ldd	r24, Y+33	; 0x21
    23e8:	9a a1       	ldd	r25, Y+34	; 0x22
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	9a a3       	std	Y+34, r25	; 0x22
    23ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f0:	89 a1       	ldd	r24, Y+33	; 0x21
    23f2:	9a a1       	ldd	r25, Y+34	; 0x22
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	69 f7       	brne	.-38     	; 0x23d2 <__stack+0x1d3>
    23f8:	14 c0       	rjmp	.+40     	; 0x2422 <__stack+0x223>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fa:	6b a1       	ldd	r22, Y+35	; 0x23
    23fc:	7c a1       	ldd	r23, Y+36	; 0x24
    23fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2400:	9e a1       	ldd	r25, Y+38	; 0x26
    2402:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	9a a3       	std	Y+34, r25	; 0x22
    240c:	89 a3       	std	Y+33, r24	; 0x21
    240e:	89 a1       	ldd	r24, Y+33	; 0x21
    2410:	9a a1       	ldd	r25, Y+34	; 0x22
    2412:	9e 8f       	std	Y+30, r25	; 0x1e
    2414:	8d 8f       	std	Y+29, r24	; 0x1d
    2416:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2418:	9e 8d       	ldd	r25, Y+30	; 0x1e
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <__stack+0x21b>
    241e:	9e 8f       	std	Y+30, r25	; 0x1e
    2420:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			temp[levelcount+1]=temp[levelcount]->children[i2];
    2422:	80 91 00 02 	lds	r24, 0x0200
    2426:	90 91 01 02 	lds	r25, 0x0201
    242a:	ac 01       	movw	r20, r24
    242c:	4f 5f       	subi	r20, 0xFF	; 255
    242e:	5f 4f       	sbci	r21, 0xFF	; 255
    2430:	80 91 00 02 	lds	r24, 0x0200
    2434:	90 91 01 02 	lds	r25, 0x0201
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	fc 01       	movw	r30, r24
    243e:	ef 5a       	subi	r30, 0xAF	; 175
    2440:	fb 4f       	sbci	r31, 0xFB	; 251
    2442:	20 81       	ld	r18, Z
    2444:	31 81       	ldd	r19, Z+1	; 0x01
    2446:	80 91 28 04 	lds	r24, 0x0428
    244a:	90 91 29 04 	lds	r25, 0x0429
    244e:	01 96       	adiw	r24, 0x01	; 1
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	f9 01       	movw	r30, r18
    2456:	e8 0f       	add	r30, r24
    2458:	f9 1f       	adc	r31, r25
    245a:	20 81       	ld	r18, Z
    245c:	31 81       	ldd	r19, Z+1	; 0x01
    245e:	ca 01       	movw	r24, r20
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	fc 01       	movw	r30, r24
    2466:	ef 5a       	subi	r30, 0xAF	; 175
    2468:	fb 4f       	sbci	r31, 0xFB	; 251
    246a:	31 83       	std	Z+1, r19	; 0x01
    246c:	20 83       	st	Z, r18
			linear_distance_mm(50);
    246e:	82 e3       	ldi	r24, 0x32	; 50
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	0e 94 a3 01 	call	0x346	; 0x346 <linear_distance_mm>
			angle_rotate(temp[levelcount]->angles[i2-1],2);
    2476:	80 91 00 02 	lds	r24, 0x0200
    247a:	90 91 01 02 	lds	r25, 0x0201
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	fc 01       	movw	r30, r24
    2484:	ef 5a       	subi	r30, 0xAF	; 175
    2486:	fb 4f       	sbci	r31, 0xFB	; 251
    2488:	20 81       	ld	r18, Z
    248a:	31 81       	ldd	r19, Z+1	; 0x01
    248c:	80 91 28 04 	lds	r24, 0x0428
    2490:	90 91 29 04 	lds	r25, 0x0429
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	05 96       	adiw	r24, 0x05	; 5
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	f9 01       	movw	r30, r18
    249e:	e8 0f       	add	r30, r24
    24a0:	f9 1f       	adc	r31, r25
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	62 e0       	ldi	r22, 0x02	; 2
    24a8:	70 e0       	ldi	r23, 0x00	; 0
    24aa:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	aa e7       	ldi	r26, 0x7A	; 122
    24b4:	b4 e4       	ldi	r27, 0x44	; 68
    24b6:	89 8f       	std	Y+25, r24	; 0x19
    24b8:	9a 8f       	std	Y+26, r25	; 0x1a
    24ba:	ab 8f       	std	Y+27, r26	; 0x1b
    24bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24be:	69 8d       	ldd	r22, Y+25	; 0x19
    24c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24c6:	2d ec       	ldi	r18, 0xCD	; 205
    24c8:	3c ec       	ldi	r19, 0xCC	; 204
    24ca:	4c e2       	ldi	r20, 0x2C	; 44
    24cc:	55 e4       	ldi	r21, 0x45	; 69
    24ce:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	8d 8b       	std	Y+21, r24	; 0x15
    24d8:	9e 8b       	std	Y+22, r25	; 0x16
    24da:	af 8b       	std	Y+23, r26	; 0x17
    24dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24de:	6d 89       	ldd	r22, Y+21	; 0x15
    24e0:	7e 89       	ldd	r23, Y+22	; 0x16
    24e2:	8f 89       	ldd	r24, Y+23	; 0x17
    24e4:	98 8d       	ldd	r25, Y+24	; 0x18
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e8       	ldi	r20, 0x80	; 128
    24ec:	5f e3       	ldi	r21, 0x3F	; 63
    24ee:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    24f2:	88 23       	and	r24, r24
    24f4:	2c f4       	brge	.+10     	; 0x2500 <__stack+0x301>
		__ticks = 1;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	9c 8b       	std	Y+20, r25	; 0x14
    24fc:	8b 8b       	std	Y+19, r24	; 0x13
    24fe:	3f c0       	rjmp	.+126    	; 0x257e <__stack+0x37f>
	else if (__tmp > 65535)
    2500:	6d 89       	ldd	r22, Y+21	; 0x15
    2502:	7e 89       	ldd	r23, Y+22	; 0x16
    2504:	8f 89       	ldd	r24, Y+23	; 0x17
    2506:	98 8d       	ldd	r25, Y+24	; 0x18
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	3f ef       	ldi	r19, 0xFF	; 255
    250c:	4f e7       	ldi	r20, 0x7F	; 127
    250e:	57 e4       	ldi	r21, 0x47	; 71
    2510:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    2514:	18 16       	cp	r1, r24
    2516:	4c f5       	brge	.+82     	; 0x256a <__stack+0x36b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2518:	69 8d       	ldd	r22, Y+25	; 0x19
    251a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    251c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    251e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e2       	ldi	r20, 0x20	; 32
    2526:	51 e4       	ldi	r21, 0x41	; 65
    2528:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	9c 8b       	std	Y+20, r25	; 0x14
    253e:	8b 8b       	std	Y+19, r24	; 0x13
    2540:	0f c0       	rjmp	.+30     	; 0x2560 <__stack+0x361>
    2542:	84 e1       	ldi	r24, 0x14	; 20
    2544:	91 e0       	ldi	r25, 0x01	; 1
    2546:	9a 8b       	std	Y+18, r25	; 0x12
    2548:	89 8b       	std	Y+17, r24	; 0x11
    254a:	89 89       	ldd	r24, Y+17	; 0x11
    254c:	9a 89       	ldd	r25, Y+18	; 0x12
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <__stack+0x34f>
    2552:	9a 8b       	std	Y+18, r25	; 0x12
    2554:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2556:	8b 89       	ldd	r24, Y+19	; 0x13
    2558:	9c 89       	ldd	r25, Y+20	; 0x14
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	9c 8b       	std	Y+20, r25	; 0x14
    255e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2560:	8b 89       	ldd	r24, Y+19	; 0x13
    2562:	9c 89       	ldd	r25, Y+20	; 0x14
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	69 f7       	brne	.-38     	; 0x2542 <__stack+0x343>
    2568:	14 c0       	rjmp	.+40     	; 0x2592 <__stack+0x393>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256a:	6d 89       	ldd	r22, Y+21	; 0x15
    256c:	7e 89       	ldd	r23, Y+22	; 0x16
    256e:	8f 89       	ldd	r24, Y+23	; 0x17
    2570:	98 8d       	ldd	r25, Y+24	; 0x18
    2572:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	9c 8b       	std	Y+20, r25	; 0x14
    257c:	8b 8b       	std	Y+19, r24	; 0x13
    257e:	8b 89       	ldd	r24, Y+19	; 0x13
    2580:	9c 89       	ldd	r25, Y+20	; 0x14
    2582:	98 8b       	std	Y+16, r25	; 0x10
    2584:	8f 87       	std	Y+15, r24	; 0x0f
    2586:	8f 85       	ldd	r24, Y+15	; 0x0f
    2588:	98 89       	ldd	r25, Y+16	; 0x10
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <__stack+0x38b>
    258e:	98 8b       	std	Y+16, r25	; 0x10
    2590:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			rotateSkipping(lev2Count-i2);
    2592:	20 91 91 04 	lds	r18, 0x0491
    2596:	30 91 92 04 	lds	r19, 0x0492
    259a:	80 91 28 04 	lds	r24, 0x0428
    259e:	90 91 29 04 	lds	r25, 0x0429
    25a2:	a9 01       	movw	r20, r18
    25a4:	48 1b       	sub	r20, r24
    25a6:	59 0b       	sbc	r21, r25
    25a8:	ca 01       	movw	r24, r20
    25aa:	0e 94 29 06 	call	0xc52	; 0xc52 <rotateSkipping>
			lcd_reset();
    25ae:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
			lcd_cursor(1,1);
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	61 e0       	ldi	r22, 0x01	; 1
    25b8:	70 e0       	ldi	r23, 0x00	; 0
    25ba:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
			lcd_string("next child 2");
    25be:	89 e9       	ldi	r24, 0x99	; 153
    25c0:	92 e0       	ldi	r25, 0x02	; 2
    25c2:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>

			distanceStackTop++;												// Add the Path distance to stack
    25c6:	80 91 04 02 	lds	r24, 0x0204
    25ca:	90 91 05 02 	lds	r25, 0x0205
    25ce:	01 96       	adiw	r24, 0x01	; 1
    25d0:	90 93 05 02 	sts	0x0205, r25
    25d4:	80 93 04 02 	sts	0x0204, r24
			distanceStack[distanceStackTop] = followWhiteLineTillNode();
    25d8:	00 91 04 02 	lds	r16, 0x0204
    25dc:	10 91 05 02 	lds	r17, 0x0205
    25e0:	0e 94 46 08 	call	0x108c	; 0x108c <followWhiteLineTillNode>
    25e4:	9c 01       	movw	r18, r24
    25e6:	c8 01       	movw	r24, r16
    25e8:	88 0f       	add	r24, r24
    25ea:	99 1f       	adc	r25, r25
    25ec:	fc 01       	movw	r30, r24
    25ee:	e5 57       	subi	r30, 0x75	; 117
    25f0:	fb 4f       	sbci	r31, 0xFB	; 251
    25f2:	31 83       	std	Z+1, r19	; 0x01
    25f4:	20 83       	st	Z, r18
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	aa e7       	ldi	r26, 0x7A	; 122
    25fc:	b4 e4       	ldi	r27, 0x44	; 68
    25fe:	8b 87       	std	Y+11, r24	; 0x0b
    2600:	9c 87       	std	Y+12, r25	; 0x0c
    2602:	ad 87       	std	Y+13, r26	; 0x0d
    2604:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2606:	6b 85       	ldd	r22, Y+11	; 0x0b
    2608:	7c 85       	ldd	r23, Y+12	; 0x0c
    260a:	8d 85       	ldd	r24, Y+13	; 0x0d
    260c:	9e 85       	ldd	r25, Y+14	; 0x0e
    260e:	2d ec       	ldi	r18, 0xCD	; 205
    2610:	3c ec       	ldi	r19, 0xCC	; 204
    2612:	4c e2       	ldi	r20, 0x2C	; 44
    2614:	55 e4       	ldi	r21, 0x45	; 69
    2616:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	8f 83       	std	Y+7, r24	; 0x07
    2620:	98 87       	std	Y+8, r25	; 0x08
    2622:	a9 87       	std	Y+9, r26	; 0x09
    2624:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2626:	6f 81       	ldd	r22, Y+7	; 0x07
    2628:	78 85       	ldd	r23, Y+8	; 0x08
    262a:	89 85       	ldd	r24, Y+9	; 0x09
    262c:	9a 85       	ldd	r25, Y+10	; 0x0a
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e8       	ldi	r20, 0x80	; 128
    2634:	5f e3       	ldi	r21, 0x3F	; 63
    2636:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    263a:	88 23       	and	r24, r24
    263c:	2c f4       	brge	.+10     	; 0x2648 <__stack+0x449>
		__ticks = 1;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	9e 83       	std	Y+6, r25	; 0x06
    2644:	8d 83       	std	Y+5, r24	; 0x05
    2646:	3f c0       	rjmp	.+126    	; 0x26c6 <__stack+0x4c7>
	else if (__tmp > 65535)
    2648:	6f 81       	ldd	r22, Y+7	; 0x07
    264a:	78 85       	ldd	r23, Y+8	; 0x08
    264c:	89 85       	ldd	r24, Y+9	; 0x09
    264e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	3f ef       	ldi	r19, 0xFF	; 255
    2654:	4f e7       	ldi	r20, 0x7F	; 127
    2656:	57 e4       	ldi	r21, 0x47	; 71
    2658:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    265c:	18 16       	cp	r1, r24
    265e:	4c f5       	brge	.+82     	; 0x26b2 <__stack+0x4b3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2660:	6b 85       	ldd	r22, Y+11	; 0x0b
    2662:	7c 85       	ldd	r23, Y+12	; 0x0c
    2664:	8d 85       	ldd	r24, Y+13	; 0x0d
    2666:	9e 85       	ldd	r25, Y+14	; 0x0e
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e2       	ldi	r20, 0x20	; 32
    266e:	51 e4       	ldi	r21, 0x41	; 65
    2670:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	bc 01       	movw	r22, r24
    267a:	cd 01       	movw	r24, r26
    267c:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	9e 83       	std	Y+6, r25	; 0x06
    2686:	8d 83       	std	Y+5, r24	; 0x05
    2688:	0f c0       	rjmp	.+30     	; 0x26a8 <__stack+0x4a9>
    268a:	84 e1       	ldi	r24, 0x14	; 20
    268c:	91 e0       	ldi	r25, 0x01	; 1
    268e:	9c 83       	std	Y+4, r25	; 0x04
    2690:	8b 83       	std	Y+3, r24	; 0x03
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	9c 81       	ldd	r25, Y+4	; 0x04
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <__stack+0x497>
    269a:	9c 83       	std	Y+4, r25	; 0x04
    269c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269e:	8d 81       	ldd	r24, Y+5	; 0x05
    26a0:	9e 81       	ldd	r25, Y+6	; 0x06
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	9e 83       	std	Y+6, r25	; 0x06
    26a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a8:	8d 81       	ldd	r24, Y+5	; 0x05
    26aa:	9e 81       	ldd	r25, Y+6	; 0x06
    26ac:	00 97       	sbiw	r24, 0x00	; 0
    26ae:	69 f7       	brne	.-38     	; 0x268a <__stack+0x48b>
    26b0:	14 c0       	rjmp	.+40     	; 0x26da <__stack+0x4db>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b2:	6f 81       	ldd	r22, Y+7	; 0x07
    26b4:	78 85       	ldd	r23, Y+8	; 0x08
    26b6:	89 85       	ldd	r24, Y+9	; 0x09
    26b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ba:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	9e 83       	std	Y+6, r25	; 0x06
    26c4:	8d 83       	std	Y+5, r24	; 0x05
    26c6:	8d 81       	ldd	r24, Y+5	; 0x05
    26c8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ca:	9a 83       	std	Y+2, r25	; 0x02
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	9a 81       	ldd	r25, Y+2	; 0x02
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <__stack+0x4d3>
    26d6:	9a 83       	std	Y+2, r25	; 0x02
    26d8:	89 83       	std	Y+1, r24	; 0x01


			_delay_ms(1000);
			levelcount++;
    26da:	80 91 00 02 	lds	r24, 0x0200
    26de:	90 91 01 02 	lds	r25, 0x0201
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	90 93 01 02 	sts	0x0201, r25
    26e8:	80 93 00 02 	sts	0x0200, r24
			flag[levelcount]=0;
    26ec:	80 91 00 02 	lds	r24, 0x0200
    26f0:	90 91 01 02 	lds	r25, 0x0201
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	fc 01       	movw	r30, r24
    26fa:	e2 5f       	subi	r30, 0xF2	; 242
    26fc:	fb 4f       	sbci	r31, 0xFB	; 251
    26fe:	11 82       	std	Z+1, r1	; 0x01
    2700:	10 82       	st	Z, r1
		}
	}
}
    2702:	ca 5b       	subi	r28, 0xBA	; 186
    2704:	df 4f       	sbci	r29, 0xFF	; 255
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	08 95       	ret

0000271a <level3>:
* Code for Third Level. This code is applicable for any intermediate level, 
* in this case , the third level.
*/

void level3()
{
    271a:	0f 93       	push	r16
    271c:	1f 93       	push	r17
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	6c 97       	sbiw	r28, 0x1c	; 28
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
	
	if(flag[levelcount]==0)
    2732:	80 91 00 02 	lds	r24, 0x0200
    2736:	90 91 01 02 	lds	r25, 0x0201
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	fc 01       	movw	r30, r24
    2740:	e2 5f       	subi	r30, 0xF2	; 242
    2742:	fb 4f       	sbci	r31, 0xFB	; 251
    2744:	80 81       	ld	r24, Z
    2746:	91 81       	ldd	r25, Z+1	; 0x01
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	09 f0       	breq	.+2      	; 0x274e <level3+0x34>
    274c:	35 c1       	rjmp	.+618    	; 0x29b8 <level3+0x29e>
	{
		
		//adjusting itself for counting
		linear_distance_mm(60);
    274e:	8c e3       	ldi	r24, 0x3C	; 60
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 a3 01 	call	0x346	; 0x346 <linear_distance_mm>
		angle_rotate(temp[levelcount-1]->angles[i2]-error,2);
    2756:	80 91 00 02 	lds	r24, 0x0200
    275a:	90 91 01 02 	lds	r25, 0x0201
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	88 0f       	add	r24, r24
    2762:	99 1f       	adc	r25, r25
    2764:	fc 01       	movw	r30, r24
    2766:	ef 5a       	subi	r30, 0xAF	; 175
    2768:	fb 4f       	sbci	r31, 0xFB	; 251
    276a:	20 81       	ld	r18, Z
    276c:	31 81       	ldd	r19, Z+1	; 0x01
    276e:	80 91 28 04 	lds	r24, 0x0428
    2772:	90 91 29 04 	lds	r25, 0x0429
    2776:	05 96       	adiw	r24, 0x05	; 5
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	f9 01       	movw	r30, r18
    277e:	e8 0f       	add	r30, r24
    2780:	f9 1f       	adc	r31, r25
    2782:	20 81       	ld	r18, Z
    2784:	31 81       	ldd	r19, Z+1	; 0x01
    2786:	80 91 02 02 	lds	r24, 0x0202
    278a:	90 91 03 02 	lds	r25, 0x0203
    278e:	a9 01       	movw	r20, r18
    2790:	48 1b       	sub	r20, r24
    2792:	59 0b       	sbc	r21, r25
    2794:	ca 01       	movw	r24, r20
    2796:	62 e0       	ldi	r22, 0x02	; 2
    2798:	70 e0       	ldi	r23, 0x00	; 0
    279a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
		//At Level 3
		lev3Count = edgeDetect(temp[levelcount]);
    279e:	80 91 00 02 	lds	r24, 0x0200
    27a2:	90 91 01 02 	lds	r25, 0x0201
    27a6:	88 0f       	add	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	fc 01       	movw	r30, r24
    27ac:	ef 5a       	subi	r30, 0xAF	; 175
    27ae:	fb 4f       	sbci	r31, 0xFB	; 251
    27b0:	80 81       	ld	r24, Z
    27b2:	91 81       	ldd	r25, Z+1	; 0x01
    27b4:	0e 94 6f 06 	call	0xcde	; 0xcde <edgeDetect>
    27b8:	90 93 84 04 	sts	0x0484, r25
    27bc:	80 93 83 04 	sts	0x0483, r24
		lcd_reset();
    27c0:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
		lcd_cursor(1,1);
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	70 e0       	ldi	r23, 0x00	; 0
    27cc:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
		lcd_string("Count: ");
    27d0:	8f e5       	ldi	r24, 0x5F	; 95
    27d2:	92 e0       	ldi	r25, 0x02	; 2
    27d4:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
		lcd_cursor(2,1);
    27d8:	82 e0       	ldi	r24, 0x02	; 2
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	61 e0       	ldi	r22, 0x01	; 1
    27de:	70 e0       	ldi	r23, 0x00	; 0
    27e0:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
		itoa(lev3Count, buff,10);
    27e4:	80 91 83 04 	lds	r24, 0x0483
    27e8:	90 91 84 04 	lds	r25, 0x0484
    27ec:	2a e2       	ldi	r18, 0x2A	; 42
    27ee:	34 e0       	ldi	r19, 0x04	; 4
    27f0:	b9 01       	movw	r22, r18
    27f2:	4a e0       	ldi	r20, 0x0A	; 10
    27f4:	50 e0       	ldi	r21, 0x00	; 0
    27f6:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
		lcd_string(buff);
    27fa:	8a e2       	ldi	r24, 0x2A	; 42
    27fc:	94 e0       	ldi	r25, 0x04	; 4
    27fe:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
		i3=0;
    2802:	10 92 27 04 	sts	0x0427, r1
    2806:	10 92 26 04 	sts	0x0426, r1
		temp[levelcount+1]=temp[levelcount]->children[i3];
    280a:	80 91 00 02 	lds	r24, 0x0200
    280e:	90 91 01 02 	lds	r25, 0x0201
    2812:	ac 01       	movw	r20, r24
    2814:	4f 5f       	subi	r20, 0xFF	; 255
    2816:	5f 4f       	sbci	r21, 0xFF	; 255
    2818:	80 91 00 02 	lds	r24, 0x0200
    281c:	90 91 01 02 	lds	r25, 0x0201
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	fc 01       	movw	r30, r24
    2826:	ef 5a       	subi	r30, 0xAF	; 175
    2828:	fb 4f       	sbci	r31, 0xFB	; 251
    282a:	20 81       	ld	r18, Z
    282c:	31 81       	ldd	r19, Z+1	; 0x01
    282e:	80 91 26 04 	lds	r24, 0x0426
    2832:	90 91 27 04 	lds	r25, 0x0427
    2836:	01 96       	adiw	r24, 0x01	; 1
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	f9 01       	movw	r30, r18
    283e:	e8 0f       	add	r30, r24
    2840:	f9 1f       	adc	r31, r25
    2842:	20 81       	ld	r18, Z
    2844:	31 81       	ldd	r19, Z+1	; 0x01
    2846:	ca 01       	movw	r24, r20
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	fc 01       	movw	r30, r24
    284e:	ef 5a       	subi	r30, 0xAF	; 175
    2850:	fb 4f       	sbci	r31, 0xFB	; 251
    2852:	31 83       	std	Z+1, r19	; 0x01
    2854:	20 83       	st	Z, r18
		rotateSkipping(lev3Count);
    2856:	80 91 83 04 	lds	r24, 0x0483
    285a:	90 91 84 04 	lds	r25, 0x0484
    285e:	0e 94 29 06 	call	0xc52	; 0xc52 <rotateSkipping>
		lcd_reset();
    2862:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
		lcd_cursor(1,1);
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	61 e0       	ldi	r22, 0x01	; 1
    286c:	70 e0       	ldi	r23, 0x00	; 0
    286e:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
		lcd_string("new chid 3");
    2872:	86 ea       	ldi	r24, 0xA6	; 166
    2874:	92 e0       	ldi	r25, 0x02	; 2
    2876:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>


		distanceStackTop++;									// Add the Path distance to stack
    287a:	80 91 04 02 	lds	r24, 0x0204
    287e:	90 91 05 02 	lds	r25, 0x0205
    2882:	01 96       	adiw	r24, 0x01	; 1
    2884:	90 93 05 02 	sts	0x0205, r25
    2888:	80 93 04 02 	sts	0x0204, r24
		distanceStack[distanceStackTop] = followWhiteLineTillNode();
    288c:	00 91 04 02 	lds	r16, 0x0204
    2890:	10 91 05 02 	lds	r17, 0x0205
    2894:	0e 94 46 08 	call	0x108c	; 0x108c <followWhiteLineTillNode>
    2898:	9c 01       	movw	r18, r24
    289a:	c8 01       	movw	r24, r16
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	fc 01       	movw	r30, r24
    28a2:	e5 57       	subi	r30, 0x75	; 117
    28a4:	fb 4f       	sbci	r31, 0xFB	; 251
    28a6:	31 83       	std	Z+1, r19	; 0x01
    28a8:	20 83       	st	Z, r18
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	aa e7       	ldi	r26, 0x7A	; 122
    28b0:	b4 e4       	ldi	r27, 0x44	; 68
    28b2:	89 8f       	std	Y+25, r24	; 0x19
    28b4:	9a 8f       	std	Y+26, r25	; 0x1a
    28b6:	ab 8f       	std	Y+27, r26	; 0x1b
    28b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ba:	69 8d       	ldd	r22, Y+25	; 0x19
    28bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c2:	2d ec       	ldi	r18, 0xCD	; 205
    28c4:	3c ec       	ldi	r19, 0xCC	; 204
    28c6:	4c e2       	ldi	r20, 0x2C	; 44
    28c8:	55 e4       	ldi	r21, 0x45	; 69
    28ca:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	8d 8b       	std	Y+21, r24	; 0x15
    28d4:	9e 8b       	std	Y+22, r25	; 0x16
    28d6:	af 8b       	std	Y+23, r26	; 0x17
    28d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28da:	6d 89       	ldd	r22, Y+21	; 0x15
    28dc:	7e 89       	ldd	r23, Y+22	; 0x16
    28de:	8f 89       	ldd	r24, Y+23	; 0x17
    28e0:	98 8d       	ldd	r25, Y+24	; 0x18
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e8       	ldi	r20, 0x80	; 128
    28e8:	5f e3       	ldi	r21, 0x3F	; 63
    28ea:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    28ee:	88 23       	and	r24, r24
    28f0:	2c f4       	brge	.+10     	; 0x28fc <level3+0x1e2>
		__ticks = 1;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	9c 8b       	std	Y+20, r25	; 0x14
    28f8:	8b 8b       	std	Y+19, r24	; 0x13
    28fa:	3f c0       	rjmp	.+126    	; 0x297a <level3+0x260>
	else if (__tmp > 65535)
    28fc:	6d 89       	ldd	r22, Y+21	; 0x15
    28fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2900:	8f 89       	ldd	r24, Y+23	; 0x17
    2902:	98 8d       	ldd	r25, Y+24	; 0x18
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	3f ef       	ldi	r19, 0xFF	; 255
    2908:	4f e7       	ldi	r20, 0x7F	; 127
    290a:	57 e4       	ldi	r21, 0x47	; 71
    290c:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    2910:	18 16       	cp	r1, r24
    2912:	4c f5       	brge	.+82     	; 0x2966 <level3+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2914:	69 8d       	ldd	r22, Y+25	; 0x19
    2916:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2918:	8b 8d       	ldd	r24, Y+27	; 0x1b
    291a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e2       	ldi	r20, 0x20	; 32
    2922:	51 e4       	ldi	r21, 0x41	; 65
    2924:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9c 8b       	std	Y+20, r25	; 0x14
    293a:	8b 8b       	std	Y+19, r24	; 0x13
    293c:	0f c0       	rjmp	.+30     	; 0x295c <level3+0x242>
    293e:	84 e1       	ldi	r24, 0x14	; 20
    2940:	91 e0       	ldi	r25, 0x01	; 1
    2942:	9a 8b       	std	Y+18, r25	; 0x12
    2944:	89 8b       	std	Y+17, r24	; 0x11
    2946:	89 89       	ldd	r24, Y+17	; 0x11
    2948:	9a 89       	ldd	r25, Y+18	; 0x12
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <level3+0x230>
    294e:	9a 8b       	std	Y+18, r25	; 0x12
    2950:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2952:	8b 89       	ldd	r24, Y+19	; 0x13
    2954:	9c 89       	ldd	r25, Y+20	; 0x14
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	9c 8b       	std	Y+20, r25	; 0x14
    295a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295c:	8b 89       	ldd	r24, Y+19	; 0x13
    295e:	9c 89       	ldd	r25, Y+20	; 0x14
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	69 f7       	brne	.-38     	; 0x293e <level3+0x224>
    2964:	14 c0       	rjmp	.+40     	; 0x298e <level3+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2966:	6d 89       	ldd	r22, Y+21	; 0x15
    2968:	7e 89       	ldd	r23, Y+22	; 0x16
    296a:	8f 89       	ldd	r24, Y+23	; 0x17
    296c:	98 8d       	ldd	r25, Y+24	; 0x18
    296e:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9c 8b       	std	Y+20, r25	; 0x14
    2978:	8b 8b       	std	Y+19, r24	; 0x13
    297a:	8b 89       	ldd	r24, Y+19	; 0x13
    297c:	9c 89       	ldd	r25, Y+20	; 0x14
    297e:	98 8b       	std	Y+16, r25	; 0x10
    2980:	8f 87       	std	Y+15, r24	; 0x0f
    2982:	8f 85       	ldd	r24, Y+15	; 0x0f
    2984:	98 89       	ldd	r25, Y+16	; 0x10
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <level3+0x26c>
    298a:	98 8b       	std	Y+16, r25	; 0x10
    298c:	8f 87       	std	Y+15, r24	; 0x0f


		_delay_ms(1000);
		levelcount++;
    298e:	80 91 00 02 	lds	r24, 0x0200
    2992:	90 91 01 02 	lds	r25, 0x0201
    2996:	01 96       	adiw	r24, 0x01	; 1
    2998:	90 93 01 02 	sts	0x0201, r25
    299c:	80 93 00 02 	sts	0x0200, r24
		flag[levelcount]=0;
    29a0:	80 91 00 02 	lds	r24, 0x0200
    29a4:	90 91 01 02 	lds	r25, 0x0201
    29a8:	88 0f       	add	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	fc 01       	movw	r30, r24
    29ae:	e2 5f       	subi	r30, 0xF2	; 242
    29b0:	fb 4f       	sbci	r31, 0xFB	; 251
    29b2:	11 82       	std	Z+1, r1	; 0x01
    29b4:	10 82       	st	Z, r1
    29b6:	58 c3       	rjmp	.+1712   	; 0x3068 <level3+0x94e>
		
	}
	else
	{
		temp[levelcount]->visited[i3]=1;
    29b8:	80 91 00 02 	lds	r24, 0x0200
    29bc:	90 91 01 02 	lds	r25, 0x0201
    29c0:	88 0f       	add	r24, r24
    29c2:	99 1f       	adc	r25, r25
    29c4:	fc 01       	movw	r30, r24
    29c6:	ef 5a       	subi	r30, 0xAF	; 175
    29c8:	fb 4f       	sbci	r31, 0xFB	; 251
    29ca:	20 81       	ld	r18, Z
    29cc:	31 81       	ldd	r19, Z+1	; 0x01
    29ce:	80 91 26 04 	lds	r24, 0x0426
    29d2:	90 91 27 04 	lds	r25, 0x0427
    29d6:	0a 96       	adiw	r24, 0x0a	; 10
    29d8:	88 0f       	add	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	f9 01       	movw	r30, r18
    29de:	e8 0f       	add	r30, r24
    29e0:	f9 1f       	adc	r31, r25
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	80 83       	st	Z, r24
		i3=0;
    29ea:	10 92 27 04 	sts	0x0427, r1
    29ee:	10 92 26 04 	sts	0x0426, r1
    29f2:	09 c0       	rjmp	.+18     	; 0x2a06 <level3+0x2ec>
		while(temp[levelcount]->visited[i3]==1)
			i3++;
    29f4:	80 91 26 04 	lds	r24, 0x0426
    29f8:	90 91 27 04 	lds	r25, 0x0427
    29fc:	01 96       	adiw	r24, 0x01	; 1
    29fe:	90 93 27 04 	sts	0x0427, r25
    2a02:	80 93 26 04 	sts	0x0426, r24
	}
	else
	{
		temp[levelcount]->visited[i3]=1;
		i3=0;
		while(temp[levelcount]->visited[i3]==1)
    2a06:	80 91 00 02 	lds	r24, 0x0200
    2a0a:	90 91 01 02 	lds	r25, 0x0201
    2a0e:	88 0f       	add	r24, r24
    2a10:	99 1f       	adc	r25, r25
    2a12:	fc 01       	movw	r30, r24
    2a14:	ef 5a       	subi	r30, 0xAF	; 175
    2a16:	fb 4f       	sbci	r31, 0xFB	; 251
    2a18:	20 81       	ld	r18, Z
    2a1a:	31 81       	ldd	r19, Z+1	; 0x01
    2a1c:	80 91 26 04 	lds	r24, 0x0426
    2a20:	90 91 27 04 	lds	r25, 0x0427
    2a24:	0a 96       	adiw	r24, 0x0a	; 10
    2a26:	88 0f       	add	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	f9 01       	movw	r30, r18
    2a2c:	e8 0f       	add	r30, r24
    2a2e:	f9 1f       	adc	r31, r25
    2a30:	80 81       	ld	r24, Z
    2a32:	91 81       	ldd	r25, Z+1	; 0x01
    2a34:	81 30       	cpi	r24, 0x01	; 1
    2a36:	91 05       	cpc	r25, r1
    2a38:	e9 f2       	breq	.-70     	; 0x29f4 <level3+0x2da>
			i3++;
		if (i3>=lev3Count)
    2a3a:	20 91 26 04 	lds	r18, 0x0426
    2a3e:	30 91 27 04 	lds	r19, 0x0427
    2a42:	80 91 83 04 	lds	r24, 0x0483
    2a46:	90 91 84 04 	lds	r25, 0x0484
    2a4a:	28 17       	cp	r18, r24
    2a4c:	39 07       	cpc	r19, r25
    2a4e:	0c f4       	brge	.+2      	; 0x2a52 <level3+0x338>
    2a50:	0d c2       	rjmp	.+1050   	; 0x2e6c <level3+0x752>
		{
			lcd_reset();
    2a52:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
			lcd_cursor(1,1);
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	61 e0       	ldi	r22, 0x01	; 1
    2a5c:	70 e0       	ldi	r23, 0x00	; 0
    2a5e:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
			itoa(temp[levelcount]->angles[lev3Count-1], buff,10);
    2a62:	80 91 00 02 	lds	r24, 0x0200
    2a66:	90 91 01 02 	lds	r25, 0x0201
    2a6a:	88 0f       	add	r24, r24
    2a6c:	99 1f       	adc	r25, r25
    2a6e:	fc 01       	movw	r30, r24
    2a70:	ef 5a       	subi	r30, 0xAF	; 175
    2a72:	fb 4f       	sbci	r31, 0xFB	; 251
    2a74:	20 81       	ld	r18, Z
    2a76:	31 81       	ldd	r19, Z+1	; 0x01
    2a78:	80 91 83 04 	lds	r24, 0x0483
    2a7c:	90 91 84 04 	lds	r25, 0x0484
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	05 96       	adiw	r24, 0x05	; 5
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	f9 01       	movw	r30, r18
    2a8a:	e8 0f       	add	r30, r24
    2a8c:	f9 1f       	adc	r31, r25
    2a8e:	80 81       	ld	r24, Z
    2a90:	91 81       	ldd	r25, Z+1	; 0x01
    2a92:	2a e2       	ldi	r18, 0x2A	; 42
    2a94:	34 e0       	ldi	r19, 0x04	; 4
    2a96:	b9 01       	movw	r22, r18
    2a98:	4a e0       	ldi	r20, 0x0A	; 10
    2a9a:	50 e0       	ldi	r21, 0x00	; 0
    2a9c:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
			lcd_string(buff);
    2aa0:	8a e2       	ldi	r24, 0x2A	; 42
    2aa2:	94 e0       	ldi	r25, 0x04	; 4
    2aa4:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
			lcd_cursor(2,1);
    2aa8:	82 e0       	ldi	r24, 0x02	; 2
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	61 e0       	ldi	r22, 0x01	; 1
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
			itoa(temp[levelcount-1]->angles[i2], buff,10);
    2ab4:	80 91 00 02 	lds	r24, 0x0200
    2ab8:	90 91 01 02 	lds	r25, 0x0201
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	ef 5a       	subi	r30, 0xAF	; 175
    2ac6:	fb 4f       	sbci	r31, 0xFB	; 251
    2ac8:	20 81       	ld	r18, Z
    2aca:	31 81       	ldd	r19, Z+1	; 0x01
    2acc:	80 91 28 04 	lds	r24, 0x0428
    2ad0:	90 91 29 04 	lds	r25, 0x0429
    2ad4:	05 96       	adiw	r24, 0x05	; 5
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	f9 01       	movw	r30, r18
    2adc:	e8 0f       	add	r30, r24
    2ade:	f9 1f       	adc	r31, r25
    2ae0:	80 81       	ld	r24, Z
    2ae2:	91 81       	ldd	r25, Z+1	; 0x01
    2ae4:	2a e2       	ldi	r18, 0x2A	; 42
    2ae6:	34 e0       	ldi	r19, 0x04	; 4
    2ae8:	b9 01       	movw	r22, r18
    2aea:	4a e0       	ldi	r20, 0x0A	; 10
    2aec:	50 e0       	ldi	r21, 0x00	; 0
    2aee:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
			lcd_string(buff);
    2af2:	8a e2       	ldi	r24, 0x2A	; 42
    2af4:	94 e0       	ldi	r25, 0x04	; 4
    2af6:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
			linear_distance_mm(50);
    2afa:	82 e3       	ldi	r24, 0x32	; 50
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	0e 94 a3 01 	call	0x346	; 0x346 <linear_distance_mm>
			if((temp[levelcount-1]->angles[i2])>90)
    2b02:	80 91 00 02 	lds	r24, 0x0200
    2b06:	90 91 01 02 	lds	r25, 0x0201
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	88 0f       	add	r24, r24
    2b0e:	99 1f       	adc	r25, r25
    2b10:	fc 01       	movw	r30, r24
    2b12:	ef 5a       	subi	r30, 0xAF	; 175
    2b14:	fb 4f       	sbci	r31, 0xFB	; 251
    2b16:	20 81       	ld	r18, Z
    2b18:	31 81       	ldd	r19, Z+1	; 0x01
    2b1a:	80 91 28 04 	lds	r24, 0x0428
    2b1e:	90 91 29 04 	lds	r25, 0x0429
    2b22:	05 96       	adiw	r24, 0x05	; 5
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	f9 01       	movw	r30, r18
    2b2a:	e8 0f       	add	r30, r24
    2b2c:	f9 1f       	adc	r31, r25
    2b2e:	80 81       	ld	r24, Z
    2b30:	91 81       	ldd	r25, Z+1	; 0x01
    2b32:	8b 35       	cpi	r24, 0x5B	; 91
    2b34:	91 05       	cpc	r25, r1
    2b36:	0c f4       	brge	.+2      	; 0x2b3a <level3+0x420>
    2b38:	a9 c0       	rjmp	.+338    	; 0x2c8c <level3+0x572>
			{
				if((temp[levelcount]->angles[lev3Count-1])>=(temp[levelcount-1]->angles[i2]))
    2b3a:	80 91 00 02 	lds	r24, 0x0200
    2b3e:	90 91 01 02 	lds	r25, 0x0201
    2b42:	88 0f       	add	r24, r24
    2b44:	99 1f       	adc	r25, r25
    2b46:	fc 01       	movw	r30, r24
    2b48:	ef 5a       	subi	r30, 0xAF	; 175
    2b4a:	fb 4f       	sbci	r31, 0xFB	; 251
    2b4c:	20 81       	ld	r18, Z
    2b4e:	31 81       	ldd	r19, Z+1	; 0x01
    2b50:	80 91 83 04 	lds	r24, 0x0483
    2b54:	90 91 84 04 	lds	r25, 0x0484
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	05 96       	adiw	r24, 0x05	; 5
    2b5c:	88 0f       	add	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	f9 01       	movw	r30, r18
    2b62:	e8 0f       	add	r30, r24
    2b64:	f9 1f       	adc	r31, r25
    2b66:	40 81       	ld	r20, Z
    2b68:	51 81       	ldd	r21, Z+1	; 0x01
    2b6a:	80 91 00 02 	lds	r24, 0x0200
    2b6e:	90 91 01 02 	lds	r25, 0x0201
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	fc 01       	movw	r30, r24
    2b7a:	ef 5a       	subi	r30, 0xAF	; 175
    2b7c:	fb 4f       	sbci	r31, 0xFB	; 251
    2b7e:	20 81       	ld	r18, Z
    2b80:	31 81       	ldd	r19, Z+1	; 0x01
    2b82:	80 91 28 04 	lds	r24, 0x0428
    2b86:	90 91 29 04 	lds	r25, 0x0429
    2b8a:	05 96       	adiw	r24, 0x05	; 5
    2b8c:	88 0f       	add	r24, r24
    2b8e:	99 1f       	adc	r25, r25
    2b90:	f9 01       	movw	r30, r18
    2b92:	e8 0f       	add	r30, r24
    2b94:	f9 1f       	adc	r31, r25
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	48 17       	cp	r20, r24
    2b9c:	59 07       	cpc	r21, r25
    2b9e:	dc f1       	brlt	.+118    	; 0x2c16 <level3+0x4fc>
					angle_rotate((360-((temp[levelcount]->angles[lev3Count-1])-(temp[levelcount-1]->angles[i2]))+5),2);
    2ba0:	80 91 00 02 	lds	r24, 0x0200
    2ba4:	90 91 01 02 	lds	r25, 0x0201
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	88 0f       	add	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	fc 01       	movw	r30, r24
    2bb0:	ef 5a       	subi	r30, 0xAF	; 175
    2bb2:	fb 4f       	sbci	r31, 0xFB	; 251
    2bb4:	20 81       	ld	r18, Z
    2bb6:	31 81       	ldd	r19, Z+1	; 0x01
    2bb8:	80 91 28 04 	lds	r24, 0x0428
    2bbc:	90 91 29 04 	lds	r25, 0x0429
    2bc0:	05 96       	adiw	r24, 0x05	; 5
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	f9 01       	movw	r30, r18
    2bc8:	e8 0f       	add	r30, r24
    2bca:	f9 1f       	adc	r31, r25
    2bcc:	40 81       	ld	r20, Z
    2bce:	51 81       	ldd	r21, Z+1	; 0x01
    2bd0:	80 91 00 02 	lds	r24, 0x0200
    2bd4:	90 91 01 02 	lds	r25, 0x0201
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	fc 01       	movw	r30, r24
    2bde:	ef 5a       	subi	r30, 0xAF	; 175
    2be0:	fb 4f       	sbci	r31, 0xFB	; 251
    2be2:	20 81       	ld	r18, Z
    2be4:	31 81       	ldd	r19, Z+1	; 0x01
    2be6:	80 91 83 04 	lds	r24, 0x0483
    2bea:	90 91 84 04 	lds	r25, 0x0484
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	05 96       	adiw	r24, 0x05	; 5
    2bf2:	88 0f       	add	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	f9 01       	movw	r30, r18
    2bf8:	e8 0f       	add	r30, r24
    2bfa:	f9 1f       	adc	r31, r25
    2bfc:	80 81       	ld	r24, Z
    2bfe:	91 81       	ldd	r25, Z+1	; 0x01
    2c00:	9a 01       	movw	r18, r20
    2c02:	28 1b       	sub	r18, r24
    2c04:	39 0b       	sbc	r19, r25
    2c06:	c9 01       	movw	r24, r18
    2c08:	83 59       	subi	r24, 0x93	; 147
    2c0a:	9e 4f       	sbci	r25, 0xFE	; 254
    2c0c:	62 e0       	ldi	r22, 0x02	; 2
    2c0e:	70 e0       	ldi	r23, 0x00	; 0
    2c10:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
    2c14:	e1 c0       	rjmp	.+450    	; 0x2dd8 <level3+0x6be>
				else
					angle_rotate((360-((temp[levelcount-1]->angles[i2])-(temp[levelcount]->angles[lev3Count-1]))+5),2);
    2c16:	80 91 00 02 	lds	r24, 0x0200
    2c1a:	90 91 01 02 	lds	r25, 0x0201
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	fc 01       	movw	r30, r24
    2c24:	ef 5a       	subi	r30, 0xAF	; 175
    2c26:	fb 4f       	sbci	r31, 0xFB	; 251
    2c28:	20 81       	ld	r18, Z
    2c2a:	31 81       	ldd	r19, Z+1	; 0x01
    2c2c:	80 91 83 04 	lds	r24, 0x0483
    2c30:	90 91 84 04 	lds	r25, 0x0484
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	05 96       	adiw	r24, 0x05	; 5
    2c38:	88 0f       	add	r24, r24
    2c3a:	99 1f       	adc	r25, r25
    2c3c:	f9 01       	movw	r30, r18
    2c3e:	e8 0f       	add	r30, r24
    2c40:	f9 1f       	adc	r31, r25
    2c42:	40 81       	ld	r20, Z
    2c44:	51 81       	ldd	r21, Z+1	; 0x01
    2c46:	80 91 00 02 	lds	r24, 0x0200
    2c4a:	90 91 01 02 	lds	r25, 0x0201
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	88 0f       	add	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	fc 01       	movw	r30, r24
    2c56:	ef 5a       	subi	r30, 0xAF	; 175
    2c58:	fb 4f       	sbci	r31, 0xFB	; 251
    2c5a:	20 81       	ld	r18, Z
    2c5c:	31 81       	ldd	r19, Z+1	; 0x01
    2c5e:	80 91 28 04 	lds	r24, 0x0428
    2c62:	90 91 29 04 	lds	r25, 0x0429
    2c66:	05 96       	adiw	r24, 0x05	; 5
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	f9 01       	movw	r30, r18
    2c6e:	e8 0f       	add	r30, r24
    2c70:	f9 1f       	adc	r31, r25
    2c72:	80 81       	ld	r24, Z
    2c74:	91 81       	ldd	r25, Z+1	; 0x01
    2c76:	9a 01       	movw	r18, r20
    2c78:	28 1b       	sub	r18, r24
    2c7a:	39 0b       	sbc	r19, r25
    2c7c:	c9 01       	movw	r24, r18
    2c7e:	83 59       	subi	r24, 0x93	; 147
    2c80:	9e 4f       	sbci	r25, 0xFE	; 254
    2c82:	62 e0       	ldi	r22, 0x02	; 2
    2c84:	70 e0       	ldi	r23, 0x00	; 0
    2c86:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
    2c8a:	a6 c0       	rjmp	.+332    	; 0x2dd8 <level3+0x6be>
			}
			else
			{
				if((temp[levelcount]->angles[lev3Count-1])>=(temp[levelcount-1]->angles[i2]))
    2c8c:	80 91 00 02 	lds	r24, 0x0200
    2c90:	90 91 01 02 	lds	r25, 0x0201
    2c94:	88 0f       	add	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	fc 01       	movw	r30, r24
    2c9a:	ef 5a       	subi	r30, 0xAF	; 175
    2c9c:	fb 4f       	sbci	r31, 0xFB	; 251
    2c9e:	20 81       	ld	r18, Z
    2ca0:	31 81       	ldd	r19, Z+1	; 0x01
    2ca2:	80 91 83 04 	lds	r24, 0x0483
    2ca6:	90 91 84 04 	lds	r25, 0x0484
    2caa:	01 97       	sbiw	r24, 0x01	; 1
    2cac:	05 96       	adiw	r24, 0x05	; 5
    2cae:	88 0f       	add	r24, r24
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	f9 01       	movw	r30, r18
    2cb4:	e8 0f       	add	r30, r24
    2cb6:	f9 1f       	adc	r31, r25
    2cb8:	40 81       	ld	r20, Z
    2cba:	51 81       	ldd	r21, Z+1	; 0x01
    2cbc:	80 91 00 02 	lds	r24, 0x0200
    2cc0:	90 91 01 02 	lds	r25, 0x0201
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	88 0f       	add	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	fc 01       	movw	r30, r24
    2ccc:	ef 5a       	subi	r30, 0xAF	; 175
    2cce:	fb 4f       	sbci	r31, 0xFB	; 251
    2cd0:	20 81       	ld	r18, Z
    2cd2:	31 81       	ldd	r19, Z+1	; 0x01
    2cd4:	80 91 28 04 	lds	r24, 0x0428
    2cd8:	90 91 29 04 	lds	r25, 0x0429
    2cdc:	05 96       	adiw	r24, 0x05	; 5
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	f9 01       	movw	r30, r18
    2ce4:	e8 0f       	add	r30, r24
    2ce6:	f9 1f       	adc	r31, r25
    2ce8:	80 81       	ld	r24, Z
    2cea:	91 81       	ldd	r25, Z+1	; 0x01
    2cec:	48 17       	cp	r20, r24
    2cee:	59 07       	cpc	r21, r25
    2cf0:	d4 f1       	brlt	.+116    	; 0x2d66 <level3+0x64c>
					angle_rotate(((temp[levelcount]->angles[lev3Count-1])-(temp[levelcount-1]->angles[i2])-25),2);
    2cf2:	80 91 00 02 	lds	r24, 0x0200
    2cf6:	90 91 01 02 	lds	r25, 0x0201
    2cfa:	88 0f       	add	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	fc 01       	movw	r30, r24
    2d00:	ef 5a       	subi	r30, 0xAF	; 175
    2d02:	fb 4f       	sbci	r31, 0xFB	; 251
    2d04:	20 81       	ld	r18, Z
    2d06:	31 81       	ldd	r19, Z+1	; 0x01
    2d08:	80 91 83 04 	lds	r24, 0x0483
    2d0c:	90 91 84 04 	lds	r25, 0x0484
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	05 96       	adiw	r24, 0x05	; 5
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	f9 01       	movw	r30, r18
    2d1a:	e8 0f       	add	r30, r24
    2d1c:	f9 1f       	adc	r31, r25
    2d1e:	40 81       	ld	r20, Z
    2d20:	51 81       	ldd	r21, Z+1	; 0x01
    2d22:	80 91 00 02 	lds	r24, 0x0200
    2d26:	90 91 01 02 	lds	r25, 0x0201
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	88 0f       	add	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	fc 01       	movw	r30, r24
    2d32:	ef 5a       	subi	r30, 0xAF	; 175
    2d34:	fb 4f       	sbci	r31, 0xFB	; 251
    2d36:	20 81       	ld	r18, Z
    2d38:	31 81       	ldd	r19, Z+1	; 0x01
    2d3a:	80 91 28 04 	lds	r24, 0x0428
    2d3e:	90 91 29 04 	lds	r25, 0x0429
    2d42:	05 96       	adiw	r24, 0x05	; 5
    2d44:	88 0f       	add	r24, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	f9 01       	movw	r30, r18
    2d4a:	e8 0f       	add	r30, r24
    2d4c:	f9 1f       	adc	r31, r25
    2d4e:	80 81       	ld	r24, Z
    2d50:	91 81       	ldd	r25, Z+1	; 0x01
    2d52:	9a 01       	movw	r18, r20
    2d54:	28 1b       	sub	r18, r24
    2d56:	39 0b       	sbc	r19, r25
    2d58:	c9 01       	movw	r24, r18
    2d5a:	49 97       	sbiw	r24, 0x19	; 25
    2d5c:	62 e0       	ldi	r22, 0x02	; 2
    2d5e:	70 e0       	ldi	r23, 0x00	; 0
    2d60:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
    2d64:	39 c0       	rjmp	.+114    	; 0x2dd8 <level3+0x6be>
				else
					angle_rotate(((temp[levelcount-1]->angles[i2])-(temp[levelcount]->angles[lev3Count-1])-25),2);
    2d66:	80 91 00 02 	lds	r24, 0x0200
    2d6a:	90 91 01 02 	lds	r25, 0x0201
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	88 0f       	add	r24, r24
    2d72:	99 1f       	adc	r25, r25
    2d74:	fc 01       	movw	r30, r24
    2d76:	ef 5a       	subi	r30, 0xAF	; 175
    2d78:	fb 4f       	sbci	r31, 0xFB	; 251
    2d7a:	20 81       	ld	r18, Z
    2d7c:	31 81       	ldd	r19, Z+1	; 0x01
    2d7e:	80 91 28 04 	lds	r24, 0x0428
    2d82:	90 91 29 04 	lds	r25, 0x0429
    2d86:	05 96       	adiw	r24, 0x05	; 5
    2d88:	88 0f       	add	r24, r24
    2d8a:	99 1f       	adc	r25, r25
    2d8c:	f9 01       	movw	r30, r18
    2d8e:	e8 0f       	add	r30, r24
    2d90:	f9 1f       	adc	r31, r25
    2d92:	40 81       	ld	r20, Z
    2d94:	51 81       	ldd	r21, Z+1	; 0x01
    2d96:	80 91 00 02 	lds	r24, 0x0200
    2d9a:	90 91 01 02 	lds	r25, 0x0201
    2d9e:	88 0f       	add	r24, r24
    2da0:	99 1f       	adc	r25, r25
    2da2:	fc 01       	movw	r30, r24
    2da4:	ef 5a       	subi	r30, 0xAF	; 175
    2da6:	fb 4f       	sbci	r31, 0xFB	; 251
    2da8:	20 81       	ld	r18, Z
    2daa:	31 81       	ldd	r19, Z+1	; 0x01
    2dac:	80 91 83 04 	lds	r24, 0x0483
    2db0:	90 91 84 04 	lds	r25, 0x0484
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	05 96       	adiw	r24, 0x05	; 5
    2db8:	88 0f       	add	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	f9 01       	movw	r30, r18
    2dbe:	e8 0f       	add	r30, r24
    2dc0:	f9 1f       	adc	r31, r25
    2dc2:	80 81       	ld	r24, Z
    2dc4:	91 81       	ldd	r25, Z+1	; 0x01
    2dc6:	9a 01       	movw	r18, r20
    2dc8:	28 1b       	sub	r18, r24
    2dca:	39 0b       	sbc	r19, r25
    2dcc:	c9 01       	movw	r24, r18
    2dce:	49 97       	sbiw	r24, 0x19	; 25
    2dd0:	62 e0       	ldi	r22, 0x02	; 2
    2dd2:	70 e0       	ldi	r23, 0x00	; 0
    2dd4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
			}
			rotateSkipping(1);
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	0e 94 29 06 	call	0xc52	; 0xc52 <rotateSkipping>
			lcd_reset();
    2de0:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
			lcd_cursor(1,1);
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	61 e0       	ldi	r22, 0x01	; 1
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
			lcd_string("going back 2");
    2df0:	81 eb       	ldi	r24, 0xB1	; 177
    2df2:	92 e0       	ldi	r25, 0x02	; 2
    2df4:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>

			followWhiteLineTillNode();
    2df8:	0e 94 46 08 	call	0x108c	; 0x108c <followWhiteLineTillNode>
			distanceStack[distanceStackTop] = 0;		// Pop from Distance Stack 
    2dfc:	80 91 04 02 	lds	r24, 0x0204
    2e00:	90 91 05 02 	lds	r25, 0x0205
    2e04:	88 0f       	add	r24, r24
    2e06:	99 1f       	adc	r25, r25
    2e08:	fc 01       	movw	r30, r24
    2e0a:	e5 57       	subi	r30, 0x75	; 117
    2e0c:	fb 4f       	sbci	r31, 0xFB	; 251
    2e0e:	11 82       	std	Z+1, r1	; 0x01
    2e10:	10 82       	st	Z, r1
			distanceStackTop--;	
    2e12:	80 91 04 02 	lds	r24, 0x0204
    2e16:	90 91 05 02 	lds	r25, 0x0205
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	90 93 05 02 	sts	0x0205, r25
    2e20:	80 93 04 02 	sts	0x0204, r24

			free(temp[levelcount]);
    2e24:	80 91 00 02 	lds	r24, 0x0200
    2e28:	90 91 01 02 	lds	r25, 0x0201
    2e2c:	88 0f       	add	r24, r24
    2e2e:	99 1f       	adc	r25, r25
    2e30:	fc 01       	movw	r30, r24
    2e32:	ef 5a       	subi	r30, 0xAF	; 175
    2e34:	fb 4f       	sbci	r31, 0xFB	; 251
    2e36:	80 81       	ld	r24, Z
    2e38:	91 81       	ldd	r25, Z+1	; 0x01
    2e3a:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <free>
			levelcount--;
    2e3e:	80 91 00 02 	lds	r24, 0x0200
    2e42:	90 91 01 02 	lds	r25, 0x0201
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	90 93 01 02 	sts	0x0201, r25
    2e4c:	80 93 00 02 	sts	0x0200, r24
			flag[levelcount]=1;
    2e50:	80 91 00 02 	lds	r24, 0x0200
    2e54:	90 91 01 02 	lds	r25, 0x0201
    2e58:	88 0f       	add	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	e2 5f       	subi	r30, 0xF2	; 242
    2e60:	fb 4f       	sbci	r31, 0xFB	; 251
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	91 83       	std	Z+1, r25	; 0x01
    2e68:	80 83       	st	Z, r24
    2e6a:	fe c0       	rjmp	.+508    	; 0x3068 <level3+0x94e>
		}
		else 
		{
			temp[levelcount+1]=temp[levelcount]->children[i3];
    2e6c:	80 91 00 02 	lds	r24, 0x0200
    2e70:	90 91 01 02 	lds	r25, 0x0201
    2e74:	ac 01       	movw	r20, r24
    2e76:	4f 5f       	subi	r20, 0xFF	; 255
    2e78:	5f 4f       	sbci	r21, 0xFF	; 255
    2e7a:	80 91 00 02 	lds	r24, 0x0200
    2e7e:	90 91 01 02 	lds	r25, 0x0201
    2e82:	88 0f       	add	r24, r24
    2e84:	99 1f       	adc	r25, r25
    2e86:	fc 01       	movw	r30, r24
    2e88:	ef 5a       	subi	r30, 0xAF	; 175
    2e8a:	fb 4f       	sbci	r31, 0xFB	; 251
    2e8c:	20 81       	ld	r18, Z
    2e8e:	31 81       	ldd	r19, Z+1	; 0x01
    2e90:	80 91 26 04 	lds	r24, 0x0426
    2e94:	90 91 27 04 	lds	r25, 0x0427
    2e98:	01 96       	adiw	r24, 0x01	; 1
    2e9a:	88 0f       	add	r24, r24
    2e9c:	99 1f       	adc	r25, r25
    2e9e:	f9 01       	movw	r30, r18
    2ea0:	e8 0f       	add	r30, r24
    2ea2:	f9 1f       	adc	r31, r25
    2ea4:	20 81       	ld	r18, Z
    2ea6:	31 81       	ldd	r19, Z+1	; 0x01
    2ea8:	ca 01       	movw	r24, r20
    2eaa:	88 0f       	add	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	fc 01       	movw	r30, r24
    2eb0:	ef 5a       	subi	r30, 0xAF	; 175
    2eb2:	fb 4f       	sbci	r31, 0xFB	; 251
    2eb4:	31 83       	std	Z+1, r19	; 0x01
    2eb6:	20 83       	st	Z, r18
			linear_distance_mm(50);
    2eb8:	82 e3       	ldi	r24, 0x32	; 50
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	0e 94 a3 01 	call	0x346	; 0x346 <linear_distance_mm>
			angle_rotate(temp[levelcount]->angles[i3-1],2);
    2ec0:	80 91 00 02 	lds	r24, 0x0200
    2ec4:	90 91 01 02 	lds	r25, 0x0201
    2ec8:	88 0f       	add	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	fc 01       	movw	r30, r24
    2ece:	ef 5a       	subi	r30, 0xAF	; 175
    2ed0:	fb 4f       	sbci	r31, 0xFB	; 251
    2ed2:	20 81       	ld	r18, Z
    2ed4:	31 81       	ldd	r19, Z+1	; 0x01
    2ed6:	80 91 26 04 	lds	r24, 0x0426
    2eda:	90 91 27 04 	lds	r25, 0x0427
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	05 96       	adiw	r24, 0x05	; 5
    2ee2:	88 0f       	add	r24, r24
    2ee4:	99 1f       	adc	r25, r25
    2ee6:	f9 01       	movw	r30, r18
    2ee8:	e8 0f       	add	r30, r24
    2eea:	f9 1f       	adc	r31, r25
    2eec:	80 81       	ld	r24, Z
    2eee:	91 81       	ldd	r25, Z+1	; 0x01
    2ef0:	62 e0       	ldi	r22, 0x02	; 2
    2ef2:	70 e0       	ldi	r23, 0x00	; 0
    2ef4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
			rotateSkipping(lev3Count-i3);
    2ef8:	20 91 83 04 	lds	r18, 0x0483
    2efc:	30 91 84 04 	lds	r19, 0x0484
    2f00:	80 91 26 04 	lds	r24, 0x0426
    2f04:	90 91 27 04 	lds	r25, 0x0427
    2f08:	a9 01       	movw	r20, r18
    2f0a:	48 1b       	sub	r20, r24
    2f0c:	59 0b       	sbc	r21, r25
    2f0e:	ca 01       	movw	r24, r20
    2f10:	0e 94 29 06 	call	0xc52	; 0xc52 <rotateSkipping>
			lcd_reset();
    2f14:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
			lcd_cursor(1,1);
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	61 e0       	ldi	r22, 0x01	; 1
    2f1e:	70 e0       	ldi	r23, 0x00	; 0
    2f20:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
			lcd_string("next child 3");
    2f24:	8e eb       	ldi	r24, 0xBE	; 190
    2f26:	92 e0       	ldi	r25, 0x02	; 2
    2f28:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	aa e7       	ldi	r26, 0x7A	; 122
    2f32:	b4 e4       	ldi	r27, 0x44	; 68
    2f34:	8b 87       	std	Y+11, r24	; 0x0b
    2f36:	9c 87       	std	Y+12, r25	; 0x0c
    2f38:	ad 87       	std	Y+13, r26	; 0x0d
    2f3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f44:	2d ec       	ldi	r18, 0xCD	; 205
    2f46:	3c ec       	ldi	r19, 0xCC	; 204
    2f48:	4c e2       	ldi	r20, 0x2C	; 44
    2f4a:	55 e4       	ldi	r21, 0x45	; 69
    2f4c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	8f 83       	std	Y+7, r24	; 0x07
    2f56:	98 87       	std	Y+8, r25	; 0x08
    2f58:	a9 87       	std	Y+9, r26	; 0x09
    2f5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5e:	78 85       	ldd	r23, Y+8	; 0x08
    2f60:	89 85       	ldd	r24, Y+9	; 0x09
    2f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e8       	ldi	r20, 0x80	; 128
    2f6a:	5f e3       	ldi	r21, 0x3F	; 63
    2f6c:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    2f70:	88 23       	and	r24, r24
    2f72:	2c f4       	brge	.+10     	; 0x2f7e <level3+0x864>
		__ticks = 1;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	9e 83       	std	Y+6, r25	; 0x06
    2f7a:	8d 83       	std	Y+5, r24	; 0x05
    2f7c:	3f c0       	rjmp	.+126    	; 0x2ffc <level3+0x8e2>
	else if (__tmp > 65535)
    2f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f80:	78 85       	ldd	r23, Y+8	; 0x08
    2f82:	89 85       	ldd	r24, Y+9	; 0x09
    2f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	3f ef       	ldi	r19, 0xFF	; 255
    2f8a:	4f e7       	ldi	r20, 0x7F	; 127
    2f8c:	57 e4       	ldi	r21, 0x47	; 71
    2f8e:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    2f92:	18 16       	cp	r1, r24
    2f94:	4c f5       	brge	.+82     	; 0x2fe8 <level3+0x8ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e2       	ldi	r20, 0x20	; 32
    2fa4:	51 e4       	ldi	r21, 0x41	; 65
    2fa6:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	bc 01       	movw	r22, r24
    2fb0:	cd 01       	movw	r24, r26
    2fb2:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	9e 83       	std	Y+6, r25	; 0x06
    2fbc:	8d 83       	std	Y+5, r24	; 0x05
    2fbe:	0f c0       	rjmp	.+30     	; 0x2fde <level3+0x8c4>
    2fc0:	84 e1       	ldi	r24, 0x14	; 20
    2fc2:	91 e0       	ldi	r25, 0x01	; 1
    2fc4:	9c 83       	std	Y+4, r25	; 0x04
    2fc6:	8b 83       	std	Y+3, r24	; 0x03
    2fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fca:	9c 81       	ldd	r25, Y+4	; 0x04
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	f1 f7       	brne	.-4      	; 0x2fcc <level3+0x8b2>
    2fd0:	9c 83       	std	Y+4, r25	; 0x04
    2fd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fde:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe2:	00 97       	sbiw	r24, 0x00	; 0
    2fe4:	69 f7       	brne	.-38     	; 0x2fc0 <level3+0x8a6>
    2fe6:	14 c0       	rjmp	.+40     	; 0x3010 <level3+0x8f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fea:	78 85       	ldd	r23, Y+8	; 0x08
    2fec:	89 85       	ldd	r24, Y+9	; 0x09
    2fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff0:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	9e 83       	std	Y+6, r25	; 0x06
    2ffa:	8d 83       	std	Y+5, r24	; 0x05
    2ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    3000:	9a 83       	std	Y+2, r25	; 0x02
    3002:	89 83       	std	Y+1, r24	; 0x01
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	9a 81       	ldd	r25, Y+2	; 0x02
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	f1 f7       	brne	.-4      	; 0x3008 <level3+0x8ee>
    300c:	9a 83       	std	Y+2, r25	; 0x02
    300e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);

			distanceStackTop++;									// Add the Path distance to stack
    3010:	80 91 04 02 	lds	r24, 0x0204
    3014:	90 91 05 02 	lds	r25, 0x0205
    3018:	01 96       	adiw	r24, 0x01	; 1
    301a:	90 93 05 02 	sts	0x0205, r25
    301e:	80 93 04 02 	sts	0x0204, r24
			distanceStack[distanceStackTop] = followWhiteLineTillNode();
    3022:	00 91 04 02 	lds	r16, 0x0204
    3026:	10 91 05 02 	lds	r17, 0x0205
    302a:	0e 94 46 08 	call	0x108c	; 0x108c <followWhiteLineTillNode>
    302e:	9c 01       	movw	r18, r24
    3030:	c8 01       	movw	r24, r16
    3032:	88 0f       	add	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	fc 01       	movw	r30, r24
    3038:	e5 57       	subi	r30, 0x75	; 117
    303a:	fb 4f       	sbci	r31, 0xFB	; 251
    303c:	31 83       	std	Z+1, r19	; 0x01
    303e:	20 83       	st	Z, r18

			levelcount++;
    3040:	80 91 00 02 	lds	r24, 0x0200
    3044:	90 91 01 02 	lds	r25, 0x0201
    3048:	01 96       	adiw	r24, 0x01	; 1
    304a:	90 93 01 02 	sts	0x0201, r25
    304e:	80 93 00 02 	sts	0x0200, r24
			//angle_rotate(temp[levelcount-1]->angles[i3],1);
			flag[levelcount]=0;
    3052:	80 91 00 02 	lds	r24, 0x0200
    3056:	90 91 01 02 	lds	r25, 0x0201
    305a:	88 0f       	add	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	fc 01       	movw	r30, r24
    3060:	e2 5f       	subi	r30, 0xF2	; 242
    3062:	fb 4f       	sbci	r31, 0xFB	; 251
    3064:	11 82       	std	Z+1, r1	; 0x01
    3066:	10 82       	st	Z, r1
		}
	}
}
    3068:	6c 96       	adiw	r28, 0x1c	; 28
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	f8 94       	cli
    306e:	de bf       	out	0x3e, r29	; 62
    3070:	0f be       	out	0x3f, r0	; 63
    3072:	cd bf       	out	0x3d, r28	; 61
    3074:	cf 91       	pop	r28
    3076:	df 91       	pop	r29
    3078:	1f 91       	pop	r17
    307a:	0f 91       	pop	r16
    307c:	08 95       	ret

0000307e <final_level>:
* Final Level
* Code for Final Level
*/

void final_level()
{
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	60 97       	sbiw	r28, 0x10	; 16
    3088:	0f b6       	in	r0, 0x3f	; 63
    308a:	f8 94       	cli
    308c:	de bf       	out	0x3e, r29	; 62
    308e:	0f be       	out	0x3f, r0	; 63
    3090:	cd bf       	out	0x3d, r28	; 61

	finalPathsSeen++;
    3092:	80 91 06 02 	lds	r24, 0x0206
    3096:	90 91 07 02 	lds	r25, 0x0207
    309a:	01 96       	adiw	r24, 0x01	; 1
    309c:	90 93 07 02 	sts	0x0207, r25
    30a0:	80 93 06 02 	sts	0x0206, r24

	finalPathMatrix[finalPathsSeen][0] = i1;
    30a4:	80 91 06 02 	lds	r24, 0x0206
    30a8:	90 91 07 02 	lds	r25, 0x0207
    30ac:	20 91 89 04 	lds	r18, 0x0489
    30b0:	30 91 8a 04 	lds	r19, 0x048A
    30b4:	88 0f       	add	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	88 0f       	add	r24, r24
    30ba:	99 1f       	adc	r25, r25
    30bc:	88 0f       	add	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	fc 01       	movw	r30, r24
    30c2:	ed 59       	subi	r30, 0x9D	; 157
    30c4:	fb 4f       	sbci	r31, 0xFB	; 251
    30c6:	31 83       	std	Z+1, r19	; 0x01
    30c8:	20 83       	st	Z, r18
	finalPathMatrix[finalPathsSeen][1] = i2;
    30ca:	80 91 06 02 	lds	r24, 0x0206
    30ce:	90 91 07 02 	lds	r25, 0x0207
    30d2:	20 91 28 04 	lds	r18, 0x0428
    30d6:	30 91 29 04 	lds	r19, 0x0429
    30da:	88 0f       	add	r24, r24
    30dc:	99 1f       	adc	r25, r25
    30de:	88 0f       	add	r24, r24
    30e0:	99 1f       	adc	r25, r25
    30e2:	01 96       	adiw	r24, 0x01	; 1
    30e4:	88 0f       	add	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	fc 01       	movw	r30, r24
    30ea:	ed 59       	subi	r30, 0x9D	; 157
    30ec:	fb 4f       	sbci	r31, 0xFB	; 251
    30ee:	31 83       	std	Z+1, r19	; 0x01
    30f0:	20 83       	st	Z, r18
	finalPathMatrix[finalPathsSeen][2] = i3;
    30f2:	80 91 06 02 	lds	r24, 0x0206
    30f6:	90 91 07 02 	lds	r25, 0x0207
    30fa:	20 91 26 04 	lds	r18, 0x0426
    30fe:	30 91 27 04 	lds	r19, 0x0427
    3102:	88 0f       	add	r24, r24
    3104:	99 1f       	adc	r25, r25
    3106:	01 96       	adiw	r24, 0x01	; 1
    3108:	88 0f       	add	r24, r24
    310a:	99 1f       	adc	r25, r25
    310c:	88 0f       	add	r24, r24
    310e:	99 1f       	adc	r25, r25
    3110:	fc 01       	movw	r30, r24
    3112:	ed 59       	subi	r30, 0x9D	; 157
    3114:	fb 4f       	sbci	r31, 0xFB	; 251
    3116:	31 83       	std	Z+1, r19	; 0x01
    3118:	20 83       	st	Z, r18
	finalPathMatrix[finalPathsSeen][3] = 0;
    311a:	80 91 06 02 	lds	r24, 0x0206
    311e:	90 91 07 02 	lds	r25, 0x0207
    3122:	88 0f       	add	r24, r24
    3124:	99 1f       	adc	r25, r25
    3126:	88 0f       	add	r24, r24
    3128:	99 1f       	adc	r25, r25
    312a:	88 0f       	add	r24, r24
    312c:	99 1f       	adc	r25, r25
    312e:	fc 01       	movw	r30, r24
    3130:	e7 59       	subi	r30, 0x97	; 151
    3132:	fb 4f       	sbci	r31, 0xFB	; 251
    3134:	11 82       	std	Z+1, r1	; 0x01
    3136:	10 82       	st	Z, r1

	for(int levels=0;levels<3;levels++)
    3138:	18 8a       	std	Y+16, r1	; 0x10
    313a:	1f 86       	std	Y+15, r1	; 0x0f
    313c:	2f c0       	rjmp	.+94     	; 0x319c <final_level+0x11e>
		finalPathMatrix[finalPathsSeen][3] += distanceStack[levels];
    313e:	40 91 06 02 	lds	r20, 0x0206
    3142:	50 91 07 02 	lds	r21, 0x0207
    3146:	80 91 06 02 	lds	r24, 0x0206
    314a:	90 91 07 02 	lds	r25, 0x0207
    314e:	88 0f       	add	r24, r24
    3150:	99 1f       	adc	r25, r25
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	fc 01       	movw	r30, r24
    315c:	e7 59       	subi	r30, 0x97	; 151
    315e:	fb 4f       	sbci	r31, 0xFB	; 251
    3160:	20 81       	ld	r18, Z
    3162:	31 81       	ldd	r19, Z+1	; 0x01
    3164:	8f 85       	ldd	r24, Y+15	; 0x0f
    3166:	98 89       	ldd	r25, Y+16	; 0x10
    3168:	88 0f       	add	r24, r24
    316a:	99 1f       	adc	r25, r25
    316c:	fc 01       	movw	r30, r24
    316e:	e5 57       	subi	r30, 0x75	; 117
    3170:	fb 4f       	sbci	r31, 0xFB	; 251
    3172:	80 81       	ld	r24, Z
    3174:	91 81       	ldd	r25, Z+1	; 0x01
    3176:	28 0f       	add	r18, r24
    3178:	39 1f       	adc	r19, r25
    317a:	ca 01       	movw	r24, r20
    317c:	88 0f       	add	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	88 0f       	add	r24, r24
    3182:	99 1f       	adc	r25, r25
    3184:	88 0f       	add	r24, r24
    3186:	99 1f       	adc	r25, r25
    3188:	fc 01       	movw	r30, r24
    318a:	e7 59       	subi	r30, 0x97	; 151
    318c:	fb 4f       	sbci	r31, 0xFB	; 251
    318e:	31 83       	std	Z+1, r19	; 0x01
    3190:	20 83       	st	Z, r18
	finalPathMatrix[finalPathsSeen][0] = i1;
	finalPathMatrix[finalPathsSeen][1] = i2;
	finalPathMatrix[finalPathsSeen][2] = i3;
	finalPathMatrix[finalPathsSeen][3] = 0;

	for(int levels=0;levels<3;levels++)
    3192:	8f 85       	ldd	r24, Y+15	; 0x0f
    3194:	98 89       	ldd	r25, Y+16	; 0x10
    3196:	01 96       	adiw	r24, 0x01	; 1
    3198:	98 8b       	std	Y+16, r25	; 0x10
    319a:	8f 87       	std	Y+15, r24	; 0x0f
    319c:	8f 85       	ldd	r24, Y+15	; 0x0f
    319e:	98 89       	ldd	r25, Y+16	; 0x10
    31a0:	83 30       	cpi	r24, 0x03	; 3
    31a2:	91 05       	cpc	r25, r1
    31a4:	64 f2       	brlt	.-104    	; 0x313e <final_level+0xc0>
		finalPathMatrix[finalPathsSeen][3] += distanceStack[levels];

	

	lcd_reset();
    31a6:	0e 94 bb 22 	call	0x4576	; 0x4576 <lcd_reset>
	lcd_cursor(1,1);
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	61 e0       	ldi	r22, 0x01	; 1
    31b0:	70 e0       	ldi	r23, 0x00	; 0
    31b2:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	lcd_string("Rotating for back track");
    31b6:	8b ec       	ldi	r24, 0xCB	; 203
    31b8:	92 e0       	ldi	r25, 0x02	; 2
    31ba:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>

	lcd_cursor(2,1);
    31be:	82 e0       	ldi	r24, 0x02	; 2
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	61 e0       	ldi	r22, 0x01	; 1
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	lcd_string("Ttl Dist:");
    31ca:	83 ee       	ldi	r24, 0xE3	; 227
    31cc:	92 e0       	ldi	r25, 0x02	; 2
    31ce:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
	itoa(finalPathMatrix[finalPathsSeen][3],buff,10);
    31d2:	80 91 06 02 	lds	r24, 0x0206
    31d6:	90 91 07 02 	lds	r25, 0x0207
    31da:	88 0f       	add	r24, r24
    31dc:	99 1f       	adc	r25, r25
    31de:	88 0f       	add	r24, r24
    31e0:	99 1f       	adc	r25, r25
    31e2:	88 0f       	add	r24, r24
    31e4:	99 1f       	adc	r25, r25
    31e6:	fc 01       	movw	r30, r24
    31e8:	e7 59       	subi	r30, 0x97	; 151
    31ea:	fb 4f       	sbci	r31, 0xFB	; 251
    31ec:	80 81       	ld	r24, Z
    31ee:	91 81       	ldd	r25, Z+1	; 0x01
    31f0:	2a e2       	ldi	r18, 0x2A	; 42
    31f2:	34 e0       	ldi	r19, 0x04	; 4
    31f4:	b9 01       	movw	r22, r18
    31f6:	4a e0       	ldi	r20, 0x0A	; 10
    31f8:	50 e0       	ldi	r21, 0x00	; 0
    31fa:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
	lcd_string(buff);
    31fe:	8a e2       	ldi	r24, 0x2A	; 42
    3200:	94 e0       	ldi	r25, 0x04	; 4
    3202:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>

	velocity(100,100);
    3206:	84 e6       	ldi	r24, 0x64	; 100
    3208:	64 e6       	ldi	r22, 0x64	; 100
    320a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <velocity>
	linear_distance_mm(7);
    320e:	87 e0       	ldi	r24, 0x07	; 7
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	0e 94 a3 01 	call	0x346	; 0x346 <linear_distance_mm>
	angle_rotate(170,2);
    3216:	8a ea       	ldi	r24, 0xAA	; 170
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	62 e0       	ldi	r22, 0x02	; 2
    321c:	70 e0       	ldi	r23, 0x00	; 0
    321e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <angle_rotate>
	rotateSkipping(1);
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	0e 94 29 06 	call	0xc52	; 0xc52 <rotateSkipping>

	followWhiteLineTillNode();
    322a:	0e 94 46 08 	call	0x108c	; 0x108c <followWhiteLineTillNode>
	distanceStack[distanceStackTop] = 0;		// Pop from Distance Stack 
    322e:	80 91 04 02 	lds	r24, 0x0204
    3232:	90 91 05 02 	lds	r25, 0x0205
    3236:	88 0f       	add	r24, r24
    3238:	99 1f       	adc	r25, r25
    323a:	fc 01       	movw	r30, r24
    323c:	e5 57       	subi	r30, 0x75	; 117
    323e:	fb 4f       	sbci	r31, 0xFB	; 251
    3240:	11 82       	std	Z+1, r1	; 0x01
    3242:	10 82       	st	Z, r1
	distanceStackTop--;	
    3244:	80 91 04 02 	lds	r24, 0x0204
    3248:	90 91 05 02 	lds	r25, 0x0205
    324c:	01 97       	sbiw	r24, 0x01	; 1
    324e:	90 93 05 02 	sts	0x0205, r25
    3252:	80 93 04 02 	sts	0x0204, r24
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	aa e7       	ldi	r26, 0x7A	; 122
    325c:	b4 e4       	ldi	r27, 0x44	; 68
    325e:	8b 87       	std	Y+11, r24	; 0x0b
    3260:	9c 87       	std	Y+12, r25	; 0x0c
    3262:	ad 87       	std	Y+13, r26	; 0x0d
    3264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3266:	6b 85       	ldd	r22, Y+11	; 0x0b
    3268:	7c 85       	ldd	r23, Y+12	; 0x0c
    326a:	8d 85       	ldd	r24, Y+13	; 0x0d
    326c:	9e 85       	ldd	r25, Y+14	; 0x0e
    326e:	2d ec       	ldi	r18, 0xCD	; 205
    3270:	3c ec       	ldi	r19, 0xCC	; 204
    3272:	4c e2       	ldi	r20, 0x2C	; 44
    3274:	55 e4       	ldi	r21, 0x45	; 69
    3276:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	8f 83       	std	Y+7, r24	; 0x07
    3280:	98 87       	std	Y+8, r25	; 0x08
    3282:	a9 87       	std	Y+9, r26	; 0x09
    3284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3286:	6f 81       	ldd	r22, Y+7	; 0x07
    3288:	78 85       	ldd	r23, Y+8	; 0x08
    328a:	89 85       	ldd	r24, Y+9	; 0x09
    328c:	9a 85       	ldd	r25, Y+10	; 0x0a
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e8       	ldi	r20, 0x80	; 128
    3294:	5f e3       	ldi	r21, 0x3F	; 63
    3296:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    329a:	88 23       	and	r24, r24
    329c:	2c f4       	brge	.+10     	; 0x32a8 <final_level+0x22a>
		__ticks = 1;
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	9e 83       	std	Y+6, r25	; 0x06
    32a4:	8d 83       	std	Y+5, r24	; 0x05
    32a6:	3f c0       	rjmp	.+126    	; 0x3326 <final_level+0x2a8>
	else if (__tmp > 65535)
    32a8:	6f 81       	ldd	r22, Y+7	; 0x07
    32aa:	78 85       	ldd	r23, Y+8	; 0x08
    32ac:	89 85       	ldd	r24, Y+9	; 0x09
    32ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	3f ef       	ldi	r19, 0xFF	; 255
    32b4:	4f e7       	ldi	r20, 0x7F	; 127
    32b6:	57 e4       	ldi	r21, 0x47	; 71
    32b8:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    32bc:	18 16       	cp	r1, r24
    32be:	4c f5       	brge	.+82     	; 0x3312 <final_level+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	40 e2       	ldi	r20, 0x20	; 32
    32ce:	51 e4       	ldi	r21, 0x41	; 65
    32d0:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	bc 01       	movw	r22, r24
    32da:	cd 01       	movw	r24, r26
    32dc:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	9e 83       	std	Y+6, r25	; 0x06
    32e6:	8d 83       	std	Y+5, r24	; 0x05
    32e8:	0f c0       	rjmp	.+30     	; 0x3308 <final_level+0x28a>
    32ea:	84 e1       	ldi	r24, 0x14	; 20
    32ec:	91 e0       	ldi	r25, 0x01	; 1
    32ee:	9c 83       	std	Y+4, r25	; 0x04
    32f0:	8b 83       	std	Y+3, r24	; 0x03
    32f2:	8b 81       	ldd	r24, Y+3	; 0x03
    32f4:	9c 81       	ldd	r25, Y+4	; 0x04
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	f1 f7       	brne	.-4      	; 0x32f6 <final_level+0x278>
    32fa:	9c 83       	std	Y+4, r25	; 0x04
    32fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3300:	9e 81       	ldd	r25, Y+6	; 0x06
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	9e 83       	std	Y+6, r25	; 0x06
    3306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3308:	8d 81       	ldd	r24, Y+5	; 0x05
    330a:	9e 81       	ldd	r25, Y+6	; 0x06
    330c:	00 97       	sbiw	r24, 0x00	; 0
    330e:	69 f7       	brne	.-38     	; 0x32ea <final_level+0x26c>
    3310:	14 c0       	rjmp	.+40     	; 0x333a <final_level+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3312:	6f 81       	ldd	r22, Y+7	; 0x07
    3314:	78 85       	ldd	r23, Y+8	; 0x08
    3316:	89 85       	ldd	r24, Y+9	; 0x09
    3318:	9a 85       	ldd	r25, Y+10	; 0x0a
    331a:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	9e 83       	std	Y+6, r25	; 0x06
    3324:	8d 83       	std	Y+5, r24	; 0x05
    3326:	8d 81       	ldd	r24, Y+5	; 0x05
    3328:	9e 81       	ldd	r25, Y+6	; 0x06
    332a:	9a 83       	std	Y+2, r25	; 0x02
    332c:	89 83       	std	Y+1, r24	; 0x01
    332e:	89 81       	ldd	r24, Y+1	; 0x01
    3330:	9a 81       	ldd	r25, Y+2	; 0x02
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	f1 f7       	brne	.-4      	; 0x3332 <final_level+0x2b4>
    3336:	9a 83       	std	Y+2, r25	; 0x02
    3338:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);
	levelcount--;
    333a:	80 91 00 02 	lds	r24, 0x0200
    333e:	90 91 01 02 	lds	r25, 0x0201
    3342:	01 97       	sbiw	r24, 0x01	; 1
    3344:	90 93 01 02 	sts	0x0201, r25
    3348:	80 93 00 02 	sts	0x0200, r24
	flag[levelcount]=1;
    334c:	80 91 00 02 	lds	r24, 0x0200
    3350:	90 91 01 02 	lds	r25, 0x0201
    3354:	88 0f       	add	r24, r24
    3356:	99 1f       	adc	r25, r25
    3358:	fc 01       	movw	r30, r24
    335a:	e2 5f       	subi	r30, 0xF2	; 242
    335c:	fb 4f       	sbci	r31, 0xFB	; 251
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	91 83       	std	Z+1, r25	; 0x01
    3364:	80 83       	st	Z, r24
	lcd_cursor(2,1);
    3366:	82 e0       	ldi	r24, 0x02	; 2
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	61 e0       	ldi	r22, 0x01	; 1
    336c:	70 e0       	ldi	r23, 0x00	; 0
    336e:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	itoa(levelcount, buff,10);
    3372:	80 91 00 02 	lds	r24, 0x0200
    3376:	90 91 01 02 	lds	r25, 0x0201
    337a:	2a e2       	ldi	r18, 0x2A	; 42
    337c:	34 e0       	ldi	r19, 0x04	; 4
    337e:	b9 01       	movw	r22, r18
    3380:	4a e0       	ldi	r20, 0x0A	; 10
    3382:	50 e0       	ldi	r21, 0x00	; 0
    3384:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
	lcd_string(buff);
    3388:	8a e2       	ldi	r24, 0x2A	; 42
    338a:	94 e0       	ldi	r25, 0x04	; 4
    338c:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
	lcd_cursor(2,4);
    3390:	82 e0       	ldi	r24, 0x02	; 2
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	64 e0       	ldi	r22, 0x04	; 4
    3396:	70 e0       	ldi	r23, 0x00	; 0
    3398:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	itoa(flag[levelcount], buff,10);
    339c:	80 91 00 02 	lds	r24, 0x0200
    33a0:	90 91 01 02 	lds	r25, 0x0201
    33a4:	88 0f       	add	r24, r24
    33a6:	99 1f       	adc	r25, r25
    33a8:	fc 01       	movw	r30, r24
    33aa:	e2 5f       	subi	r30, 0xF2	; 242
    33ac:	fb 4f       	sbci	r31, 0xFB	; 251
    33ae:	80 81       	ld	r24, Z
    33b0:	91 81       	ldd	r25, Z+1	; 0x01
    33b2:	2a e2       	ldi	r18, 0x2A	; 42
    33b4:	34 e0       	ldi	r19, 0x04	; 4
    33b6:	b9 01       	movw	r22, r18
    33b8:	4a e0       	ldi	r20, 0x0A	; 10
    33ba:	50 e0       	ldi	r21, 0x00	; 0
    33bc:	0e 94 3d 2c 	call	0x587a	; 0x587a <itoa>
	lcd_string(buff);
    33c0:	8a e2       	ldi	r24, 0x2A	; 42
    33c2:	94 e0       	ldi	r25, 0x04	; 4
    33c4:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
}
    33c8:	60 96       	adiw	r28, 0x10	; 16
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	cf 91       	pop	r28
    33d6:	df 91       	pop	r29
    33d8:	08 95       	ret

000033da <lcd_port_config>:
unsigned int thousand;
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
    33da:	df 93       	push	r29
    33dc:	cf 93       	push	r28
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    33e2:	a7 e2       	ldi	r26, 0x27	; 39
    33e4:	b0 e0       	ldi	r27, 0x00	; 0
    33e6:	e7 e2       	ldi	r30, 0x27	; 39
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	80 81       	ld	r24, Z
    33ec:	87 6f       	ori	r24, 0xF7	; 247
    33ee:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    33f0:	a8 e2       	ldi	r26, 0x28	; 40
    33f2:	b0 e0       	ldi	r27, 0x00	; 0
    33f4:	e8 e2       	ldi	r30, 0x28	; 40
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	80 81       	ld	r24, Z
    33fa:	80 78       	andi	r24, 0x80	; 128
    33fc:	8c 93       	st	X, r24
}
    33fe:	cf 91       	pop	r28
    3400:	df 91       	pop	r29
    3402:	08 95       	ret

00003404 <port_init>:

//Function to Initialize PORTS
void port_init()
{
    3404:	df 93       	push	r29
    3406:	cf 93       	push	r28
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    340c:	0e 94 ed 19 	call	0x33da	; 0x33da <lcd_port_config>
}
    3410:	cf 91       	pop	r28
    3412:	df 91       	pop	r29
    3414:	08 95       	ret

00003416 <lcd_set_4bit>:

//Function to Reset LCD
void lcd_set_4bit()
{
    3416:	0f 93       	push	r16
    3418:	1f 93       	push	r17
    341a:	df 93       	push	r29
    341c:	cf 93       	push	r28
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
    3422:	c0 57       	subi	r28, 0x70	; 112
    3424:	d0 40       	sbci	r29, 0x00	; 0
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	fe 01       	movw	r30, r28
    3432:	e3 59       	subi	r30, 0x93	; 147
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	80 e0       	ldi	r24, 0x00	; 0
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	a0 e8       	ldi	r26, 0x80	; 128
    343c:	bf e3       	ldi	r27, 0x3F	; 63
    343e:	80 83       	st	Z, r24
    3440:	91 83       	std	Z+1, r25	; 0x01
    3442:	a2 83       	std	Z+2, r26	; 0x02
    3444:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3446:	8e 01       	movw	r16, r28
    3448:	07 59       	subi	r16, 0x97	; 151
    344a:	1f 4f       	sbci	r17, 0xFF	; 255
    344c:	fe 01       	movw	r30, r28
    344e:	e3 59       	subi	r30, 0x93	; 147
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	60 81       	ld	r22, Z
    3454:	71 81       	ldd	r23, Z+1	; 0x01
    3456:	82 81       	ldd	r24, Z+2	; 0x02
    3458:	93 81       	ldd	r25, Z+3	; 0x03
    345a:	2d ec       	ldi	r18, 0xCD	; 205
    345c:	3c ec       	ldi	r19, 0xCC	; 204
    345e:	4c e2       	ldi	r20, 0x2C	; 44
    3460:	55 e4       	ldi	r21, 0x45	; 69
    3462:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	f8 01       	movw	r30, r16
    346c:	80 83       	st	Z, r24
    346e:	91 83       	std	Z+1, r25	; 0x01
    3470:	a2 83       	std	Z+2, r26	; 0x02
    3472:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3474:	fe 01       	movw	r30, r28
    3476:	e7 59       	subi	r30, 0x97	; 151
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	60 81       	ld	r22, Z
    347c:	71 81       	ldd	r23, Z+1	; 0x01
    347e:	82 81       	ldd	r24, Z+2	; 0x02
    3480:	93 81       	ldd	r25, Z+3	; 0x03
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	40 e8       	ldi	r20, 0x80	; 128
    3488:	5f e3       	ldi	r21, 0x3F	; 63
    348a:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    348e:	88 23       	and	r24, r24
    3490:	44 f4       	brge	.+16     	; 0x34a2 <lcd_set_4bit+0x8c>
		__ticks = 1;
    3492:	fe 01       	movw	r30, r28
    3494:	e9 59       	subi	r30, 0x99	; 153
    3496:	ff 4f       	sbci	r31, 0xFF	; 255
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	91 83       	std	Z+1, r25	; 0x01
    349e:	80 83       	st	Z, r24
    34a0:	64 c0       	rjmp	.+200    	; 0x356a <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
    34a2:	fe 01       	movw	r30, r28
    34a4:	e7 59       	subi	r30, 0x97	; 151
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	60 81       	ld	r22, Z
    34aa:	71 81       	ldd	r23, Z+1	; 0x01
    34ac:	82 81       	ldd	r24, Z+2	; 0x02
    34ae:	93 81       	ldd	r25, Z+3	; 0x03
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	3f ef       	ldi	r19, 0xFF	; 255
    34b4:	4f e7       	ldi	r20, 0x7F	; 127
    34b6:	57 e4       	ldi	r21, 0x47	; 71
    34b8:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    34bc:	18 16       	cp	r1, r24
    34be:	0c f0       	brlt	.+2      	; 0x34c2 <lcd_set_4bit+0xac>
    34c0:	43 c0       	rjmp	.+134    	; 0x3548 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c2:	fe 01       	movw	r30, r28
    34c4:	e3 59       	subi	r30, 0x93	; 147
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	60 81       	ld	r22, Z
    34ca:	71 81       	ldd	r23, Z+1	; 0x01
    34cc:	82 81       	ldd	r24, Z+2	; 0x02
    34ce:	93 81       	ldd	r25, Z+3	; 0x03
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e2       	ldi	r20, 0x20	; 32
    34d6:	51 e4       	ldi	r21, 0x41	; 65
    34d8:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	8e 01       	movw	r16, r28
    34e2:	09 59       	subi	r16, 0x99	; 153
    34e4:	1f 4f       	sbci	r17, 0xFF	; 255
    34e6:	bc 01       	movw	r22, r24
    34e8:	cd 01       	movw	r24, r26
    34ea:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	f8 01       	movw	r30, r16
    34f4:	91 83       	std	Z+1, r25	; 0x01
    34f6:	80 83       	st	Z, r24
    34f8:	1f c0       	rjmp	.+62     	; 0x3538 <lcd_set_4bit+0x122>
    34fa:	fe 01       	movw	r30, r28
    34fc:	eb 59       	subi	r30, 0x9B	; 155
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	84 e1       	ldi	r24, 0x14	; 20
    3502:	91 e0       	ldi	r25, 0x01	; 1
    3504:	91 83       	std	Z+1, r25	; 0x01
    3506:	80 83       	st	Z, r24
    3508:	fe 01       	movw	r30, r28
    350a:	eb 59       	subi	r30, 0x9B	; 155
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	80 81       	ld	r24, Z
    3510:	91 81       	ldd	r25, Z+1	; 0x01
    3512:	01 97       	sbiw	r24, 0x01	; 1
    3514:	f1 f7       	brne	.-4      	; 0x3512 <lcd_set_4bit+0xfc>
    3516:	fe 01       	movw	r30, r28
    3518:	eb 59       	subi	r30, 0x9B	; 155
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	91 83       	std	Z+1, r25	; 0x01
    351e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3520:	de 01       	movw	r26, r28
    3522:	a9 59       	subi	r26, 0x99	; 153
    3524:	bf 4f       	sbci	r27, 0xFF	; 255
    3526:	fe 01       	movw	r30, r28
    3528:	e9 59       	subi	r30, 0x99	; 153
    352a:	ff 4f       	sbci	r31, 0xFF	; 255
    352c:	80 81       	ld	r24, Z
    352e:	91 81       	ldd	r25, Z+1	; 0x01
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	11 96       	adiw	r26, 0x01	; 1
    3534:	9c 93       	st	X, r25
    3536:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3538:	fe 01       	movw	r30, r28
    353a:	e9 59       	subi	r30, 0x99	; 153
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	80 81       	ld	r24, Z
    3540:	91 81       	ldd	r25, Z+1	; 0x01
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	d1 f6       	brne	.-76     	; 0x34fa <lcd_set_4bit+0xe4>
    3546:	27 c0       	rjmp	.+78     	; 0x3596 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3548:	8e 01       	movw	r16, r28
    354a:	09 59       	subi	r16, 0x99	; 153
    354c:	1f 4f       	sbci	r17, 0xFF	; 255
    354e:	fe 01       	movw	r30, r28
    3550:	e7 59       	subi	r30, 0x97	; 151
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	60 81       	ld	r22, Z
    3556:	71 81       	ldd	r23, Z+1	; 0x01
    3558:	82 81       	ldd	r24, Z+2	; 0x02
    355a:	93 81       	ldd	r25, Z+3	; 0x03
    355c:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	f8 01       	movw	r30, r16
    3566:	91 83       	std	Z+1, r25	; 0x01
    3568:	80 83       	st	Z, r24
    356a:	de 01       	movw	r26, r28
    356c:	ad 59       	subi	r26, 0x9D	; 157
    356e:	bf 4f       	sbci	r27, 0xFF	; 255
    3570:	fe 01       	movw	r30, r28
    3572:	e9 59       	subi	r30, 0x99	; 153
    3574:	ff 4f       	sbci	r31, 0xFF	; 255
    3576:	80 81       	ld	r24, Z
    3578:	91 81       	ldd	r25, Z+1	; 0x01
    357a:	8d 93       	st	X+, r24
    357c:	9c 93       	st	X, r25
    357e:	fe 01       	movw	r30, r28
    3580:	ed 59       	subi	r30, 0x9D	; 157
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	80 81       	ld	r24, Z
    3586:	91 81       	ldd	r25, Z+1	; 0x01
    3588:	01 97       	sbiw	r24, 0x01	; 1
    358a:	f1 f7       	brne	.-4      	; 0x3588 <lcd_set_4bit+0x172>
    358c:	fe 01       	movw	r30, r28
    358e:	ed 59       	subi	r30, 0x9D	; 157
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	91 83       	std	Z+1, r25	; 0x01
    3594:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    3596:	a8 e2       	ldi	r26, 0x28	; 40
    3598:	b0 e0       	ldi	r27, 0x00	; 0
    359a:	e8 e2       	ldi	r30, 0x28	; 40
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	80 81       	ld	r24, Z
    35a0:	8e 7f       	andi	r24, 0xFE	; 254
    35a2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    35a4:	a8 e2       	ldi	r26, 0x28	; 40
    35a6:	b0 e0       	ldi	r27, 0x00	; 0
    35a8:	e8 e2       	ldi	r30, 0x28	; 40
    35aa:	f0 e0       	ldi	r31, 0x00	; 0
    35ac:	80 81       	ld	r24, Z
    35ae:	8d 7f       	andi	r24, 0xFD	; 253
    35b0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    35b2:	e8 e2       	ldi	r30, 0x28	; 40
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	80 e3       	ldi	r24, 0x30	; 48
    35b8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    35ba:	a8 e2       	ldi	r26, 0x28	; 40
    35bc:	b0 e0       	ldi	r27, 0x00	; 0
    35be:	e8 e2       	ldi	r30, 0x28	; 40
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	80 81       	ld	r24, Z
    35c4:	84 60       	ori	r24, 0x04	; 4
    35c6:	8c 93       	st	X, r24
    35c8:	fe 01       	movw	r30, r28
    35ca:	e1 5a       	subi	r30, 0xA1	; 161
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	a0 ea       	ldi	r26, 0xA0	; 160
    35d4:	b0 e4       	ldi	r27, 0x40	; 64
    35d6:	80 83       	st	Z, r24
    35d8:	91 83       	std	Z+1, r25	; 0x01
    35da:	a2 83       	std	Z+2, r26	; 0x02
    35dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35de:	8e 01       	movw	r16, r28
    35e0:	05 5a       	subi	r16, 0xA5	; 165
    35e2:	1f 4f       	sbci	r17, 0xFF	; 255
    35e4:	fe 01       	movw	r30, r28
    35e6:	e1 5a       	subi	r30, 0xA1	; 161
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	60 81       	ld	r22, Z
    35ec:	71 81       	ldd	r23, Z+1	; 0x01
    35ee:	82 81       	ldd	r24, Z+2	; 0x02
    35f0:	93 81       	ldd	r25, Z+3	; 0x03
    35f2:	2d ec       	ldi	r18, 0xCD	; 205
    35f4:	3c ec       	ldi	r19, 0xCC	; 204
    35f6:	4c e2       	ldi	r20, 0x2C	; 44
    35f8:	55 e4       	ldi	r21, 0x45	; 69
    35fa:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	f8 01       	movw	r30, r16
    3604:	80 83       	st	Z, r24
    3606:	91 83       	std	Z+1, r25	; 0x01
    3608:	a2 83       	std	Z+2, r26	; 0x02
    360a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    360c:	fe 01       	movw	r30, r28
    360e:	e5 5a       	subi	r30, 0xA5	; 165
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	60 81       	ld	r22, Z
    3614:	71 81       	ldd	r23, Z+1	; 0x01
    3616:	82 81       	ldd	r24, Z+2	; 0x02
    3618:	93 81       	ldd	r25, Z+3	; 0x03
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	40 e8       	ldi	r20, 0x80	; 128
    3620:	5f e3       	ldi	r21, 0x3F	; 63
    3622:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    3626:	88 23       	and	r24, r24
    3628:	44 f4       	brge	.+16     	; 0x363a <lcd_set_4bit+0x224>
		__ticks = 1;
    362a:	fe 01       	movw	r30, r28
    362c:	e7 5a       	subi	r30, 0xA7	; 167
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	91 83       	std	Z+1, r25	; 0x01
    3636:	80 83       	st	Z, r24
    3638:	64 c0       	rjmp	.+200    	; 0x3702 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
    363a:	fe 01       	movw	r30, r28
    363c:	e5 5a       	subi	r30, 0xA5	; 165
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	60 81       	ld	r22, Z
    3642:	71 81       	ldd	r23, Z+1	; 0x01
    3644:	82 81       	ldd	r24, Z+2	; 0x02
    3646:	93 81       	ldd	r25, Z+3	; 0x03
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	3f ef       	ldi	r19, 0xFF	; 255
    364c:	4f e7       	ldi	r20, 0x7F	; 127
    364e:	57 e4       	ldi	r21, 0x47	; 71
    3650:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    3654:	18 16       	cp	r1, r24
    3656:	0c f0       	brlt	.+2      	; 0x365a <lcd_set_4bit+0x244>
    3658:	43 c0       	rjmp	.+134    	; 0x36e0 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365a:	fe 01       	movw	r30, r28
    365c:	e1 5a       	subi	r30, 0xA1	; 161
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	60 81       	ld	r22, Z
    3662:	71 81       	ldd	r23, Z+1	; 0x01
    3664:	82 81       	ldd	r24, Z+2	; 0x02
    3666:	93 81       	ldd	r25, Z+3	; 0x03
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	40 e2       	ldi	r20, 0x20	; 32
    366e:	51 e4       	ldi	r21, 0x41	; 65
    3670:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	8e 01       	movw	r16, r28
    367a:	07 5a       	subi	r16, 0xA7	; 167
    367c:	1f 4f       	sbci	r17, 0xFF	; 255
    367e:	bc 01       	movw	r22, r24
    3680:	cd 01       	movw	r24, r26
    3682:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	f8 01       	movw	r30, r16
    368c:	91 83       	std	Z+1, r25	; 0x01
    368e:	80 83       	st	Z, r24
    3690:	1f c0       	rjmp	.+62     	; 0x36d0 <lcd_set_4bit+0x2ba>
    3692:	fe 01       	movw	r30, r28
    3694:	e9 5a       	subi	r30, 0xA9	; 169
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	84 e1       	ldi	r24, 0x14	; 20
    369a:	91 e0       	ldi	r25, 0x01	; 1
    369c:	91 83       	std	Z+1, r25	; 0x01
    369e:	80 83       	st	Z, r24
    36a0:	fe 01       	movw	r30, r28
    36a2:	e9 5a       	subi	r30, 0xA9	; 169
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	80 81       	ld	r24, Z
    36a8:	91 81       	ldd	r25, Z+1	; 0x01
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	f1 f7       	brne	.-4      	; 0x36aa <lcd_set_4bit+0x294>
    36ae:	fe 01       	movw	r30, r28
    36b0:	e9 5a       	subi	r30, 0xA9	; 169
    36b2:	ff 4f       	sbci	r31, 0xFF	; 255
    36b4:	91 83       	std	Z+1, r25	; 0x01
    36b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b8:	de 01       	movw	r26, r28
    36ba:	a7 5a       	subi	r26, 0xA7	; 167
    36bc:	bf 4f       	sbci	r27, 0xFF	; 255
    36be:	fe 01       	movw	r30, r28
    36c0:	e7 5a       	subi	r30, 0xA7	; 167
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	80 81       	ld	r24, Z
    36c6:	91 81       	ldd	r25, Z+1	; 0x01
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	11 96       	adiw	r26, 0x01	; 1
    36cc:	9c 93       	st	X, r25
    36ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d0:	fe 01       	movw	r30, r28
    36d2:	e7 5a       	subi	r30, 0xA7	; 167
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	80 81       	ld	r24, Z
    36d8:	91 81       	ldd	r25, Z+1	; 0x01
    36da:	00 97       	sbiw	r24, 0x00	; 0
    36dc:	d1 f6       	brne	.-76     	; 0x3692 <lcd_set_4bit+0x27c>
    36de:	27 c0       	rjmp	.+78     	; 0x372e <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e0:	8e 01       	movw	r16, r28
    36e2:	07 5a       	subi	r16, 0xA7	; 167
    36e4:	1f 4f       	sbci	r17, 0xFF	; 255
    36e6:	fe 01       	movw	r30, r28
    36e8:	e5 5a       	subi	r30, 0xA5	; 165
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	60 81       	ld	r22, Z
    36ee:	71 81       	ldd	r23, Z+1	; 0x01
    36f0:	82 81       	ldd	r24, Z+2	; 0x02
    36f2:	93 81       	ldd	r25, Z+3	; 0x03
    36f4:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	f8 01       	movw	r30, r16
    36fe:	91 83       	std	Z+1, r25	; 0x01
    3700:	80 83       	st	Z, r24
    3702:	de 01       	movw	r26, r28
    3704:	ab 5a       	subi	r26, 0xAB	; 171
    3706:	bf 4f       	sbci	r27, 0xFF	; 255
    3708:	fe 01       	movw	r30, r28
    370a:	e7 5a       	subi	r30, 0xA7	; 167
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	80 81       	ld	r24, Z
    3710:	91 81       	ldd	r25, Z+1	; 0x01
    3712:	8d 93       	st	X+, r24
    3714:	9c 93       	st	X, r25
    3716:	fe 01       	movw	r30, r28
    3718:	eb 5a       	subi	r30, 0xAB	; 171
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	80 81       	ld	r24, Z
    371e:	91 81       	ldd	r25, Z+1	; 0x01
    3720:	01 97       	sbiw	r24, 0x01	; 1
    3722:	f1 f7       	brne	.-4      	; 0x3720 <lcd_set_4bit+0x30a>
    3724:	fe 01       	movw	r30, r28
    3726:	eb 5a       	subi	r30, 0xAB	; 171
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	91 83       	std	Z+1, r25	; 0x01
    372c:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    372e:	a8 e2       	ldi	r26, 0x28	; 40
    3730:	b0 e0       	ldi	r27, 0x00	; 0
    3732:	e8 e2       	ldi	r30, 0x28	; 40
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	80 81       	ld	r24, Z
    3738:	8b 7f       	andi	r24, 0xFB	; 251
    373a:	8c 93       	st	X, r24
    373c:	fe 01       	movw	r30, r28
    373e:	ef 5a       	subi	r30, 0xAF	; 175
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	a0 e8       	ldi	r26, 0x80	; 128
    3748:	bf e3       	ldi	r27, 0x3F	; 63
    374a:	80 83       	st	Z, r24
    374c:	91 83       	std	Z+1, r25	; 0x01
    374e:	a2 83       	std	Z+2, r26	; 0x02
    3750:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3752:	8e 01       	movw	r16, r28
    3754:	03 5b       	subi	r16, 0xB3	; 179
    3756:	1f 4f       	sbci	r17, 0xFF	; 255
    3758:	fe 01       	movw	r30, r28
    375a:	ef 5a       	subi	r30, 0xAF	; 175
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	60 81       	ld	r22, Z
    3760:	71 81       	ldd	r23, Z+1	; 0x01
    3762:	82 81       	ldd	r24, Z+2	; 0x02
    3764:	93 81       	ldd	r25, Z+3	; 0x03
    3766:	2d ec       	ldi	r18, 0xCD	; 205
    3768:	3c ec       	ldi	r19, 0xCC	; 204
    376a:	4c e2       	ldi	r20, 0x2C	; 44
    376c:	55 e4       	ldi	r21, 0x45	; 69
    376e:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	f8 01       	movw	r30, r16
    3778:	80 83       	st	Z, r24
    377a:	91 83       	std	Z+1, r25	; 0x01
    377c:	a2 83       	std	Z+2, r26	; 0x02
    377e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3780:	fe 01       	movw	r30, r28
    3782:	e3 5b       	subi	r30, 0xB3	; 179
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	60 81       	ld	r22, Z
    3788:	71 81       	ldd	r23, Z+1	; 0x01
    378a:	82 81       	ldd	r24, Z+2	; 0x02
    378c:	93 81       	ldd	r25, Z+3	; 0x03
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e8       	ldi	r20, 0x80	; 128
    3794:	5f e3       	ldi	r21, 0x3F	; 63
    3796:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    379a:	88 23       	and	r24, r24
    379c:	44 f4       	brge	.+16     	; 0x37ae <lcd_set_4bit+0x398>
		__ticks = 1;
    379e:	fe 01       	movw	r30, r28
    37a0:	e5 5b       	subi	r30, 0xB5	; 181
    37a2:	ff 4f       	sbci	r31, 0xFF	; 255
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	91 83       	std	Z+1, r25	; 0x01
    37aa:	80 83       	st	Z, r24
    37ac:	64 c0       	rjmp	.+200    	; 0x3876 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
    37ae:	fe 01       	movw	r30, r28
    37b0:	e3 5b       	subi	r30, 0xB3	; 179
    37b2:	ff 4f       	sbci	r31, 0xFF	; 255
    37b4:	60 81       	ld	r22, Z
    37b6:	71 81       	ldd	r23, Z+1	; 0x01
    37b8:	82 81       	ldd	r24, Z+2	; 0x02
    37ba:	93 81       	ldd	r25, Z+3	; 0x03
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	3f ef       	ldi	r19, 0xFF	; 255
    37c0:	4f e7       	ldi	r20, 0x7F	; 127
    37c2:	57 e4       	ldi	r21, 0x47	; 71
    37c4:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    37c8:	18 16       	cp	r1, r24
    37ca:	0c f0       	brlt	.+2      	; 0x37ce <lcd_set_4bit+0x3b8>
    37cc:	43 c0       	rjmp	.+134    	; 0x3854 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ce:	fe 01       	movw	r30, r28
    37d0:	ef 5a       	subi	r30, 0xAF	; 175
    37d2:	ff 4f       	sbci	r31, 0xFF	; 255
    37d4:	60 81       	ld	r22, Z
    37d6:	71 81       	ldd	r23, Z+1	; 0x01
    37d8:	82 81       	ldd	r24, Z+2	; 0x02
    37da:	93 81       	ldd	r25, Z+3	; 0x03
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	40 e2       	ldi	r20, 0x20	; 32
    37e2:	51 e4       	ldi	r21, 0x41	; 65
    37e4:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	8e 01       	movw	r16, r28
    37ee:	05 5b       	subi	r16, 0xB5	; 181
    37f0:	1f 4f       	sbci	r17, 0xFF	; 255
    37f2:	bc 01       	movw	r22, r24
    37f4:	cd 01       	movw	r24, r26
    37f6:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    37fa:	dc 01       	movw	r26, r24
    37fc:	cb 01       	movw	r24, r22
    37fe:	f8 01       	movw	r30, r16
    3800:	91 83       	std	Z+1, r25	; 0x01
    3802:	80 83       	st	Z, r24
    3804:	1f c0       	rjmp	.+62     	; 0x3844 <lcd_set_4bit+0x42e>
    3806:	fe 01       	movw	r30, r28
    3808:	e7 5b       	subi	r30, 0xB7	; 183
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	84 e1       	ldi	r24, 0x14	; 20
    380e:	91 e0       	ldi	r25, 0x01	; 1
    3810:	91 83       	std	Z+1, r25	; 0x01
    3812:	80 83       	st	Z, r24
    3814:	fe 01       	movw	r30, r28
    3816:	e7 5b       	subi	r30, 0xB7	; 183
    3818:	ff 4f       	sbci	r31, 0xFF	; 255
    381a:	80 81       	ld	r24, Z
    381c:	91 81       	ldd	r25, Z+1	; 0x01
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	f1 f7       	brne	.-4      	; 0x381e <lcd_set_4bit+0x408>
    3822:	fe 01       	movw	r30, r28
    3824:	e7 5b       	subi	r30, 0xB7	; 183
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	91 83       	std	Z+1, r25	; 0x01
    382a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    382c:	de 01       	movw	r26, r28
    382e:	a5 5b       	subi	r26, 0xB5	; 181
    3830:	bf 4f       	sbci	r27, 0xFF	; 255
    3832:	fe 01       	movw	r30, r28
    3834:	e5 5b       	subi	r30, 0xB5	; 181
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	80 81       	ld	r24, Z
    383a:	91 81       	ldd	r25, Z+1	; 0x01
    383c:	01 97       	sbiw	r24, 0x01	; 1
    383e:	11 96       	adiw	r26, 0x01	; 1
    3840:	9c 93       	st	X, r25
    3842:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3844:	fe 01       	movw	r30, r28
    3846:	e5 5b       	subi	r30, 0xB5	; 181
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	80 81       	ld	r24, Z
    384c:	91 81       	ldd	r25, Z+1	; 0x01
    384e:	00 97       	sbiw	r24, 0x00	; 0
    3850:	d1 f6       	brne	.-76     	; 0x3806 <lcd_set_4bit+0x3f0>
    3852:	27 c0       	rjmp	.+78     	; 0x38a2 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3854:	8e 01       	movw	r16, r28
    3856:	05 5b       	subi	r16, 0xB5	; 181
    3858:	1f 4f       	sbci	r17, 0xFF	; 255
    385a:	fe 01       	movw	r30, r28
    385c:	e3 5b       	subi	r30, 0xB3	; 179
    385e:	ff 4f       	sbci	r31, 0xFF	; 255
    3860:	60 81       	ld	r22, Z
    3862:	71 81       	ldd	r23, Z+1	; 0x01
    3864:	82 81       	ldd	r24, Z+2	; 0x02
    3866:	93 81       	ldd	r25, Z+3	; 0x03
    3868:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    386c:	dc 01       	movw	r26, r24
    386e:	cb 01       	movw	r24, r22
    3870:	f8 01       	movw	r30, r16
    3872:	91 83       	std	Z+1, r25	; 0x01
    3874:	80 83       	st	Z, r24
    3876:	de 01       	movw	r26, r28
    3878:	a9 5b       	subi	r26, 0xB9	; 185
    387a:	bf 4f       	sbci	r27, 0xFF	; 255
    387c:	fe 01       	movw	r30, r28
    387e:	e5 5b       	subi	r30, 0xB5	; 181
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	80 81       	ld	r24, Z
    3884:	91 81       	ldd	r25, Z+1	; 0x01
    3886:	8d 93       	st	X+, r24
    3888:	9c 93       	st	X, r25
    388a:	fe 01       	movw	r30, r28
    388c:	e9 5b       	subi	r30, 0xB9	; 185
    388e:	ff 4f       	sbci	r31, 0xFF	; 255
    3890:	80 81       	ld	r24, Z
    3892:	91 81       	ldd	r25, Z+1	; 0x01
    3894:	01 97       	sbiw	r24, 0x01	; 1
    3896:	f1 f7       	brne	.-4      	; 0x3894 <lcd_set_4bit+0x47e>
    3898:	fe 01       	movw	r30, r28
    389a:	e9 5b       	subi	r30, 0xB9	; 185
    389c:	ff 4f       	sbci	r31, 0xFF	; 255
    389e:	91 83       	std	Z+1, r25	; 0x01
    38a0:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    38a2:	a8 e2       	ldi	r26, 0x28	; 40
    38a4:	b0 e0       	ldi	r27, 0x00	; 0
    38a6:	e8 e2       	ldi	r30, 0x28	; 40
    38a8:	f0 e0       	ldi	r31, 0x00	; 0
    38aa:	80 81       	ld	r24, Z
    38ac:	8e 7f       	andi	r24, 0xFE	; 254
    38ae:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    38b0:	a8 e2       	ldi	r26, 0x28	; 40
    38b2:	b0 e0       	ldi	r27, 0x00	; 0
    38b4:	e8 e2       	ldi	r30, 0x28	; 40
    38b6:	f0 e0       	ldi	r31, 0x00	; 0
    38b8:	80 81       	ld	r24, Z
    38ba:	8d 7f       	andi	r24, 0xFD	; 253
    38bc:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    38be:	e8 e2       	ldi	r30, 0x28	; 40
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	80 e3       	ldi	r24, 0x30	; 48
    38c4:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    38c6:	a8 e2       	ldi	r26, 0x28	; 40
    38c8:	b0 e0       	ldi	r27, 0x00	; 0
    38ca:	e8 e2       	ldi	r30, 0x28	; 40
    38cc:	f0 e0       	ldi	r31, 0x00	; 0
    38ce:	80 81       	ld	r24, Z
    38d0:	84 60       	ori	r24, 0x04	; 4
    38d2:	8c 93       	st	X, r24
    38d4:	fe 01       	movw	r30, r28
    38d6:	ed 5b       	subi	r30, 0xBD	; 189
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	a0 ea       	ldi	r26, 0xA0	; 160
    38e0:	b0 e4       	ldi	r27, 0x40	; 64
    38e2:	80 83       	st	Z, r24
    38e4:	91 83       	std	Z+1, r25	; 0x01
    38e6:	a2 83       	std	Z+2, r26	; 0x02
    38e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ea:	8e 01       	movw	r16, r28
    38ec:	01 5c       	subi	r16, 0xC1	; 193
    38ee:	1f 4f       	sbci	r17, 0xFF	; 255
    38f0:	fe 01       	movw	r30, r28
    38f2:	ed 5b       	subi	r30, 0xBD	; 189
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	60 81       	ld	r22, Z
    38f8:	71 81       	ldd	r23, Z+1	; 0x01
    38fa:	82 81       	ldd	r24, Z+2	; 0x02
    38fc:	93 81       	ldd	r25, Z+3	; 0x03
    38fe:	2d ec       	ldi	r18, 0xCD	; 205
    3900:	3c ec       	ldi	r19, 0xCC	; 204
    3902:	4c e2       	ldi	r20, 0x2C	; 44
    3904:	55 e4       	ldi	r21, 0x45	; 69
    3906:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	f8 01       	movw	r30, r16
    3910:	80 83       	st	Z, r24
    3912:	91 83       	std	Z+1, r25	; 0x01
    3914:	a2 83       	std	Z+2, r26	; 0x02
    3916:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3918:	fe 01       	movw	r30, r28
    391a:	ff 96       	adiw	r30, 0x3f	; 63
    391c:	60 81       	ld	r22, Z
    391e:	71 81       	ldd	r23, Z+1	; 0x01
    3920:	82 81       	ldd	r24, Z+2	; 0x02
    3922:	93 81       	ldd	r25, Z+3	; 0x03
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e8       	ldi	r20, 0x80	; 128
    392a:	5f e3       	ldi	r21, 0x3F	; 63
    392c:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    3930:	88 23       	and	r24, r24
    3932:	2c f4       	brge	.+10     	; 0x393e <lcd_set_4bit+0x528>
		__ticks = 1;
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	9e af       	std	Y+62, r25	; 0x3e
    393a:	8d af       	std	Y+61, r24	; 0x3d
    393c:	46 c0       	rjmp	.+140    	; 0x39ca <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
    393e:	fe 01       	movw	r30, r28
    3940:	ff 96       	adiw	r30, 0x3f	; 63
    3942:	60 81       	ld	r22, Z
    3944:	71 81       	ldd	r23, Z+1	; 0x01
    3946:	82 81       	ldd	r24, Z+2	; 0x02
    3948:	93 81       	ldd	r25, Z+3	; 0x03
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	3f ef       	ldi	r19, 0xFF	; 255
    394e:	4f e7       	ldi	r20, 0x7F	; 127
    3950:	57 e4       	ldi	r21, 0x47	; 71
    3952:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    3956:	18 16       	cp	r1, r24
    3958:	64 f5       	brge	.+88     	; 0x39b2 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    395a:	fe 01       	movw	r30, r28
    395c:	ed 5b       	subi	r30, 0xBD	; 189
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	60 81       	ld	r22, Z
    3962:	71 81       	ldd	r23, Z+1	; 0x01
    3964:	82 81       	ldd	r24, Z+2	; 0x02
    3966:	93 81       	ldd	r25, Z+3	; 0x03
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	40 e2       	ldi	r20, 0x20	; 32
    396e:	51 e4       	ldi	r21, 0x41	; 65
    3970:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	bc 01       	movw	r22, r24
    397a:	cd 01       	movw	r24, r26
    397c:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    3980:	dc 01       	movw	r26, r24
    3982:	cb 01       	movw	r24, r22
    3984:	9e af       	std	Y+62, r25	; 0x3e
    3986:	8d af       	std	Y+61, r24	; 0x3d
    3988:	0f c0       	rjmp	.+30     	; 0x39a8 <lcd_set_4bit+0x592>
    398a:	84 e1       	ldi	r24, 0x14	; 20
    398c:	91 e0       	ldi	r25, 0x01	; 1
    398e:	9c af       	std	Y+60, r25	; 0x3c
    3990:	8b af       	std	Y+59, r24	; 0x3b
    3992:	8b ad       	ldd	r24, Y+59	; 0x3b
    3994:	9c ad       	ldd	r25, Y+60	; 0x3c
    3996:	01 97       	sbiw	r24, 0x01	; 1
    3998:	f1 f7       	brne	.-4      	; 0x3996 <lcd_set_4bit+0x580>
    399a:	9c af       	std	Y+60, r25	; 0x3c
    399c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    399e:	8d ad       	ldd	r24, Y+61	; 0x3d
    39a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    39a2:	01 97       	sbiw	r24, 0x01	; 1
    39a4:	9e af       	std	Y+62, r25	; 0x3e
    39a6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    39aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    39ac:	00 97       	sbiw	r24, 0x00	; 0
    39ae:	69 f7       	brne	.-38     	; 0x398a <lcd_set_4bit+0x574>
    39b0:	16 c0       	rjmp	.+44     	; 0x39de <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b2:	fe 01       	movw	r30, r28
    39b4:	ff 96       	adiw	r30, 0x3f	; 63
    39b6:	60 81       	ld	r22, Z
    39b8:	71 81       	ldd	r23, Z+1	; 0x01
    39ba:	82 81       	ldd	r24, Z+2	; 0x02
    39bc:	93 81       	ldd	r25, Z+3	; 0x03
    39be:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	9e af       	std	Y+62, r25	; 0x3e
    39c8:	8d af       	std	Y+61, r24	; 0x3d
    39ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    39cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    39ce:	9a af       	std	Y+58, r25	; 0x3a
    39d0:	89 af       	std	Y+57, r24	; 0x39
    39d2:	89 ad       	ldd	r24, Y+57	; 0x39
    39d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    39d6:	01 97       	sbiw	r24, 0x01	; 1
    39d8:	f1 f7       	brne	.-4      	; 0x39d6 <lcd_set_4bit+0x5c0>
    39da:	9a af       	std	Y+58, r25	; 0x3a
    39dc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    39de:	a8 e2       	ldi	r26, 0x28	; 40
    39e0:	b0 e0       	ldi	r27, 0x00	; 0
    39e2:	e8 e2       	ldi	r30, 0x28	; 40
    39e4:	f0 e0       	ldi	r31, 0x00	; 0
    39e6:	80 81       	ld	r24, Z
    39e8:	8b 7f       	andi	r24, 0xFB	; 251
    39ea:	8c 93       	st	X, r24
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	a0 e8       	ldi	r26, 0x80	; 128
    39f2:	bf e3       	ldi	r27, 0x3F	; 63
    39f4:	8d ab       	std	Y+53, r24	; 0x35
    39f6:	9e ab       	std	Y+54, r25	; 0x36
    39f8:	af ab       	std	Y+55, r26	; 0x37
    39fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39fc:	6d a9       	ldd	r22, Y+53	; 0x35
    39fe:	7e a9       	ldd	r23, Y+54	; 0x36
    3a00:	8f a9       	ldd	r24, Y+55	; 0x37
    3a02:	98 ad       	ldd	r25, Y+56	; 0x38
    3a04:	2d ec       	ldi	r18, 0xCD	; 205
    3a06:	3c ec       	ldi	r19, 0xCC	; 204
    3a08:	4c e2       	ldi	r20, 0x2C	; 44
    3a0a:	55 e4       	ldi	r21, 0x45	; 69
    3a0c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3a10:	dc 01       	movw	r26, r24
    3a12:	cb 01       	movw	r24, r22
    3a14:	89 ab       	std	Y+49, r24	; 0x31
    3a16:	9a ab       	std	Y+50, r25	; 0x32
    3a18:	ab ab       	std	Y+51, r26	; 0x33
    3a1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a1c:	69 a9       	ldd	r22, Y+49	; 0x31
    3a1e:	7a a9       	ldd	r23, Y+50	; 0x32
    3a20:	8b a9       	ldd	r24, Y+51	; 0x33
    3a22:	9c a9       	ldd	r25, Y+52	; 0x34
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	40 e8       	ldi	r20, 0x80	; 128
    3a2a:	5f e3       	ldi	r21, 0x3F	; 63
    3a2c:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    3a30:	88 23       	and	r24, r24
    3a32:	2c f4       	brge	.+10     	; 0x3a3e <lcd_set_4bit+0x628>
		__ticks = 1;
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	98 ab       	std	Y+48, r25	; 0x30
    3a3a:	8f a7       	std	Y+47, r24	; 0x2f
    3a3c:	3f c0       	rjmp	.+126    	; 0x3abc <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
    3a3e:	69 a9       	ldd	r22, Y+49	; 0x31
    3a40:	7a a9       	ldd	r23, Y+50	; 0x32
    3a42:	8b a9       	ldd	r24, Y+51	; 0x33
    3a44:	9c a9       	ldd	r25, Y+52	; 0x34
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	3f ef       	ldi	r19, 0xFF	; 255
    3a4a:	4f e7       	ldi	r20, 0x7F	; 127
    3a4c:	57 e4       	ldi	r21, 0x47	; 71
    3a4e:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    3a52:	18 16       	cp	r1, r24
    3a54:	4c f5       	brge	.+82     	; 0x3aa8 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a56:	6d a9       	ldd	r22, Y+53	; 0x35
    3a58:	7e a9       	ldd	r23, Y+54	; 0x36
    3a5a:	8f a9       	ldd	r24, Y+55	; 0x37
    3a5c:	98 ad       	ldd	r25, Y+56	; 0x38
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	40 e2       	ldi	r20, 0x20	; 32
    3a64:	51 e4       	ldi	r21, 0x41	; 65
    3a66:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	bc 01       	movw	r22, r24
    3a70:	cd 01       	movw	r24, r26
    3a72:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    3a76:	dc 01       	movw	r26, r24
    3a78:	cb 01       	movw	r24, r22
    3a7a:	98 ab       	std	Y+48, r25	; 0x30
    3a7c:	8f a7       	std	Y+47, r24	; 0x2f
    3a7e:	0f c0       	rjmp	.+30     	; 0x3a9e <lcd_set_4bit+0x688>
    3a80:	84 e1       	ldi	r24, 0x14	; 20
    3a82:	91 e0       	ldi	r25, 0x01	; 1
    3a84:	9e a7       	std	Y+46, r25	; 0x2e
    3a86:	8d a7       	std	Y+45, r24	; 0x2d
    3a88:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a8c:	01 97       	sbiw	r24, 0x01	; 1
    3a8e:	f1 f7       	brne	.-4      	; 0x3a8c <lcd_set_4bit+0x676>
    3a90:	9e a7       	std	Y+46, r25	; 0x2e
    3a92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a94:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a96:	98 a9       	ldd	r25, Y+48	; 0x30
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	98 ab       	std	Y+48, r25	; 0x30
    3a9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aa0:	98 a9       	ldd	r25, Y+48	; 0x30
    3aa2:	00 97       	sbiw	r24, 0x00	; 0
    3aa4:	69 f7       	brne	.-38     	; 0x3a80 <lcd_set_4bit+0x66a>
    3aa6:	14 c0       	rjmp	.+40     	; 0x3ad0 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa8:	69 a9       	ldd	r22, Y+49	; 0x31
    3aaa:	7a a9       	ldd	r23, Y+50	; 0x32
    3aac:	8b a9       	ldd	r24, Y+51	; 0x33
    3aae:	9c a9       	ldd	r25, Y+52	; 0x34
    3ab0:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	98 ab       	std	Y+48, r25	; 0x30
    3aba:	8f a7       	std	Y+47, r24	; 0x2f
    3abc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3abe:	98 a9       	ldd	r25, Y+48	; 0x30
    3ac0:	9c a7       	std	Y+44, r25	; 0x2c
    3ac2:	8b a7       	std	Y+43, r24	; 0x2b
    3ac4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ac6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ac8:	01 97       	sbiw	r24, 0x01	; 1
    3aca:	f1 f7       	brne	.-4      	; 0x3ac8 <lcd_set_4bit+0x6b2>
    3acc:	9c a7       	std	Y+44, r25	; 0x2c
    3ace:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    3ad0:	a8 e2       	ldi	r26, 0x28	; 40
    3ad2:	b0 e0       	ldi	r27, 0x00	; 0
    3ad4:	e8 e2       	ldi	r30, 0x28	; 40
    3ad6:	f0 e0       	ldi	r31, 0x00	; 0
    3ad8:	80 81       	ld	r24, Z
    3ada:	8e 7f       	andi	r24, 0xFE	; 254
    3adc:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    3ade:	a8 e2       	ldi	r26, 0x28	; 40
    3ae0:	b0 e0       	ldi	r27, 0x00	; 0
    3ae2:	e8 e2       	ldi	r30, 0x28	; 40
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	80 81       	ld	r24, Z
    3ae8:	8d 7f       	andi	r24, 0xFD	; 253
    3aea:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    3aec:	e8 e2       	ldi	r30, 0x28	; 40
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	80 e3       	ldi	r24, 0x30	; 48
    3af2:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    3af4:	a8 e2       	ldi	r26, 0x28	; 40
    3af6:	b0 e0       	ldi	r27, 0x00	; 0
    3af8:	e8 e2       	ldi	r30, 0x28	; 40
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	80 81       	ld	r24, Z
    3afe:	84 60       	ori	r24, 0x04	; 4
    3b00:	8c 93       	st	X, r24
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	a0 ea       	ldi	r26, 0xA0	; 160
    3b08:	b0 e4       	ldi	r27, 0x40	; 64
    3b0a:	8f a3       	std	Y+39, r24	; 0x27
    3b0c:	98 a7       	std	Y+40, r25	; 0x28
    3b0e:	a9 a7       	std	Y+41, r26	; 0x29
    3b10:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b12:	6f a1       	ldd	r22, Y+39	; 0x27
    3b14:	78 a5       	ldd	r23, Y+40	; 0x28
    3b16:	89 a5       	ldd	r24, Y+41	; 0x29
    3b18:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b1a:	2d ec       	ldi	r18, 0xCD	; 205
    3b1c:	3c ec       	ldi	r19, 0xCC	; 204
    3b1e:	4c e2       	ldi	r20, 0x2C	; 44
    3b20:	55 e4       	ldi	r21, 0x45	; 69
    3b22:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	8b a3       	std	Y+35, r24	; 0x23
    3b2c:	9c a3       	std	Y+36, r25	; 0x24
    3b2e:	ad a3       	std	Y+37, r26	; 0x25
    3b30:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b32:	6b a1       	ldd	r22, Y+35	; 0x23
    3b34:	7c a1       	ldd	r23, Y+36	; 0x24
    3b36:	8d a1       	ldd	r24, Y+37	; 0x25
    3b38:	9e a1       	ldd	r25, Y+38	; 0x26
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	40 e8       	ldi	r20, 0x80	; 128
    3b40:	5f e3       	ldi	r21, 0x3F	; 63
    3b42:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    3b46:	88 23       	and	r24, r24
    3b48:	2c f4       	brge	.+10     	; 0x3b54 <lcd_set_4bit+0x73e>
		__ticks = 1;
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	9a a3       	std	Y+34, r25	; 0x22
    3b50:	89 a3       	std	Y+33, r24	; 0x21
    3b52:	3f c0       	rjmp	.+126    	; 0x3bd2 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
    3b54:	6b a1       	ldd	r22, Y+35	; 0x23
    3b56:	7c a1       	ldd	r23, Y+36	; 0x24
    3b58:	8d a1       	ldd	r24, Y+37	; 0x25
    3b5a:	9e a1       	ldd	r25, Y+38	; 0x26
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	3f ef       	ldi	r19, 0xFF	; 255
    3b60:	4f e7       	ldi	r20, 0x7F	; 127
    3b62:	57 e4       	ldi	r21, 0x47	; 71
    3b64:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    3b68:	18 16       	cp	r1, r24
    3b6a:	4c f5       	brge	.+82     	; 0x3bbe <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b6c:	6f a1       	ldd	r22, Y+39	; 0x27
    3b6e:	78 a5       	ldd	r23, Y+40	; 0x28
    3b70:	89 a5       	ldd	r24, Y+41	; 0x29
    3b72:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	40 e2       	ldi	r20, 0x20	; 32
    3b7a:	51 e4       	ldi	r21, 0x41	; 65
    3b7c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3b80:	dc 01       	movw	r26, r24
    3b82:	cb 01       	movw	r24, r22
    3b84:	bc 01       	movw	r22, r24
    3b86:	cd 01       	movw	r24, r26
    3b88:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	9a a3       	std	Y+34, r25	; 0x22
    3b92:	89 a3       	std	Y+33, r24	; 0x21
    3b94:	0f c0       	rjmp	.+30     	; 0x3bb4 <lcd_set_4bit+0x79e>
    3b96:	84 e1       	ldi	r24, 0x14	; 20
    3b98:	91 e0       	ldi	r25, 0x01	; 1
    3b9a:	98 a3       	std	Y+32, r25	; 0x20
    3b9c:	8f 8f       	std	Y+31, r24	; 0x1f
    3b9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ba0:	98 a1       	ldd	r25, Y+32	; 0x20
    3ba2:	01 97       	sbiw	r24, 0x01	; 1
    3ba4:	f1 f7       	brne	.-4      	; 0x3ba2 <lcd_set_4bit+0x78c>
    3ba6:	98 a3       	std	Y+32, r25	; 0x20
    3ba8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3baa:	89 a1       	ldd	r24, Y+33	; 0x21
    3bac:	9a a1       	ldd	r25, Y+34	; 0x22
    3bae:	01 97       	sbiw	r24, 0x01	; 1
    3bb0:	9a a3       	std	Y+34, r25	; 0x22
    3bb2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb4:	89 a1       	ldd	r24, Y+33	; 0x21
    3bb6:	9a a1       	ldd	r25, Y+34	; 0x22
    3bb8:	00 97       	sbiw	r24, 0x00	; 0
    3bba:	69 f7       	brne	.-38     	; 0x3b96 <lcd_set_4bit+0x780>
    3bbc:	14 c0       	rjmp	.+40     	; 0x3be6 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bbe:	6b a1       	ldd	r22, Y+35	; 0x23
    3bc0:	7c a1       	ldd	r23, Y+36	; 0x24
    3bc2:	8d a1       	ldd	r24, Y+37	; 0x25
    3bc4:	9e a1       	ldd	r25, Y+38	; 0x26
    3bc6:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	9a a3       	std	Y+34, r25	; 0x22
    3bd0:	89 a3       	std	Y+33, r24	; 0x21
    3bd2:	89 a1       	ldd	r24, Y+33	; 0x21
    3bd4:	9a a1       	ldd	r25, Y+34	; 0x22
    3bd6:	9e 8f       	std	Y+30, r25	; 0x1e
    3bd8:	8d 8f       	std	Y+29, r24	; 0x1d
    3bda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bdc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bde:	01 97       	sbiw	r24, 0x01	; 1
    3be0:	f1 f7       	brne	.-4      	; 0x3bde <lcd_set_4bit+0x7c8>
    3be2:	9e 8f       	std	Y+30, r25	; 0x1e
    3be4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    3be6:	a8 e2       	ldi	r26, 0x28	; 40
    3be8:	b0 e0       	ldi	r27, 0x00	; 0
    3bea:	e8 e2       	ldi	r30, 0x28	; 40
    3bec:	f0 e0       	ldi	r31, 0x00	; 0
    3bee:	80 81       	ld	r24, Z
    3bf0:	8b 7f       	andi	r24, 0xFB	; 251
    3bf2:	8c 93       	st	X, r24
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	a0 e8       	ldi	r26, 0x80	; 128
    3bfa:	bf e3       	ldi	r27, 0x3F	; 63
    3bfc:	89 8f       	std	Y+25, r24	; 0x19
    3bfe:	9a 8f       	std	Y+26, r25	; 0x1a
    3c00:	ab 8f       	std	Y+27, r26	; 0x1b
    3c02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c04:	69 8d       	ldd	r22, Y+25	; 0x19
    3c06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c0c:	2d ec       	ldi	r18, 0xCD	; 205
    3c0e:	3c ec       	ldi	r19, 0xCC	; 204
    3c10:	4c e2       	ldi	r20, 0x2C	; 44
    3c12:	55 e4       	ldi	r21, 0x45	; 69
    3c14:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	8d 8b       	std	Y+21, r24	; 0x15
    3c1e:	9e 8b       	std	Y+22, r25	; 0x16
    3c20:	af 8b       	std	Y+23, r26	; 0x17
    3c22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c24:	6d 89       	ldd	r22, Y+21	; 0x15
    3c26:	7e 89       	ldd	r23, Y+22	; 0x16
    3c28:	8f 89       	ldd	r24, Y+23	; 0x17
    3c2a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	40 e8       	ldi	r20, 0x80	; 128
    3c32:	5f e3       	ldi	r21, 0x3F	; 63
    3c34:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    3c38:	88 23       	and	r24, r24
    3c3a:	2c f4       	brge	.+10     	; 0x3c46 <lcd_set_4bit+0x830>
		__ticks = 1;
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	9c 8b       	std	Y+20, r25	; 0x14
    3c42:	8b 8b       	std	Y+19, r24	; 0x13
    3c44:	3f c0       	rjmp	.+126    	; 0x3cc4 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
    3c46:	6d 89       	ldd	r22, Y+21	; 0x15
    3c48:	7e 89       	ldd	r23, Y+22	; 0x16
    3c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	3f ef       	ldi	r19, 0xFF	; 255
    3c52:	4f e7       	ldi	r20, 0x7F	; 127
    3c54:	57 e4       	ldi	r21, 0x47	; 71
    3c56:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    3c5a:	18 16       	cp	r1, r24
    3c5c:	4c f5       	brge	.+82     	; 0x3cb0 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c5e:	69 8d       	ldd	r22, Y+25	; 0x19
    3c60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	40 e2       	ldi	r20, 0x20	; 32
    3c6c:	51 e4       	ldi	r21, 0x41	; 65
    3c6e:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	bc 01       	movw	r22, r24
    3c78:	cd 01       	movw	r24, r26
    3c7a:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	9c 8b       	std	Y+20, r25	; 0x14
    3c84:	8b 8b       	std	Y+19, r24	; 0x13
    3c86:	0f c0       	rjmp	.+30     	; 0x3ca6 <lcd_set_4bit+0x890>
    3c88:	84 e1       	ldi	r24, 0x14	; 20
    3c8a:	91 e0       	ldi	r25, 0x01	; 1
    3c8c:	9a 8b       	std	Y+18, r25	; 0x12
    3c8e:	89 8b       	std	Y+17, r24	; 0x11
    3c90:	89 89       	ldd	r24, Y+17	; 0x11
    3c92:	9a 89       	ldd	r25, Y+18	; 0x12
    3c94:	01 97       	sbiw	r24, 0x01	; 1
    3c96:	f1 f7       	brne	.-4      	; 0x3c94 <lcd_set_4bit+0x87e>
    3c98:	9a 8b       	std	Y+18, r25	; 0x12
    3c9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    3ca0:	01 97       	sbiw	r24, 0x01	; 1
    3ca2:	9c 8b       	std	Y+20, r25	; 0x14
    3ca4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ca8:	9c 89       	ldd	r25, Y+20	; 0x14
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	69 f7       	brne	.-38     	; 0x3c88 <lcd_set_4bit+0x872>
    3cae:	14 c0       	rjmp	.+40     	; 0x3cd8 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb0:	6d 89       	ldd	r22, Y+21	; 0x15
    3cb2:	7e 89       	ldd	r23, Y+22	; 0x16
    3cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    3cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    3cb8:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	9c 8b       	std	Y+20, r25	; 0x14
    3cc2:	8b 8b       	std	Y+19, r24	; 0x13
    3cc4:	8b 89       	ldd	r24, Y+19	; 0x13
    3cc6:	9c 89       	ldd	r25, Y+20	; 0x14
    3cc8:	98 8b       	std	Y+16, r25	; 0x10
    3cca:	8f 87       	std	Y+15, r24	; 0x0f
    3ccc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cce:	98 89       	ldd	r25, Y+16	; 0x10
    3cd0:	01 97       	sbiw	r24, 0x01	; 1
    3cd2:	f1 f7       	brne	.-4      	; 0x3cd0 <lcd_set_4bit+0x8ba>
    3cd4:	98 8b       	std	Y+16, r25	; 0x10
    3cd6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    3cd8:	a8 e2       	ldi	r26, 0x28	; 40
    3cda:	b0 e0       	ldi	r27, 0x00	; 0
    3cdc:	e8 e2       	ldi	r30, 0x28	; 40
    3cde:	f0 e0       	ldi	r31, 0x00	; 0
    3ce0:	80 81       	ld	r24, Z
    3ce2:	8e 7f       	andi	r24, 0xFE	; 254
    3ce4:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    3ce6:	a8 e2       	ldi	r26, 0x28	; 40
    3ce8:	b0 e0       	ldi	r27, 0x00	; 0
    3cea:	e8 e2       	ldi	r30, 0x28	; 40
    3cec:	f0 e0       	ldi	r31, 0x00	; 0
    3cee:	80 81       	ld	r24, Z
    3cf0:	8d 7f       	andi	r24, 0xFD	; 253
    3cf2:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
    3cf4:	e8 e2       	ldi	r30, 0x28	; 40
    3cf6:	f0 e0       	ldi	r31, 0x00	; 0
    3cf8:	80 e2       	ldi	r24, 0x20	; 32
    3cfa:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    3cfc:	a8 e2       	ldi	r26, 0x28	; 40
    3cfe:	b0 e0       	ldi	r27, 0x00	; 0
    3d00:	e8 e2       	ldi	r30, 0x28	; 40
    3d02:	f0 e0       	ldi	r31, 0x00	; 0
    3d04:	80 81       	ld	r24, Z
    3d06:	84 60       	ori	r24, 0x04	; 4
    3d08:	8c 93       	st	X, r24
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	a0 ea       	ldi	r26, 0xA0	; 160
    3d10:	b0 e4       	ldi	r27, 0x40	; 64
    3d12:	8b 87       	std	Y+11, r24	; 0x0b
    3d14:	9c 87       	std	Y+12, r25	; 0x0c
    3d16:	ad 87       	std	Y+13, r26	; 0x0d
    3d18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d22:	2d ec       	ldi	r18, 0xCD	; 205
    3d24:	3c ec       	ldi	r19, 0xCC	; 204
    3d26:	4c e2       	ldi	r20, 0x2C	; 44
    3d28:	55 e4       	ldi	r21, 0x45	; 69
    3d2a:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	8f 83       	std	Y+7, r24	; 0x07
    3d34:	98 87       	std	Y+8, r25	; 0x08
    3d36:	a9 87       	std	Y+9, r26	; 0x09
    3d38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d3c:	78 85       	ldd	r23, Y+8	; 0x08
    3d3e:	89 85       	ldd	r24, Y+9	; 0x09
    3d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	40 e8       	ldi	r20, 0x80	; 128
    3d48:	5f e3       	ldi	r21, 0x3F	; 63
    3d4a:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    3d4e:	88 23       	and	r24, r24
    3d50:	2c f4       	brge	.+10     	; 0x3d5c <lcd_set_4bit+0x946>
		__ticks = 1;
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	9e 83       	std	Y+6, r25	; 0x06
    3d58:	8d 83       	std	Y+5, r24	; 0x05
    3d5a:	3f c0       	rjmp	.+126    	; 0x3dda <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
    3d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d5e:	78 85       	ldd	r23, Y+8	; 0x08
    3d60:	89 85       	ldd	r24, Y+9	; 0x09
    3d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	3f ef       	ldi	r19, 0xFF	; 255
    3d68:	4f e7       	ldi	r20, 0x7F	; 127
    3d6a:	57 e4       	ldi	r21, 0x47	; 71
    3d6c:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    3d70:	18 16       	cp	r1, r24
    3d72:	4c f5       	brge	.+82     	; 0x3dc6 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d74:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d76:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	40 e2       	ldi	r20, 0x20	; 32
    3d82:	51 e4       	ldi	r21, 0x41	; 65
    3d84:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3d88:	dc 01       	movw	r26, r24
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	bc 01       	movw	r22, r24
    3d8e:	cd 01       	movw	r24, r26
    3d90:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	9e 83       	std	Y+6, r25	; 0x06
    3d9a:	8d 83       	std	Y+5, r24	; 0x05
    3d9c:	0f c0       	rjmp	.+30     	; 0x3dbc <lcd_set_4bit+0x9a6>
    3d9e:	84 e1       	ldi	r24, 0x14	; 20
    3da0:	91 e0       	ldi	r25, 0x01	; 1
    3da2:	9c 83       	std	Y+4, r25	; 0x04
    3da4:	8b 83       	std	Y+3, r24	; 0x03
    3da6:	8b 81       	ldd	r24, Y+3	; 0x03
    3da8:	9c 81       	ldd	r25, Y+4	; 0x04
    3daa:	01 97       	sbiw	r24, 0x01	; 1
    3dac:	f1 f7       	brne	.-4      	; 0x3daa <lcd_set_4bit+0x994>
    3dae:	9c 83       	std	Y+4, r25	; 0x04
    3db0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db2:	8d 81       	ldd	r24, Y+5	; 0x05
    3db4:	9e 81       	ldd	r25, Y+6	; 0x06
    3db6:	01 97       	sbiw	r24, 0x01	; 1
    3db8:	9e 83       	std	Y+6, r25	; 0x06
    3dba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc0:	00 97       	sbiw	r24, 0x00	; 0
    3dc2:	69 f7       	brne	.-38     	; 0x3d9e <lcd_set_4bit+0x988>
    3dc4:	14 c0       	rjmp	.+40     	; 0x3dee <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc8:	78 85       	ldd	r23, Y+8	; 0x08
    3dca:	89 85       	ldd	r24, Y+9	; 0x09
    3dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dce:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	9e 83       	std	Y+6, r25	; 0x06
    3dd8:	8d 83       	std	Y+5, r24	; 0x05
    3dda:	8d 81       	ldd	r24, Y+5	; 0x05
    3ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    3dde:	9a 83       	std	Y+2, r25	; 0x02
    3de0:	89 83       	std	Y+1, r24	; 0x01
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	9a 81       	ldd	r25, Y+2	; 0x02
    3de6:	01 97       	sbiw	r24, 0x01	; 1
    3de8:	f1 f7       	brne	.-4      	; 0x3de6 <lcd_set_4bit+0x9d0>
    3dea:	9a 83       	std	Y+2, r25	; 0x02
    3dec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    3dee:	a8 e2       	ldi	r26, 0x28	; 40
    3df0:	b0 e0       	ldi	r27, 0x00	; 0
    3df2:	e8 e2       	ldi	r30, 0x28	; 40
    3df4:	f0 e0       	ldi	r31, 0x00	; 0
    3df6:	80 81       	ld	r24, Z
    3df8:	8b 7f       	andi	r24, 0xFB	; 251
    3dfa:	8c 93       	st	X, r24

	
}
    3dfc:	c0 59       	subi	r28, 0x90	; 144
    3dfe:	df 4f       	sbci	r29, 0xFF	; 255
    3e00:	0f b6       	in	r0, 0x3f	; 63
    3e02:	f8 94       	cli
    3e04:	de bf       	out	0x3e, r29	; 62
    3e06:	0f be       	out	0x3f, r0	; 63
    3e08:	cd bf       	out	0x3d, r28	; 61
    3e0a:	cf 91       	pop	r28
    3e0c:	df 91       	pop	r29
    3e0e:	1f 91       	pop	r17
    3e10:	0f 91       	pop	r16
    3e12:	08 95       	ret

00003e14 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
    3e14:	df 93       	push	r29
    3e16:	cf 93       	push	r28
    3e18:	cd b7       	in	r28, 0x3d	; 61
    3e1a:	de b7       	in	r29, 0x3e	; 62
    3e1c:	2e 97       	sbiw	r28, 0x0e	; 14
    3e1e:	0f b6       	in	r0, 0x3f	; 63
    3e20:	f8 94       	cli
    3e22:	de bf       	out	0x3e, r29	; 62
    3e24:	0f be       	out	0x3f, r0	; 63
    3e26:	cd bf       	out	0x3d, r28	; 61
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	a0 e8       	ldi	r26, 0x80	; 128
    3e2e:	bf e3       	ldi	r27, 0x3F	; 63
    3e30:	8b 87       	std	Y+11, r24	; 0x0b
    3e32:	9c 87       	std	Y+12, r25	; 0x0c
    3e34:	ad 87       	std	Y+13, r26	; 0x0d
    3e36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e38:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e40:	2d ec       	ldi	r18, 0xCD	; 205
    3e42:	3c ec       	ldi	r19, 0xCC	; 204
    3e44:	4c e2       	ldi	r20, 0x2C	; 44
    3e46:	55 e4       	ldi	r21, 0x45	; 69
    3e48:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22
    3e50:	8f 83       	std	Y+7, r24	; 0x07
    3e52:	98 87       	std	Y+8, r25	; 0x08
    3e54:	a9 87       	std	Y+9, r26	; 0x09
    3e56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e58:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5a:	78 85       	ldd	r23, Y+8	; 0x08
    3e5c:	89 85       	ldd	r24, Y+9	; 0x09
    3e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	40 e8       	ldi	r20, 0x80	; 128
    3e66:	5f e3       	ldi	r21, 0x3F	; 63
    3e68:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    3e6c:	88 23       	and	r24, r24
    3e6e:	2c f4       	brge	.+10     	; 0x3e7a <lcd_init+0x66>
		__ticks = 1;
    3e70:	81 e0       	ldi	r24, 0x01	; 1
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	9e 83       	std	Y+6, r25	; 0x06
    3e76:	8d 83       	std	Y+5, r24	; 0x05
    3e78:	3f c0       	rjmp	.+126    	; 0x3ef8 <lcd_init+0xe4>
	else if (__tmp > 65535)
    3e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e7c:	78 85       	ldd	r23, Y+8	; 0x08
    3e7e:	89 85       	ldd	r24, Y+9	; 0x09
    3e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	3f ef       	ldi	r19, 0xFF	; 255
    3e86:	4f e7       	ldi	r20, 0x7F	; 127
    3e88:	57 e4       	ldi	r21, 0x47	; 71
    3e8a:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    3e8e:	18 16       	cp	r1, r24
    3e90:	4c f5       	brge	.+82     	; 0x3ee4 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e92:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e94:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	40 e2       	ldi	r20, 0x20	; 32
    3ea0:	51 e4       	ldi	r21, 0x41	; 65
    3ea2:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3ea6:	dc 01       	movw	r26, r24
    3ea8:	cb 01       	movw	r24, r22
    3eaa:	bc 01       	movw	r22, r24
    3eac:	cd 01       	movw	r24, r26
    3eae:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	9e 83       	std	Y+6, r25	; 0x06
    3eb8:	8d 83       	std	Y+5, r24	; 0x05
    3eba:	0f c0       	rjmp	.+30     	; 0x3eda <lcd_init+0xc6>
    3ebc:	84 e1       	ldi	r24, 0x14	; 20
    3ebe:	91 e0       	ldi	r25, 0x01	; 1
    3ec0:	9c 83       	std	Y+4, r25	; 0x04
    3ec2:	8b 83       	std	Y+3, r24	; 0x03
    3ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ec8:	01 97       	sbiw	r24, 0x01	; 1
    3eca:	f1 f7       	brne	.-4      	; 0x3ec8 <lcd_init+0xb4>
    3ecc:	9c 83       	std	Y+4, r25	; 0x04
    3ece:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed4:	01 97       	sbiw	r24, 0x01	; 1
    3ed6:	9e 83       	std	Y+6, r25	; 0x06
    3ed8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eda:	8d 81       	ldd	r24, Y+5	; 0x05
    3edc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ede:	00 97       	sbiw	r24, 0x00	; 0
    3ee0:	69 f7       	brne	.-38     	; 0x3ebc <lcd_init+0xa8>
    3ee2:	14 c0       	rjmp	.+40     	; 0x3f0c <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee6:	78 85       	ldd	r23, Y+8	; 0x08
    3ee8:	89 85       	ldd	r24, Y+9	; 0x09
    3eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eec:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	cb 01       	movw	r24, r22
    3ef4:	9e 83       	std	Y+6, r25	; 0x06
    3ef6:	8d 83       	std	Y+5, r24	; 0x05
    3ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    3efa:	9e 81       	ldd	r25, Y+6	; 0x06
    3efc:	9a 83       	std	Y+2, r25	; 0x02
    3efe:	89 83       	std	Y+1, r24	; 0x01
    3f00:	89 81       	ldd	r24, Y+1	; 0x01
    3f02:	9a 81       	ldd	r25, Y+2	; 0x02
    3f04:	01 97       	sbiw	r24, 0x01	; 1
    3f06:	f1 f7       	brne	.-4      	; 0x3f04 <lcd_init+0xf0>
    3f08:	9a 83       	std	Y+2, r25	; 0x02
    3f0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    3f0c:	88 e2       	ldi	r24, 0x28	; 40
    3f0e:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <lcd_wr_command>
	lcd_wr_command(0x01);
    3f12:	81 e0       	ldi	r24, 0x01	; 1
    3f14:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <lcd_wr_command>
	lcd_wr_command(0x06);
    3f18:	86 e0       	ldi	r24, 0x06	; 6
    3f1a:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <lcd_wr_command>
	lcd_wr_command(0x0E);
    3f1e:	8e e0       	ldi	r24, 0x0E	; 14
    3f20:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <lcd_wr_command>
	lcd_wr_command(0x80);
    3f24:	80 e8       	ldi	r24, 0x80	; 128
    3f26:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <lcd_wr_command>
		
}
    3f2a:	2e 96       	adiw	r28, 0x0e	; 14
    3f2c:	0f b6       	in	r0, 0x3f	; 63
    3f2e:	f8 94       	cli
    3f30:	de bf       	out	0x3e, r29	; 62
    3f32:	0f be       	out	0x3f, r0	; 63
    3f34:	cd bf       	out	0x3d, r28	; 61
    3f36:	cf 91       	pop	r28
    3f38:	df 91       	pop	r29
    3f3a:	08 95       	ret

00003f3c <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
    3f3c:	df 93       	push	r29
    3f3e:	cf 93       	push	r28
    3f40:	cd b7       	in	r28, 0x3d	; 61
    3f42:	de b7       	in	r29, 0x3e	; 62
    3f44:	6e 97       	sbiw	r28, 0x1e	; 30
    3f46:	0f b6       	in	r0, 0x3f	; 63
    3f48:	f8 94       	cli
    3f4a:	de bf       	out	0x3e, r29	; 62
    3f4c:	0f be       	out	0x3f, r0	; 63
    3f4e:	cd bf       	out	0x3d, r28	; 61
    3f50:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    3f52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f54:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    3f56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f58:	80 7f       	andi	r24, 0xF0	; 240
    3f5a:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    3f5c:	a8 e2       	ldi	r26, 0x28	; 40
    3f5e:	b0 e0       	ldi	r27, 0x00	; 0
    3f60:	e8 e2       	ldi	r30, 0x28	; 40
    3f62:	f0 e0       	ldi	r31, 0x00	; 0
    3f64:	80 81       	ld	r24, Z
    3f66:	8f 70       	andi	r24, 0x0F	; 15
    3f68:	8c 93       	st	X, r24
	lcd_port |= temp;
    3f6a:	a8 e2       	ldi	r26, 0x28	; 40
    3f6c:	b0 e0       	ldi	r27, 0x00	; 0
    3f6e:	e8 e2       	ldi	r30, 0x28	; 40
    3f70:	f0 e0       	ldi	r31, 0x00	; 0
    3f72:	90 81       	ld	r25, Z
    3f74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f76:	89 2b       	or	r24, r25
    3f78:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    3f7a:	a8 e2       	ldi	r26, 0x28	; 40
    3f7c:	b0 e0       	ldi	r27, 0x00	; 0
    3f7e:	e8 e2       	ldi	r30, 0x28	; 40
    3f80:	f0 e0       	ldi	r31, 0x00	; 0
    3f82:	80 81       	ld	r24, Z
    3f84:	8e 7f       	andi	r24, 0xFE	; 254
    3f86:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    3f88:	a8 e2       	ldi	r26, 0x28	; 40
    3f8a:	b0 e0       	ldi	r27, 0x00	; 0
    3f8c:	e8 e2       	ldi	r30, 0x28	; 40
    3f8e:	f0 e0       	ldi	r31, 0x00	; 0
    3f90:	80 81       	ld	r24, Z
    3f92:	8d 7f       	andi	r24, 0xFD	; 253
    3f94:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    3f96:	a8 e2       	ldi	r26, 0x28	; 40
    3f98:	b0 e0       	ldi	r27, 0x00	; 0
    3f9a:	e8 e2       	ldi	r30, 0x28	; 40
    3f9c:	f0 e0       	ldi	r31, 0x00	; 0
    3f9e:	80 81       	ld	r24, Z
    3fa0:	84 60       	ori	r24, 0x04	; 4
    3fa2:	8c 93       	st	X, r24
    3fa4:	80 e0       	ldi	r24, 0x00	; 0
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	a0 ea       	ldi	r26, 0xA0	; 160
    3faa:	b0 e4       	ldi	r27, 0x40	; 64
    3fac:	89 8f       	std	Y+25, r24	; 0x19
    3fae:	9a 8f       	std	Y+26, r25	; 0x1a
    3fb0:	ab 8f       	std	Y+27, r26	; 0x1b
    3fb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fb4:	69 8d       	ldd	r22, Y+25	; 0x19
    3fb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fbc:	2d ec       	ldi	r18, 0xCD	; 205
    3fbe:	3c ec       	ldi	r19, 0xCC	; 204
    3fc0:	4c e2       	ldi	r20, 0x2C	; 44
    3fc2:	55 e4       	ldi	r21, 0x45	; 69
    3fc4:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	8d 8b       	std	Y+21, r24	; 0x15
    3fce:	9e 8b       	std	Y+22, r25	; 0x16
    3fd0:	af 8b       	std	Y+23, r26	; 0x17
    3fd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    3fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    3fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    3fda:	98 8d       	ldd	r25, Y+24	; 0x18
    3fdc:	20 e0       	ldi	r18, 0x00	; 0
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	40 e8       	ldi	r20, 0x80	; 128
    3fe2:	5f e3       	ldi	r21, 0x3F	; 63
    3fe4:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    3fe8:	88 23       	and	r24, r24
    3fea:	2c f4       	brge	.+10     	; 0x3ff6 <lcd_wr_command+0xba>
		__ticks = 1;
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	9c 8b       	std	Y+20, r25	; 0x14
    3ff2:	8b 8b       	std	Y+19, r24	; 0x13
    3ff4:	3f c0       	rjmp	.+126    	; 0x4074 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    3ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    3ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    3ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    3ffe:	20 e0       	ldi	r18, 0x00	; 0
    4000:	3f ef       	ldi	r19, 0xFF	; 255
    4002:	4f e7       	ldi	r20, 0x7F	; 127
    4004:	57 e4       	ldi	r21, 0x47	; 71
    4006:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    400a:	18 16       	cp	r1, r24
    400c:	4c f5       	brge	.+82     	; 0x4060 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    400e:	69 8d       	ldd	r22, Y+25	; 0x19
    4010:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4012:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4014:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4016:	20 e0       	ldi	r18, 0x00	; 0
    4018:	30 e0       	ldi	r19, 0x00	; 0
    401a:	40 e2       	ldi	r20, 0x20	; 32
    401c:	51 e4       	ldi	r21, 0x41	; 65
    401e:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    4022:	dc 01       	movw	r26, r24
    4024:	cb 01       	movw	r24, r22
    4026:	bc 01       	movw	r22, r24
    4028:	cd 01       	movw	r24, r26
    402a:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    402e:	dc 01       	movw	r26, r24
    4030:	cb 01       	movw	r24, r22
    4032:	9c 8b       	std	Y+20, r25	; 0x14
    4034:	8b 8b       	std	Y+19, r24	; 0x13
    4036:	0f c0       	rjmp	.+30     	; 0x4056 <lcd_wr_command+0x11a>
    4038:	84 e1       	ldi	r24, 0x14	; 20
    403a:	91 e0       	ldi	r25, 0x01	; 1
    403c:	9a 8b       	std	Y+18, r25	; 0x12
    403e:	89 8b       	std	Y+17, r24	; 0x11
    4040:	89 89       	ldd	r24, Y+17	; 0x11
    4042:	9a 89       	ldd	r25, Y+18	; 0x12
    4044:	01 97       	sbiw	r24, 0x01	; 1
    4046:	f1 f7       	brne	.-4      	; 0x4044 <lcd_wr_command+0x108>
    4048:	9a 8b       	std	Y+18, r25	; 0x12
    404a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    404c:	8b 89       	ldd	r24, Y+19	; 0x13
    404e:	9c 89       	ldd	r25, Y+20	; 0x14
    4050:	01 97       	sbiw	r24, 0x01	; 1
    4052:	9c 8b       	std	Y+20, r25	; 0x14
    4054:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4056:	8b 89       	ldd	r24, Y+19	; 0x13
    4058:	9c 89       	ldd	r25, Y+20	; 0x14
    405a:	00 97       	sbiw	r24, 0x00	; 0
    405c:	69 f7       	brne	.-38     	; 0x4038 <lcd_wr_command+0xfc>
    405e:	14 c0       	rjmp	.+40     	; 0x4088 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4060:	6d 89       	ldd	r22, Y+21	; 0x15
    4062:	7e 89       	ldd	r23, Y+22	; 0x16
    4064:	8f 89       	ldd	r24, Y+23	; 0x17
    4066:	98 8d       	ldd	r25, Y+24	; 0x18
    4068:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	9c 8b       	std	Y+20, r25	; 0x14
    4072:	8b 8b       	std	Y+19, r24	; 0x13
    4074:	8b 89       	ldd	r24, Y+19	; 0x13
    4076:	9c 89       	ldd	r25, Y+20	; 0x14
    4078:	98 8b       	std	Y+16, r25	; 0x10
    407a:	8f 87       	std	Y+15, r24	; 0x0f
    407c:	8f 85       	ldd	r24, Y+15	; 0x0f
    407e:	98 89       	ldd	r25, Y+16	; 0x10
    4080:	01 97       	sbiw	r24, 0x01	; 1
    4082:	f1 f7       	brne	.-4      	; 0x4080 <lcd_wr_command+0x144>
    4084:	98 8b       	std	Y+16, r25	; 0x10
    4086:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    4088:	a8 e2       	ldi	r26, 0x28	; 40
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	e8 e2       	ldi	r30, 0x28	; 40
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	80 81       	ld	r24, Z
    4092:	8b 7f       	andi	r24, 0xFB	; 251
    4094:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
    4096:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4098:	8f 70       	andi	r24, 0x0F	; 15
    409a:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    409c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    409e:	82 95       	swap	r24
    40a0:	80 7f       	andi	r24, 0xF0	; 240
    40a2:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    40a4:	a8 e2       	ldi	r26, 0x28	; 40
    40a6:	b0 e0       	ldi	r27, 0x00	; 0
    40a8:	e8 e2       	ldi	r30, 0x28	; 40
    40aa:	f0 e0       	ldi	r31, 0x00	; 0
    40ac:	80 81       	ld	r24, Z
    40ae:	8f 70       	andi	r24, 0x0F	; 15
    40b0:	8c 93       	st	X, r24
	lcd_port |= cmd;
    40b2:	a8 e2       	ldi	r26, 0x28	; 40
    40b4:	b0 e0       	ldi	r27, 0x00	; 0
    40b6:	e8 e2       	ldi	r30, 0x28	; 40
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	90 81       	ld	r25, Z
    40bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    40be:	89 2b       	or	r24, r25
    40c0:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    40c2:	a8 e2       	ldi	r26, 0x28	; 40
    40c4:	b0 e0       	ldi	r27, 0x00	; 0
    40c6:	e8 e2       	ldi	r30, 0x28	; 40
    40c8:	f0 e0       	ldi	r31, 0x00	; 0
    40ca:	80 81       	ld	r24, Z
    40cc:	8e 7f       	andi	r24, 0xFE	; 254
    40ce:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    40d0:	a8 e2       	ldi	r26, 0x28	; 40
    40d2:	b0 e0       	ldi	r27, 0x00	; 0
    40d4:	e8 e2       	ldi	r30, 0x28	; 40
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	80 81       	ld	r24, Z
    40da:	8d 7f       	andi	r24, 0xFD	; 253
    40dc:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    40de:	a8 e2       	ldi	r26, 0x28	; 40
    40e0:	b0 e0       	ldi	r27, 0x00	; 0
    40e2:	e8 e2       	ldi	r30, 0x28	; 40
    40e4:	f0 e0       	ldi	r31, 0x00	; 0
    40e6:	80 81       	ld	r24, Z
    40e8:	84 60       	ori	r24, 0x04	; 4
    40ea:	8c 93       	st	X, r24
    40ec:	80 e0       	ldi	r24, 0x00	; 0
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	a0 ea       	ldi	r26, 0xA0	; 160
    40f2:	b0 e4       	ldi	r27, 0x40	; 64
    40f4:	8b 87       	std	Y+11, r24	; 0x0b
    40f6:	9c 87       	std	Y+12, r25	; 0x0c
    40f8:	ad 87       	std	Y+13, r26	; 0x0d
    40fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    40fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4100:	8d 85       	ldd	r24, Y+13	; 0x0d
    4102:	9e 85       	ldd	r25, Y+14	; 0x0e
    4104:	2d ec       	ldi	r18, 0xCD	; 205
    4106:	3c ec       	ldi	r19, 0xCC	; 204
    4108:	4c e2       	ldi	r20, 0x2C	; 44
    410a:	55 e4       	ldi	r21, 0x45	; 69
    410c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    4110:	dc 01       	movw	r26, r24
    4112:	cb 01       	movw	r24, r22
    4114:	8f 83       	std	Y+7, r24	; 0x07
    4116:	98 87       	std	Y+8, r25	; 0x08
    4118:	a9 87       	std	Y+9, r26	; 0x09
    411a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    411c:	6f 81       	ldd	r22, Y+7	; 0x07
    411e:	78 85       	ldd	r23, Y+8	; 0x08
    4120:	89 85       	ldd	r24, Y+9	; 0x09
    4122:	9a 85       	ldd	r25, Y+10	; 0x0a
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	40 e8       	ldi	r20, 0x80	; 128
    412a:	5f e3       	ldi	r21, 0x3F	; 63
    412c:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    4130:	88 23       	and	r24, r24
    4132:	2c f4       	brge	.+10     	; 0x413e <lcd_wr_command+0x202>
		__ticks = 1;
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	9e 83       	std	Y+6, r25	; 0x06
    413a:	8d 83       	std	Y+5, r24	; 0x05
    413c:	3f c0       	rjmp	.+126    	; 0x41bc <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    413e:	6f 81       	ldd	r22, Y+7	; 0x07
    4140:	78 85       	ldd	r23, Y+8	; 0x08
    4142:	89 85       	ldd	r24, Y+9	; 0x09
    4144:	9a 85       	ldd	r25, Y+10	; 0x0a
    4146:	20 e0       	ldi	r18, 0x00	; 0
    4148:	3f ef       	ldi	r19, 0xFF	; 255
    414a:	4f e7       	ldi	r20, 0x7F	; 127
    414c:	57 e4       	ldi	r21, 0x47	; 71
    414e:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    4152:	18 16       	cp	r1, r24
    4154:	4c f5       	brge	.+82     	; 0x41a8 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4156:	6b 85       	ldd	r22, Y+11	; 0x0b
    4158:	7c 85       	ldd	r23, Y+12	; 0x0c
    415a:	8d 85       	ldd	r24, Y+13	; 0x0d
    415c:	9e 85       	ldd	r25, Y+14	; 0x0e
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	40 e2       	ldi	r20, 0x20	; 32
    4164:	51 e4       	ldi	r21, 0x41	; 65
    4166:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
    416e:	bc 01       	movw	r22, r24
    4170:	cd 01       	movw	r24, r26
    4172:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	9e 83       	std	Y+6, r25	; 0x06
    417c:	8d 83       	std	Y+5, r24	; 0x05
    417e:	0f c0       	rjmp	.+30     	; 0x419e <lcd_wr_command+0x262>
    4180:	84 e1       	ldi	r24, 0x14	; 20
    4182:	91 e0       	ldi	r25, 0x01	; 1
    4184:	9c 83       	std	Y+4, r25	; 0x04
    4186:	8b 83       	std	Y+3, r24	; 0x03
    4188:	8b 81       	ldd	r24, Y+3	; 0x03
    418a:	9c 81       	ldd	r25, Y+4	; 0x04
    418c:	01 97       	sbiw	r24, 0x01	; 1
    418e:	f1 f7       	brne	.-4      	; 0x418c <lcd_wr_command+0x250>
    4190:	9c 83       	std	Y+4, r25	; 0x04
    4192:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4194:	8d 81       	ldd	r24, Y+5	; 0x05
    4196:	9e 81       	ldd	r25, Y+6	; 0x06
    4198:	01 97       	sbiw	r24, 0x01	; 1
    419a:	9e 83       	std	Y+6, r25	; 0x06
    419c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    419e:	8d 81       	ldd	r24, Y+5	; 0x05
    41a0:	9e 81       	ldd	r25, Y+6	; 0x06
    41a2:	00 97       	sbiw	r24, 0x00	; 0
    41a4:	69 f7       	brne	.-38     	; 0x4180 <lcd_wr_command+0x244>
    41a6:	14 c0       	rjmp	.+40     	; 0x41d0 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41a8:	6f 81       	ldd	r22, Y+7	; 0x07
    41aa:	78 85       	ldd	r23, Y+8	; 0x08
    41ac:	89 85       	ldd	r24, Y+9	; 0x09
    41ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    41b0:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    41b4:	dc 01       	movw	r26, r24
    41b6:	cb 01       	movw	r24, r22
    41b8:	9e 83       	std	Y+6, r25	; 0x06
    41ba:	8d 83       	std	Y+5, r24	; 0x05
    41bc:	8d 81       	ldd	r24, Y+5	; 0x05
    41be:	9e 81       	ldd	r25, Y+6	; 0x06
    41c0:	9a 83       	std	Y+2, r25	; 0x02
    41c2:	89 83       	std	Y+1, r24	; 0x01
    41c4:	89 81       	ldd	r24, Y+1	; 0x01
    41c6:	9a 81       	ldd	r25, Y+2	; 0x02
    41c8:	01 97       	sbiw	r24, 0x01	; 1
    41ca:	f1 f7       	brne	.-4      	; 0x41c8 <lcd_wr_command+0x28c>
    41cc:	9a 83       	std	Y+2, r25	; 0x02
    41ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    41d0:	a8 e2       	ldi	r26, 0x28	; 40
    41d2:	b0 e0       	ldi	r27, 0x00	; 0
    41d4:	e8 e2       	ldi	r30, 0x28	; 40
    41d6:	f0 e0       	ldi	r31, 0x00	; 0
    41d8:	80 81       	ld	r24, Z
    41da:	8b 7f       	andi	r24, 0xFB	; 251
    41dc:	8c 93       	st	X, r24
}
    41de:	6e 96       	adiw	r28, 0x1e	; 30
    41e0:	0f b6       	in	r0, 0x3f	; 63
    41e2:	f8 94       	cli
    41e4:	de bf       	out	0x3e, r29	; 62
    41e6:	0f be       	out	0x3f, r0	; 63
    41e8:	cd bf       	out	0x3d, r28	; 61
    41ea:	cf 91       	pop	r28
    41ec:	df 91       	pop	r29
    41ee:	08 95       	ret

000041f0 <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    41f0:	df 93       	push	r29
    41f2:	cf 93       	push	r28
    41f4:	cd b7       	in	r28, 0x3d	; 61
    41f6:	de b7       	in	r29, 0x3e	; 62
    41f8:	6e 97       	sbiw	r28, 0x1e	; 30
    41fa:	0f b6       	in	r0, 0x3f	; 63
    41fc:	f8 94       	cli
    41fe:	de bf       	out	0x3e, r29	; 62
    4200:	0f be       	out	0x3f, r0	; 63
    4202:	cd bf       	out	0x3d, r28	; 61
    4204:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    4206:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4208:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    420a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    420c:	80 7f       	andi	r24, 0xF0	; 240
    420e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    4210:	a8 e2       	ldi	r26, 0x28	; 40
    4212:	b0 e0       	ldi	r27, 0x00	; 0
    4214:	e8 e2       	ldi	r30, 0x28	; 40
    4216:	f0 e0       	ldi	r31, 0x00	; 0
    4218:	80 81       	ld	r24, Z
    421a:	8f 70       	andi	r24, 0x0F	; 15
    421c:	8c 93       	st	X, r24
	lcd_port |= temp;
    421e:	a8 e2       	ldi	r26, 0x28	; 40
    4220:	b0 e0       	ldi	r27, 0x00	; 0
    4222:	e8 e2       	ldi	r30, 0x28	; 40
    4224:	f0 e0       	ldi	r31, 0x00	; 0
    4226:	90 81       	ld	r25, Z
    4228:	8d 8d       	ldd	r24, Y+29	; 0x1d
    422a:	89 2b       	or	r24, r25
    422c:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    422e:	a8 e2       	ldi	r26, 0x28	; 40
    4230:	b0 e0       	ldi	r27, 0x00	; 0
    4232:	e8 e2       	ldi	r30, 0x28	; 40
    4234:	f0 e0       	ldi	r31, 0x00	; 0
    4236:	80 81       	ld	r24, Z
    4238:	81 60       	ori	r24, 0x01	; 1
    423a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    423c:	a8 e2       	ldi	r26, 0x28	; 40
    423e:	b0 e0       	ldi	r27, 0x00	; 0
    4240:	e8 e2       	ldi	r30, 0x28	; 40
    4242:	f0 e0       	ldi	r31, 0x00	; 0
    4244:	80 81       	ld	r24, Z
    4246:	8d 7f       	andi	r24, 0xFD	; 253
    4248:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    424a:	a8 e2       	ldi	r26, 0x28	; 40
    424c:	b0 e0       	ldi	r27, 0x00	; 0
    424e:	e8 e2       	ldi	r30, 0x28	; 40
    4250:	f0 e0       	ldi	r31, 0x00	; 0
    4252:	80 81       	ld	r24, Z
    4254:	84 60       	ori	r24, 0x04	; 4
    4256:	8c 93       	st	X, r24
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	a0 ea       	ldi	r26, 0xA0	; 160
    425e:	b0 e4       	ldi	r27, 0x40	; 64
    4260:	89 8f       	std	Y+25, r24	; 0x19
    4262:	9a 8f       	std	Y+26, r25	; 0x1a
    4264:	ab 8f       	std	Y+27, r26	; 0x1b
    4266:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4268:	69 8d       	ldd	r22, Y+25	; 0x19
    426a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    426c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    426e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4270:	2d ec       	ldi	r18, 0xCD	; 205
    4272:	3c ec       	ldi	r19, 0xCC	; 204
    4274:	4c e2       	ldi	r20, 0x2C	; 44
    4276:	55 e4       	ldi	r21, 0x45	; 69
    4278:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	8d 8b       	std	Y+21, r24	; 0x15
    4282:	9e 8b       	std	Y+22, r25	; 0x16
    4284:	af 8b       	std	Y+23, r26	; 0x17
    4286:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4288:	6d 89       	ldd	r22, Y+21	; 0x15
    428a:	7e 89       	ldd	r23, Y+22	; 0x16
    428c:	8f 89       	ldd	r24, Y+23	; 0x17
    428e:	98 8d       	ldd	r25, Y+24	; 0x18
    4290:	20 e0       	ldi	r18, 0x00	; 0
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	40 e8       	ldi	r20, 0x80	; 128
    4296:	5f e3       	ldi	r21, 0x3F	; 63
    4298:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    429c:	88 23       	and	r24, r24
    429e:	2c f4       	brge	.+10     	; 0x42aa <lcd_wr_char+0xba>
		__ticks = 1;
    42a0:	81 e0       	ldi	r24, 0x01	; 1
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	9c 8b       	std	Y+20, r25	; 0x14
    42a6:	8b 8b       	std	Y+19, r24	; 0x13
    42a8:	3f c0       	rjmp	.+126    	; 0x4328 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    42aa:	6d 89       	ldd	r22, Y+21	; 0x15
    42ac:	7e 89       	ldd	r23, Y+22	; 0x16
    42ae:	8f 89       	ldd	r24, Y+23	; 0x17
    42b0:	98 8d       	ldd	r25, Y+24	; 0x18
    42b2:	20 e0       	ldi	r18, 0x00	; 0
    42b4:	3f ef       	ldi	r19, 0xFF	; 255
    42b6:	4f e7       	ldi	r20, 0x7F	; 127
    42b8:	57 e4       	ldi	r21, 0x47	; 71
    42ba:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    42be:	18 16       	cp	r1, r24
    42c0:	4c f5       	brge	.+82     	; 0x4314 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42c2:	69 8d       	ldd	r22, Y+25	; 0x19
    42c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42ca:	20 e0       	ldi	r18, 0x00	; 0
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	40 e2       	ldi	r20, 0x20	; 32
    42d0:	51 e4       	ldi	r21, 0x41	; 65
    42d2:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    42d6:	dc 01       	movw	r26, r24
    42d8:	cb 01       	movw	r24, r22
    42da:	bc 01       	movw	r22, r24
    42dc:	cd 01       	movw	r24, r26
    42de:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    42e2:	dc 01       	movw	r26, r24
    42e4:	cb 01       	movw	r24, r22
    42e6:	9c 8b       	std	Y+20, r25	; 0x14
    42e8:	8b 8b       	std	Y+19, r24	; 0x13
    42ea:	0f c0       	rjmp	.+30     	; 0x430a <lcd_wr_char+0x11a>
    42ec:	84 e1       	ldi	r24, 0x14	; 20
    42ee:	91 e0       	ldi	r25, 0x01	; 1
    42f0:	9a 8b       	std	Y+18, r25	; 0x12
    42f2:	89 8b       	std	Y+17, r24	; 0x11
    42f4:	89 89       	ldd	r24, Y+17	; 0x11
    42f6:	9a 89       	ldd	r25, Y+18	; 0x12
    42f8:	01 97       	sbiw	r24, 0x01	; 1
    42fa:	f1 f7       	brne	.-4      	; 0x42f8 <lcd_wr_char+0x108>
    42fc:	9a 8b       	std	Y+18, r25	; 0x12
    42fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4300:	8b 89       	ldd	r24, Y+19	; 0x13
    4302:	9c 89       	ldd	r25, Y+20	; 0x14
    4304:	01 97       	sbiw	r24, 0x01	; 1
    4306:	9c 8b       	std	Y+20, r25	; 0x14
    4308:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    430a:	8b 89       	ldd	r24, Y+19	; 0x13
    430c:	9c 89       	ldd	r25, Y+20	; 0x14
    430e:	00 97       	sbiw	r24, 0x00	; 0
    4310:	69 f7       	brne	.-38     	; 0x42ec <lcd_wr_char+0xfc>
    4312:	14 c0       	rjmp	.+40     	; 0x433c <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4314:	6d 89       	ldd	r22, Y+21	; 0x15
    4316:	7e 89       	ldd	r23, Y+22	; 0x16
    4318:	8f 89       	ldd	r24, Y+23	; 0x17
    431a:	98 8d       	ldd	r25, Y+24	; 0x18
    431c:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    4320:	dc 01       	movw	r26, r24
    4322:	cb 01       	movw	r24, r22
    4324:	9c 8b       	std	Y+20, r25	; 0x14
    4326:	8b 8b       	std	Y+19, r24	; 0x13
    4328:	8b 89       	ldd	r24, Y+19	; 0x13
    432a:	9c 89       	ldd	r25, Y+20	; 0x14
    432c:	98 8b       	std	Y+16, r25	; 0x10
    432e:	8f 87       	std	Y+15, r24	; 0x0f
    4330:	8f 85       	ldd	r24, Y+15	; 0x0f
    4332:	98 89       	ldd	r25, Y+16	; 0x10
    4334:	01 97       	sbiw	r24, 0x01	; 1
    4336:	f1 f7       	brne	.-4      	; 0x4334 <lcd_wr_char+0x144>
    4338:	98 8b       	std	Y+16, r25	; 0x10
    433a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    433c:	a8 e2       	ldi	r26, 0x28	; 40
    433e:	b0 e0       	ldi	r27, 0x00	; 0
    4340:	e8 e2       	ldi	r30, 0x28	; 40
    4342:	f0 e0       	ldi	r31, 0x00	; 0
    4344:	80 81       	ld	r24, Z
    4346:	8b 7f       	andi	r24, 0xFB	; 251
    4348:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    434a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    434c:	8f 70       	andi	r24, 0x0F	; 15
    434e:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    4350:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4352:	82 95       	swap	r24
    4354:	80 7f       	andi	r24, 0xF0	; 240
    4356:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    4358:	a8 e2       	ldi	r26, 0x28	; 40
    435a:	b0 e0       	ldi	r27, 0x00	; 0
    435c:	e8 e2       	ldi	r30, 0x28	; 40
    435e:	f0 e0       	ldi	r31, 0x00	; 0
    4360:	80 81       	ld	r24, Z
    4362:	8f 70       	andi	r24, 0x0F	; 15
    4364:	8c 93       	st	X, r24
	lcd_port |= letter;
    4366:	a8 e2       	ldi	r26, 0x28	; 40
    4368:	b0 e0       	ldi	r27, 0x00	; 0
    436a:	e8 e2       	ldi	r30, 0x28	; 40
    436c:	f0 e0       	ldi	r31, 0x00	; 0
    436e:	90 81       	ld	r25, Z
    4370:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4372:	89 2b       	or	r24, r25
    4374:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    4376:	a8 e2       	ldi	r26, 0x28	; 40
    4378:	b0 e0       	ldi	r27, 0x00	; 0
    437a:	e8 e2       	ldi	r30, 0x28	; 40
    437c:	f0 e0       	ldi	r31, 0x00	; 0
    437e:	80 81       	ld	r24, Z
    4380:	81 60       	ori	r24, 0x01	; 1
    4382:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    4384:	a8 e2       	ldi	r26, 0x28	; 40
    4386:	b0 e0       	ldi	r27, 0x00	; 0
    4388:	e8 e2       	ldi	r30, 0x28	; 40
    438a:	f0 e0       	ldi	r31, 0x00	; 0
    438c:	80 81       	ld	r24, Z
    438e:	8d 7f       	andi	r24, 0xFD	; 253
    4390:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    4392:	a8 e2       	ldi	r26, 0x28	; 40
    4394:	b0 e0       	ldi	r27, 0x00	; 0
    4396:	e8 e2       	ldi	r30, 0x28	; 40
    4398:	f0 e0       	ldi	r31, 0x00	; 0
    439a:	80 81       	ld	r24, Z
    439c:	84 60       	ori	r24, 0x04	; 4
    439e:	8c 93       	st	X, r24
    43a0:	80 e0       	ldi	r24, 0x00	; 0
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	a0 ea       	ldi	r26, 0xA0	; 160
    43a6:	b0 e4       	ldi	r27, 0x40	; 64
    43a8:	8b 87       	std	Y+11, r24	; 0x0b
    43aa:	9c 87       	std	Y+12, r25	; 0x0c
    43ac:	ad 87       	std	Y+13, r26	; 0x0d
    43ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    43b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    43b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    43b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    43b8:	2d ec       	ldi	r18, 0xCD	; 205
    43ba:	3c ec       	ldi	r19, 0xCC	; 204
    43bc:	4c e2       	ldi	r20, 0x2C	; 44
    43be:	55 e4       	ldi	r21, 0x45	; 69
    43c0:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    43c4:	dc 01       	movw	r26, r24
    43c6:	cb 01       	movw	r24, r22
    43c8:	8f 83       	std	Y+7, r24	; 0x07
    43ca:	98 87       	std	Y+8, r25	; 0x08
    43cc:	a9 87       	std	Y+9, r26	; 0x09
    43ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43d0:	6f 81       	ldd	r22, Y+7	; 0x07
    43d2:	78 85       	ldd	r23, Y+8	; 0x08
    43d4:	89 85       	ldd	r24, Y+9	; 0x09
    43d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	40 e8       	ldi	r20, 0x80	; 128
    43de:	5f e3       	ldi	r21, 0x3F	; 63
    43e0:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ltsf2>
    43e4:	88 23       	and	r24, r24
    43e6:	2c f4       	brge	.+10     	; 0x43f2 <lcd_wr_char+0x202>
		__ticks = 1;
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	9e 83       	std	Y+6, r25	; 0x06
    43ee:	8d 83       	std	Y+5, r24	; 0x05
    43f0:	3f c0       	rjmp	.+126    	; 0x4470 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    43f2:	6f 81       	ldd	r22, Y+7	; 0x07
    43f4:	78 85       	ldd	r23, Y+8	; 0x08
    43f6:	89 85       	ldd	r24, Y+9	; 0x09
    43f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    43fa:	20 e0       	ldi	r18, 0x00	; 0
    43fc:	3f ef       	ldi	r19, 0xFF	; 255
    43fe:	4f e7       	ldi	r20, 0x7F	; 127
    4400:	57 e4       	ldi	r21, 0x47	; 71
    4402:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__gtsf2>
    4406:	18 16       	cp	r1, r24
    4408:	4c f5       	brge	.+82     	; 0x445c <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    440a:	6b 85       	ldd	r22, Y+11	; 0x0b
    440c:	7c 85       	ldd	r23, Y+12	; 0x0c
    440e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4410:	9e 85       	ldd	r25, Y+14	; 0x0e
    4412:	20 e0       	ldi	r18, 0x00	; 0
    4414:	30 e0       	ldi	r19, 0x00	; 0
    4416:	40 e2       	ldi	r20, 0x20	; 32
    4418:	51 e4       	ldi	r21, 0x41	; 65
    441a:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    441e:	dc 01       	movw	r26, r24
    4420:	cb 01       	movw	r24, r22
    4422:	bc 01       	movw	r22, r24
    4424:	cd 01       	movw	r24, r26
    4426:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	9e 83       	std	Y+6, r25	; 0x06
    4430:	8d 83       	std	Y+5, r24	; 0x05
    4432:	0f c0       	rjmp	.+30     	; 0x4452 <lcd_wr_char+0x262>
    4434:	84 e1       	ldi	r24, 0x14	; 20
    4436:	91 e0       	ldi	r25, 0x01	; 1
    4438:	9c 83       	std	Y+4, r25	; 0x04
    443a:	8b 83       	std	Y+3, r24	; 0x03
    443c:	8b 81       	ldd	r24, Y+3	; 0x03
    443e:	9c 81       	ldd	r25, Y+4	; 0x04
    4440:	01 97       	sbiw	r24, 0x01	; 1
    4442:	f1 f7       	brne	.-4      	; 0x4440 <lcd_wr_char+0x250>
    4444:	9c 83       	std	Y+4, r25	; 0x04
    4446:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4448:	8d 81       	ldd	r24, Y+5	; 0x05
    444a:	9e 81       	ldd	r25, Y+6	; 0x06
    444c:	01 97       	sbiw	r24, 0x01	; 1
    444e:	9e 83       	std	Y+6, r25	; 0x06
    4450:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4452:	8d 81       	ldd	r24, Y+5	; 0x05
    4454:	9e 81       	ldd	r25, Y+6	; 0x06
    4456:	00 97       	sbiw	r24, 0x00	; 0
    4458:	69 f7       	brne	.-38     	; 0x4434 <lcd_wr_char+0x244>
    445a:	14 c0       	rjmp	.+40     	; 0x4484 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    445c:	6f 81       	ldd	r22, Y+7	; 0x07
    445e:	78 85       	ldd	r23, Y+8	; 0x08
    4460:	89 85       	ldd	r24, Y+9	; 0x09
    4462:	9a 85       	ldd	r25, Y+10	; 0x0a
    4464:	0e 94 c1 23 	call	0x4782	; 0x4782 <__fixunssfsi>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	9e 83       	std	Y+6, r25	; 0x06
    446e:	8d 83       	std	Y+5, r24	; 0x05
    4470:	8d 81       	ldd	r24, Y+5	; 0x05
    4472:	9e 81       	ldd	r25, Y+6	; 0x06
    4474:	9a 83       	std	Y+2, r25	; 0x02
    4476:	89 83       	std	Y+1, r24	; 0x01
    4478:	89 81       	ldd	r24, Y+1	; 0x01
    447a:	9a 81       	ldd	r25, Y+2	; 0x02
    447c:	01 97       	sbiw	r24, 0x01	; 1
    447e:	f1 f7       	brne	.-4      	; 0x447c <lcd_wr_char+0x28c>
    4480:	9a 83       	std	Y+2, r25	; 0x02
    4482:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    4484:	a8 e2       	ldi	r26, 0x28	; 40
    4486:	b0 e0       	ldi	r27, 0x00	; 0
    4488:	e8 e2       	ldi	r30, 0x28	; 40
    448a:	f0 e0       	ldi	r31, 0x00	; 0
    448c:	80 81       	ld	r24, Z
    448e:	8b 7f       	andi	r24, 0xFB	; 251
    4490:	8c 93       	st	X, r24
}
    4492:	6e 96       	adiw	r28, 0x1e	; 30
    4494:	0f b6       	in	r0, 0x3f	; 63
    4496:	f8 94       	cli
    4498:	de bf       	out	0x3e, r29	; 62
    449a:	0f be       	out	0x3f, r0	; 63
    449c:	cd bf       	out	0x3d, r28	; 61
    449e:	cf 91       	pop	r28
    44a0:	df 91       	pop	r29
    44a2:	08 95       	ret

000044a4 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    44a4:	df 93       	push	r29
    44a6:	cf 93       	push	r28
    44a8:	cd b7       	in	r28, 0x3d	; 61
    44aa:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    44ac:	80 e8       	ldi	r24, 0x80	; 128
    44ae:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <lcd_wr_command>
}
    44b2:	cf 91       	pop	r28
    44b4:	df 91       	pop	r29
    44b6:	08 95       	ret

000044b8 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    44b8:	df 93       	push	r29
    44ba:	cf 93       	push	r28
    44bc:	0f 92       	push	r0
    44be:	0f 92       	push	r0
    44c0:	cd b7       	in	r28, 0x3d	; 61
    44c2:	de b7       	in	r29, 0x3e	; 62
    44c4:	9a 83       	std	Y+2, r25	; 0x02
    44c6:	89 83       	std	Y+1, r24	; 0x01
    44c8:	0a c0       	rjmp	.+20     	; 0x44de <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    44ca:	e9 81       	ldd	r30, Y+1	; 0x01
    44cc:	fa 81       	ldd	r31, Y+2	; 0x02
    44ce:	80 81       	ld	r24, Z
    44d0:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <lcd_wr_char>
		str++;
    44d4:	89 81       	ldd	r24, Y+1	; 0x01
    44d6:	9a 81       	ldd	r25, Y+2	; 0x02
    44d8:	01 96       	adiw	r24, 0x01	; 1
    44da:	9a 83       	std	Y+2, r25	; 0x02
    44dc:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    44de:	e9 81       	ldd	r30, Y+1	; 0x01
    44e0:	fa 81       	ldd	r31, Y+2	; 0x02
    44e2:	80 81       	ld	r24, Z
    44e4:	88 23       	and	r24, r24
    44e6:	89 f7       	brne	.-30     	; 0x44ca <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    44e8:	0f 90       	pop	r0
    44ea:	0f 90       	pop	r0
    44ec:	cf 91       	pop	r28
    44ee:	df 91       	pop	r29
    44f0:	08 95       	ret

000044f2 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    44f2:	df 93       	push	r29
    44f4:	cf 93       	push	r28
    44f6:	00 d0       	rcall	.+0      	; 0x44f8 <lcd_cursor+0x6>
    44f8:	0f 92       	push	r0
    44fa:	cd b7       	in	r28, 0x3d	; 61
    44fc:	de b7       	in	r29, 0x3e	; 62
    44fe:	89 83       	std	Y+1, r24	; 0x01
    4500:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    4502:	89 81       	ldd	r24, Y+1	; 0x01
    4504:	28 2f       	mov	r18, r24
    4506:	30 e0       	ldi	r19, 0x00	; 0
    4508:	3c 83       	std	Y+4, r19	; 0x04
    450a:	2b 83       	std	Y+3, r18	; 0x03
    450c:	8b 81       	ldd	r24, Y+3	; 0x03
    450e:	9c 81       	ldd	r25, Y+4	; 0x04
    4510:	82 30       	cpi	r24, 0x02	; 2
    4512:	91 05       	cpc	r25, r1
    4514:	d9 f0       	breq	.+54     	; 0x454c <lcd_cursor+0x5a>
    4516:	2b 81       	ldd	r18, Y+3	; 0x03
    4518:	3c 81       	ldd	r19, Y+4	; 0x04
    451a:	23 30       	cpi	r18, 0x03	; 3
    451c:	31 05       	cpc	r19, r1
    451e:	34 f4       	brge	.+12     	; 0x452c <lcd_cursor+0x3a>
    4520:	8b 81       	ldd	r24, Y+3	; 0x03
    4522:	9c 81       	ldd	r25, Y+4	; 0x04
    4524:	81 30       	cpi	r24, 0x01	; 1
    4526:	91 05       	cpc	r25, r1
    4528:	61 f0       	breq	.+24     	; 0x4542 <lcd_cursor+0x50>
    452a:	1e c0       	rjmp	.+60     	; 0x4568 <lcd_cursor+0x76>
    452c:	2b 81       	ldd	r18, Y+3	; 0x03
    452e:	3c 81       	ldd	r19, Y+4	; 0x04
    4530:	23 30       	cpi	r18, 0x03	; 3
    4532:	31 05       	cpc	r19, r1
    4534:	81 f0       	breq	.+32     	; 0x4556 <lcd_cursor+0x64>
    4536:	8b 81       	ldd	r24, Y+3	; 0x03
    4538:	9c 81       	ldd	r25, Y+4	; 0x04
    453a:	84 30       	cpi	r24, 0x04	; 4
    453c:	91 05       	cpc	r25, r1
    453e:	81 f0       	breq	.+32     	; 0x4560 <lcd_cursor+0x6e>
    4540:	13 c0       	rjmp	.+38     	; 0x4568 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    4542:	8a 81       	ldd	r24, Y+2	; 0x02
    4544:	81 58       	subi	r24, 0x81	; 129
    4546:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <lcd_wr_command>
    454a:	0e c0       	rjmp	.+28     	; 0x4568 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    454c:	8a 81       	ldd	r24, Y+2	; 0x02
    454e:	81 54       	subi	r24, 0x41	; 65
    4550:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <lcd_wr_command>
    4554:	09 c0       	rjmp	.+18     	; 0x4568 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    4556:	8a 81       	ldd	r24, Y+2	; 0x02
    4558:	8d 56       	subi	r24, 0x6D	; 109
    455a:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <lcd_wr_command>
    455e:	04 c0       	rjmp	.+8      	; 0x4568 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    4560:	8a 81       	ldd	r24, Y+2	; 0x02
    4562:	8d 52       	subi	r24, 0x2D	; 45
    4564:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <lcd_wr_command>
		default: break;
	}
}
    4568:	0f 90       	pop	r0
    456a:	0f 90       	pop	r0
    456c:	0f 90       	pop	r0
    456e:	0f 90       	pop	r0
    4570:	cf 91       	pop	r28
    4572:	df 91       	pop	r29
    4574:	08 95       	ret

00004576 <lcd_reset>:
void lcd_reset()
{
    4576:	df 93       	push	r29
    4578:	cf 93       	push	r28
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62
	lcd_cursor(1,1);
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	61 e0       	ldi	r22, 0x01	; 1
    4582:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	lcd_string("                ");
    4586:	8d ee       	ldi	r24, 0xED	; 237
    4588:	92 e0       	ldi	r25, 0x02	; 2
    458a:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
	lcd_cursor(2,1);
    458e:	82 e0       	ldi	r24, 0x02	; 2
    4590:	61 e0       	ldi	r22, 0x01	; 1
    4592:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	lcd_string("                ");
    4596:	8d ee       	ldi	r24, 0xED	; 237
    4598:	92 e0       	ldi	r25, 0x02	; 2
    459a:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <lcd_string>
}
    459e:	cf 91       	pop	r28
    45a0:	df 91       	pop	r29
    45a2:	08 95       	ret

000045a4 <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    45a4:	df 93       	push	r29
    45a6:	cf 93       	push	r28
    45a8:	cd b7       	in	r28, 0x3d	; 61
    45aa:	de b7       	in	r29, 0x3e	; 62
    45ac:	27 97       	sbiw	r28, 0x07	; 7
    45ae:	0f b6       	in	r0, 0x3f	; 63
    45b0:	f8 94       	cli
    45b2:	de bf       	out	0x3e, r29	; 62
    45b4:	0f be       	out	0x3f, r0	; 63
    45b6:	cd bf       	out	0x3d, r28	; 61
    45b8:	8a 83       	std	Y+2, r24	; 0x02
    45ba:	6b 83       	std	Y+3, r22	; 0x03
    45bc:	5d 83       	std	Y+5, r21	; 0x05
    45be:	4c 83       	std	Y+4, r20	; 0x04
    45c0:	3f 83       	std	Y+7, r19	; 0x07
    45c2:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    45c4:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    45c6:	8a 81       	ldd	r24, Y+2	; 0x02
    45c8:	88 23       	and	r24, r24
    45ca:	19 f0       	breq	.+6      	; 0x45d2 <lcd_print+0x2e>
    45cc:	8b 81       	ldd	r24, Y+3	; 0x03
    45ce:	88 23       	and	r24, r24
    45d0:	19 f4       	brne	.+6      	; 0x45d8 <lcd_print+0x34>
	{
		lcd_home();
    45d2:	0e 94 52 22 	call	0x44a4	; 0x44a4 <lcd_home>
    45d6:	04 c0       	rjmp	.+8      	; 0x45e0 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    45d8:	8a 81       	ldd	r24, Y+2	; 0x02
    45da:	6b 81       	ldd	r22, Y+3	; 0x03
    45dc:	0e 94 79 22 	call	0x44f2	; 0x44f2 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    45e0:	8e 81       	ldd	r24, Y+6	; 0x06
    45e2:	9f 81       	ldd	r25, Y+7	; 0x07
    45e4:	85 30       	cpi	r24, 0x05	; 5
    45e6:	91 05       	cpc	r25, r1
    45e8:	19 f0       	breq	.+6      	; 0x45f0 <lcd_print+0x4c>
    45ea:	89 81       	ldd	r24, Y+1	; 0x01
    45ec:	81 30       	cpi	r24, 0x01	; 1
    45ee:	a9 f4       	brne	.+42     	; 0x461a <lcd_print+0x76>
	{
		million=value/10000+48;
    45f0:	8c 81       	ldd	r24, Y+4	; 0x04
    45f2:	9d 81       	ldd	r25, Y+5	; 0x05
    45f4:	20 e1       	ldi	r18, 0x10	; 16
    45f6:	37 e2       	ldi	r19, 0x27	; 39
    45f8:	b9 01       	movw	r22, r18
    45fa:	0e 94 ed 2a 	call	0x55da	; 0x55da <__udivmodhi4>
    45fe:	cb 01       	movw	r24, r22
    4600:	c0 96       	adiw	r24, 0x30	; 48
    4602:	90 93 94 04 	sts	0x0494, r25
    4606:	80 93 93 04 	sts	0x0493, r24
		lcd_wr_char(million);
    460a:	80 91 93 04 	lds	r24, 0x0493
    460e:	90 91 94 04 	lds	r25, 0x0494
    4612:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <lcd_wr_char>
		flag=1;
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    461a:	8e 81       	ldd	r24, Y+6	; 0x06
    461c:	9f 81       	ldd	r25, Y+7	; 0x07
    461e:	84 30       	cpi	r24, 0x04	; 4
    4620:	91 05       	cpc	r25, r1
    4622:	19 f0       	breq	.+6      	; 0x462a <lcd_print+0x86>
    4624:	89 81       	ldd	r24, Y+1	; 0x01
    4626:	81 30       	cpi	r24, 0x01	; 1
    4628:	11 f5       	brne	.+68     	; 0x466e <lcd_print+0xca>
	{
		temp = value/1000;
    462a:	8c 81       	ldd	r24, Y+4	; 0x04
    462c:	9d 81       	ldd	r25, Y+5	; 0x05
    462e:	28 ee       	ldi	r18, 0xE8	; 232
    4630:	33 e0       	ldi	r19, 0x03	; 3
    4632:	b9 01       	movw	r22, r18
    4634:	0e 94 ed 2a 	call	0x55da	; 0x55da <__udivmodhi4>
    4638:	cb 01       	movw	r24, r22
    463a:	90 93 52 04 	sts	0x0452, r25
    463e:	80 93 51 04 	sts	0x0451, r24
		thousand = temp%10 + 48;
    4642:	80 91 51 04 	lds	r24, 0x0451
    4646:	90 91 52 04 	lds	r25, 0x0452
    464a:	2a e0       	ldi	r18, 0x0A	; 10
    464c:	30 e0       	ldi	r19, 0x00	; 0
    464e:	b9 01       	movw	r22, r18
    4650:	0e 94 ed 2a 	call	0x55da	; 0x55da <__udivmodhi4>
    4654:	c0 96       	adiw	r24, 0x30	; 48
    4656:	90 93 9c 04 	sts	0x049C, r25
    465a:	80 93 9b 04 	sts	0x049B, r24
		lcd_wr_char(thousand);
    465e:	80 91 9b 04 	lds	r24, 0x049B
    4662:	90 91 9c 04 	lds	r25, 0x049C
    4666:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <lcd_wr_char>
		flag=1;
    466a:	81 e0       	ldi	r24, 0x01	; 1
    466c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    466e:	8e 81       	ldd	r24, Y+6	; 0x06
    4670:	9f 81       	ldd	r25, Y+7	; 0x07
    4672:	83 30       	cpi	r24, 0x03	; 3
    4674:	91 05       	cpc	r25, r1
    4676:	19 f0       	breq	.+6      	; 0x467e <lcd_print+0xda>
    4678:	89 81       	ldd	r24, Y+1	; 0x01
    467a:	81 30       	cpi	r24, 0x01	; 1
    467c:	11 f5       	brne	.+68     	; 0x46c2 <lcd_print+0x11e>
	{
		temp = value/100;
    467e:	8c 81       	ldd	r24, Y+4	; 0x04
    4680:	9d 81       	ldd	r25, Y+5	; 0x05
    4682:	24 e6       	ldi	r18, 0x64	; 100
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	b9 01       	movw	r22, r18
    4688:	0e 94 ed 2a 	call	0x55da	; 0x55da <__udivmodhi4>
    468c:	cb 01       	movw	r24, r22
    468e:	90 93 52 04 	sts	0x0452, r25
    4692:	80 93 51 04 	sts	0x0451, r24
		hundred = temp%10 + 48;
    4696:	80 91 51 04 	lds	r24, 0x0451
    469a:	90 91 52 04 	lds	r25, 0x0452
    469e:	2a e0       	ldi	r18, 0x0A	; 10
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	b9 01       	movw	r22, r18
    46a4:	0e 94 ed 2a 	call	0x55da	; 0x55da <__udivmodhi4>
    46a8:	c0 96       	adiw	r24, 0x30	; 48
    46aa:	90 93 98 04 	sts	0x0498, r25
    46ae:	80 93 97 04 	sts	0x0497, r24
		lcd_wr_char(hundred);
    46b2:	80 91 97 04 	lds	r24, 0x0497
    46b6:	90 91 98 04 	lds	r25, 0x0498
    46ba:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <lcd_wr_char>
		flag=1;
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    46c2:	8e 81       	ldd	r24, Y+6	; 0x06
    46c4:	9f 81       	ldd	r25, Y+7	; 0x07
    46c6:	82 30       	cpi	r24, 0x02	; 2
    46c8:	91 05       	cpc	r25, r1
    46ca:	19 f0       	breq	.+6      	; 0x46d2 <lcd_print+0x12e>
    46cc:	89 81       	ldd	r24, Y+1	; 0x01
    46ce:	81 30       	cpi	r24, 0x01	; 1
    46d0:	11 f5       	brne	.+68     	; 0x4716 <lcd_print+0x172>
	{
		temp = value/10;
    46d2:	8c 81       	ldd	r24, Y+4	; 0x04
    46d4:	9d 81       	ldd	r25, Y+5	; 0x05
    46d6:	2a e0       	ldi	r18, 0x0A	; 10
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	b9 01       	movw	r22, r18
    46dc:	0e 94 ed 2a 	call	0x55da	; 0x55da <__udivmodhi4>
    46e0:	cb 01       	movw	r24, r22
    46e2:	90 93 52 04 	sts	0x0452, r25
    46e6:	80 93 51 04 	sts	0x0451, r24
		tens = temp%10 + 48;
    46ea:	80 91 51 04 	lds	r24, 0x0451
    46ee:	90 91 52 04 	lds	r25, 0x0452
    46f2:	2a e0       	ldi	r18, 0x0A	; 10
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	b9 01       	movw	r22, r18
    46f8:	0e 94 ed 2a 	call	0x55da	; 0x55da <__udivmodhi4>
    46fc:	c0 96       	adiw	r24, 0x30	; 48
    46fe:	90 93 96 04 	sts	0x0496, r25
    4702:	80 93 95 04 	sts	0x0495, r24
		lcd_wr_char(tens);
    4706:	80 91 95 04 	lds	r24, 0x0495
    470a:	90 91 96 04 	lds	r25, 0x0496
    470e:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <lcd_wr_char>
		flag=1;
    4712:	81 e0       	ldi	r24, 0x01	; 1
    4714:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    4716:	8e 81       	ldd	r24, Y+6	; 0x06
    4718:	9f 81       	ldd	r25, Y+7	; 0x07
    471a:	81 30       	cpi	r24, 0x01	; 1
    471c:	91 05       	cpc	r25, r1
    471e:	19 f0       	breq	.+6      	; 0x4726 <lcd_print+0x182>
    4720:	89 81       	ldd	r24, Y+1	; 0x01
    4722:	81 30       	cpi	r24, 0x01	; 1
    4724:	91 f4       	brne	.+36     	; 0x474a <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    4726:	8c 81       	ldd	r24, Y+4	; 0x04
    4728:	9d 81       	ldd	r25, Y+5	; 0x05
    472a:	2a e0       	ldi	r18, 0x0A	; 10
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	b9 01       	movw	r22, r18
    4730:	0e 94 ed 2a 	call	0x55da	; 0x55da <__udivmodhi4>
    4734:	c0 96       	adiw	r24, 0x30	; 48
    4736:	90 93 9a 04 	sts	0x049A, r25
    473a:	80 93 99 04 	sts	0x0499, r24
		lcd_wr_char(unit);
    473e:	80 91 99 04 	lds	r24, 0x0499
    4742:	90 91 9a 04 	lds	r25, 0x049A
    4746:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <lcd_wr_char>
	}
	if(digits>5)
    474a:	8e 81       	ldd	r24, Y+6	; 0x06
    474c:	9f 81       	ldd	r25, Y+7	; 0x07
    474e:	86 30       	cpi	r24, 0x06	; 6
    4750:	91 05       	cpc	r25, r1
    4752:	1c f0       	brlt	.+6      	; 0x475a <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    4754:	85 e4       	ldi	r24, 0x45	; 69
    4756:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <lcd_wr_char>
	}
	
}
    475a:	27 96       	adiw	r28, 0x07	; 7
    475c:	0f b6       	in	r0, 0x3f	; 63
    475e:	f8 94       	cli
    4760:	de bf       	out	0x3e, r29	; 62
    4762:	0f be       	out	0x3f, r0	; 63
    4764:	cd bf       	out	0x3d, r28	; 61
    4766:	cf 91       	pop	r28
    4768:	df 91       	pop	r29
    476a:	08 95       	ret

0000476c <init_devices>:

void init_devices (void)
{
    476c:	df 93       	push	r29
    476e:	cf 93       	push	r28
    4770:	cd b7       	in	r28, 0x3d	; 61
    4772:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    4774:	f8 94       	cli
 port_init();
    4776:	0e 94 02 1a 	call	0x3404	; 0x3404 <port_init>
 sei();   //Enables the global interrupts
    477a:	78 94       	sei
}		
    477c:	cf 91       	pop	r28
    477e:	df 91       	pop	r29
    4780:	08 95       	ret

00004782 <__fixunssfsi>:
    4782:	ef 92       	push	r14
    4784:	ff 92       	push	r15
    4786:	0f 93       	push	r16
    4788:	1f 93       	push	r17
    478a:	7b 01       	movw	r14, r22
    478c:	8c 01       	movw	r16, r24
    478e:	20 e0       	ldi	r18, 0x00	; 0
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	40 e0       	ldi	r20, 0x00	; 0
    4794:	5f e4       	ldi	r21, 0x4F	; 79
    4796:	0e 94 6d 27 	call	0x4eda	; 0x4eda <__gesf2>
    479a:	88 23       	and	r24, r24
    479c:	8c f0       	brlt	.+34     	; 0x47c0 <__fixunssfsi+0x3e>
    479e:	c8 01       	movw	r24, r16
    47a0:	b7 01       	movw	r22, r14
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	40 e0       	ldi	r20, 0x00	; 0
    47a8:	5f e4       	ldi	r21, 0x4F	; 79
    47aa:	0e 94 39 25 	call	0x4a72	; 0x4a72 <__subsf3>
    47ae:	0e 94 2b 28 	call	0x5056	; 0x5056 <__fixsfsi>
    47b2:	9b 01       	movw	r18, r22
    47b4:	ac 01       	movw	r20, r24
    47b6:	20 50       	subi	r18, 0x00	; 0
    47b8:	30 40       	sbci	r19, 0x00	; 0
    47ba:	40 40       	sbci	r20, 0x00	; 0
    47bc:	50 48       	sbci	r21, 0x80	; 128
    47be:	06 c0       	rjmp	.+12     	; 0x47cc <__fixunssfsi+0x4a>
    47c0:	c8 01       	movw	r24, r16
    47c2:	b7 01       	movw	r22, r14
    47c4:	0e 94 2b 28 	call	0x5056	; 0x5056 <__fixsfsi>
    47c8:	9b 01       	movw	r18, r22
    47ca:	ac 01       	movw	r20, r24
    47cc:	b9 01       	movw	r22, r18
    47ce:	ca 01       	movw	r24, r20
    47d0:	1f 91       	pop	r17
    47d2:	0f 91       	pop	r16
    47d4:	ff 90       	pop	r15
    47d6:	ef 90       	pop	r14
    47d8:	08 95       	ret

000047da <_fpadd_parts>:
    47da:	a0 e0       	ldi	r26, 0x00	; 0
    47dc:	b0 e0       	ldi	r27, 0x00	; 0
    47de:	e3 ef       	ldi	r30, 0xF3	; 243
    47e0:	f3 e2       	ldi	r31, 0x23	; 35
    47e2:	0c 94 01 2b 	jmp	0x5602	; 0x5602 <__prologue_saves__>
    47e6:	dc 01       	movw	r26, r24
    47e8:	2b 01       	movw	r4, r22
    47ea:	fa 01       	movw	r30, r20
    47ec:	9c 91       	ld	r25, X
    47ee:	92 30       	cpi	r25, 0x02	; 2
    47f0:	08 f4       	brcc	.+2      	; 0x47f4 <_fpadd_parts+0x1a>
    47f2:	39 c1       	rjmp	.+626    	; 0x4a66 <_fpadd_parts+0x28c>
    47f4:	eb 01       	movw	r28, r22
    47f6:	88 81       	ld	r24, Y
    47f8:	82 30       	cpi	r24, 0x02	; 2
    47fa:	08 f4       	brcc	.+2      	; 0x47fe <_fpadd_parts+0x24>
    47fc:	33 c1       	rjmp	.+614    	; 0x4a64 <_fpadd_parts+0x28a>
    47fe:	94 30       	cpi	r25, 0x04	; 4
    4800:	69 f4       	brne	.+26     	; 0x481c <_fpadd_parts+0x42>
    4802:	84 30       	cpi	r24, 0x04	; 4
    4804:	09 f0       	breq	.+2      	; 0x4808 <_fpadd_parts+0x2e>
    4806:	2f c1       	rjmp	.+606    	; 0x4a66 <_fpadd_parts+0x28c>
    4808:	11 96       	adiw	r26, 0x01	; 1
    480a:	9c 91       	ld	r25, X
    480c:	11 97       	sbiw	r26, 0x01	; 1
    480e:	89 81       	ldd	r24, Y+1	; 0x01
    4810:	98 17       	cp	r25, r24
    4812:	09 f4       	brne	.+2      	; 0x4816 <_fpadd_parts+0x3c>
    4814:	28 c1       	rjmp	.+592    	; 0x4a66 <_fpadd_parts+0x28c>
    4816:	ae ef       	ldi	r26, 0xFE	; 254
    4818:	b2 e0       	ldi	r27, 0x02	; 2
    481a:	25 c1       	rjmp	.+586    	; 0x4a66 <_fpadd_parts+0x28c>
    481c:	84 30       	cpi	r24, 0x04	; 4
    481e:	09 f4       	brne	.+2      	; 0x4822 <_fpadd_parts+0x48>
    4820:	21 c1       	rjmp	.+578    	; 0x4a64 <_fpadd_parts+0x28a>
    4822:	82 30       	cpi	r24, 0x02	; 2
    4824:	a9 f4       	brne	.+42     	; 0x4850 <_fpadd_parts+0x76>
    4826:	92 30       	cpi	r25, 0x02	; 2
    4828:	09 f0       	breq	.+2      	; 0x482c <_fpadd_parts+0x52>
    482a:	1d c1       	rjmp	.+570    	; 0x4a66 <_fpadd_parts+0x28c>
    482c:	9a 01       	movw	r18, r20
    482e:	ad 01       	movw	r20, r26
    4830:	88 e0       	ldi	r24, 0x08	; 8
    4832:	ea 01       	movw	r28, r20
    4834:	09 90       	ld	r0, Y+
    4836:	ae 01       	movw	r20, r28
    4838:	e9 01       	movw	r28, r18
    483a:	09 92       	st	Y+, r0
    483c:	9e 01       	movw	r18, r28
    483e:	81 50       	subi	r24, 0x01	; 1
    4840:	c1 f7       	brne	.-16     	; 0x4832 <_fpadd_parts+0x58>
    4842:	e2 01       	movw	r28, r4
    4844:	89 81       	ldd	r24, Y+1	; 0x01
    4846:	11 96       	adiw	r26, 0x01	; 1
    4848:	9c 91       	ld	r25, X
    484a:	89 23       	and	r24, r25
    484c:	81 83       	std	Z+1, r24	; 0x01
    484e:	08 c1       	rjmp	.+528    	; 0x4a60 <_fpadd_parts+0x286>
    4850:	92 30       	cpi	r25, 0x02	; 2
    4852:	09 f4       	brne	.+2      	; 0x4856 <_fpadd_parts+0x7c>
    4854:	07 c1       	rjmp	.+526    	; 0x4a64 <_fpadd_parts+0x28a>
    4856:	12 96       	adiw	r26, 0x02	; 2
    4858:	2d 90       	ld	r2, X+
    485a:	3c 90       	ld	r3, X
    485c:	13 97       	sbiw	r26, 0x03	; 3
    485e:	eb 01       	movw	r28, r22
    4860:	8a 81       	ldd	r24, Y+2	; 0x02
    4862:	9b 81       	ldd	r25, Y+3	; 0x03
    4864:	14 96       	adiw	r26, 0x04	; 4
    4866:	ad 90       	ld	r10, X+
    4868:	bd 90       	ld	r11, X+
    486a:	cd 90       	ld	r12, X+
    486c:	dc 90       	ld	r13, X
    486e:	17 97       	sbiw	r26, 0x07	; 7
    4870:	ec 80       	ldd	r14, Y+4	; 0x04
    4872:	fd 80       	ldd	r15, Y+5	; 0x05
    4874:	0e 81       	ldd	r16, Y+6	; 0x06
    4876:	1f 81       	ldd	r17, Y+7	; 0x07
    4878:	91 01       	movw	r18, r2
    487a:	28 1b       	sub	r18, r24
    487c:	39 0b       	sbc	r19, r25
    487e:	b9 01       	movw	r22, r18
    4880:	37 ff       	sbrs	r19, 7
    4882:	04 c0       	rjmp	.+8      	; 0x488c <_fpadd_parts+0xb2>
    4884:	66 27       	eor	r22, r22
    4886:	77 27       	eor	r23, r23
    4888:	62 1b       	sub	r22, r18
    488a:	73 0b       	sbc	r23, r19
    488c:	60 32       	cpi	r22, 0x20	; 32
    488e:	71 05       	cpc	r23, r1
    4890:	0c f0       	brlt	.+2      	; 0x4894 <_fpadd_parts+0xba>
    4892:	61 c0       	rjmp	.+194    	; 0x4956 <_fpadd_parts+0x17c>
    4894:	12 16       	cp	r1, r18
    4896:	13 06       	cpc	r1, r19
    4898:	6c f5       	brge	.+90     	; 0x48f4 <_fpadd_parts+0x11a>
    489a:	37 01       	movw	r6, r14
    489c:	48 01       	movw	r8, r16
    489e:	06 2e       	mov	r0, r22
    48a0:	04 c0       	rjmp	.+8      	; 0x48aa <_fpadd_parts+0xd0>
    48a2:	96 94       	lsr	r9
    48a4:	87 94       	ror	r8
    48a6:	77 94       	ror	r7
    48a8:	67 94       	ror	r6
    48aa:	0a 94       	dec	r0
    48ac:	d2 f7       	brpl	.-12     	; 0x48a2 <_fpadd_parts+0xc8>
    48ae:	21 e0       	ldi	r18, 0x01	; 1
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	40 e0       	ldi	r20, 0x00	; 0
    48b4:	50 e0       	ldi	r21, 0x00	; 0
    48b6:	04 c0       	rjmp	.+8      	; 0x48c0 <_fpadd_parts+0xe6>
    48b8:	22 0f       	add	r18, r18
    48ba:	33 1f       	adc	r19, r19
    48bc:	44 1f       	adc	r20, r20
    48be:	55 1f       	adc	r21, r21
    48c0:	6a 95       	dec	r22
    48c2:	d2 f7       	brpl	.-12     	; 0x48b8 <_fpadd_parts+0xde>
    48c4:	21 50       	subi	r18, 0x01	; 1
    48c6:	30 40       	sbci	r19, 0x00	; 0
    48c8:	40 40       	sbci	r20, 0x00	; 0
    48ca:	50 40       	sbci	r21, 0x00	; 0
    48cc:	2e 21       	and	r18, r14
    48ce:	3f 21       	and	r19, r15
    48d0:	40 23       	and	r20, r16
    48d2:	51 23       	and	r21, r17
    48d4:	21 15       	cp	r18, r1
    48d6:	31 05       	cpc	r19, r1
    48d8:	41 05       	cpc	r20, r1
    48da:	51 05       	cpc	r21, r1
    48dc:	21 f0       	breq	.+8      	; 0x48e6 <_fpadd_parts+0x10c>
    48de:	21 e0       	ldi	r18, 0x01	; 1
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	40 e0       	ldi	r20, 0x00	; 0
    48e4:	50 e0       	ldi	r21, 0x00	; 0
    48e6:	79 01       	movw	r14, r18
    48e8:	8a 01       	movw	r16, r20
    48ea:	e6 28       	or	r14, r6
    48ec:	f7 28       	or	r15, r7
    48ee:	08 29       	or	r16, r8
    48f0:	19 29       	or	r17, r9
    48f2:	3c c0       	rjmp	.+120    	; 0x496c <_fpadd_parts+0x192>
    48f4:	23 2b       	or	r18, r19
    48f6:	d1 f1       	breq	.+116    	; 0x496c <_fpadd_parts+0x192>
    48f8:	26 0e       	add	r2, r22
    48fa:	37 1e       	adc	r3, r23
    48fc:	35 01       	movw	r6, r10
    48fe:	46 01       	movw	r8, r12
    4900:	06 2e       	mov	r0, r22
    4902:	04 c0       	rjmp	.+8      	; 0x490c <_fpadd_parts+0x132>
    4904:	96 94       	lsr	r9
    4906:	87 94       	ror	r8
    4908:	77 94       	ror	r7
    490a:	67 94       	ror	r6
    490c:	0a 94       	dec	r0
    490e:	d2 f7       	brpl	.-12     	; 0x4904 <_fpadd_parts+0x12a>
    4910:	21 e0       	ldi	r18, 0x01	; 1
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	40 e0       	ldi	r20, 0x00	; 0
    4916:	50 e0       	ldi	r21, 0x00	; 0
    4918:	04 c0       	rjmp	.+8      	; 0x4922 <_fpadd_parts+0x148>
    491a:	22 0f       	add	r18, r18
    491c:	33 1f       	adc	r19, r19
    491e:	44 1f       	adc	r20, r20
    4920:	55 1f       	adc	r21, r21
    4922:	6a 95       	dec	r22
    4924:	d2 f7       	brpl	.-12     	; 0x491a <_fpadd_parts+0x140>
    4926:	21 50       	subi	r18, 0x01	; 1
    4928:	30 40       	sbci	r19, 0x00	; 0
    492a:	40 40       	sbci	r20, 0x00	; 0
    492c:	50 40       	sbci	r21, 0x00	; 0
    492e:	2a 21       	and	r18, r10
    4930:	3b 21       	and	r19, r11
    4932:	4c 21       	and	r20, r12
    4934:	5d 21       	and	r21, r13
    4936:	21 15       	cp	r18, r1
    4938:	31 05       	cpc	r19, r1
    493a:	41 05       	cpc	r20, r1
    493c:	51 05       	cpc	r21, r1
    493e:	21 f0       	breq	.+8      	; 0x4948 <_fpadd_parts+0x16e>
    4940:	21 e0       	ldi	r18, 0x01	; 1
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	40 e0       	ldi	r20, 0x00	; 0
    4946:	50 e0       	ldi	r21, 0x00	; 0
    4948:	59 01       	movw	r10, r18
    494a:	6a 01       	movw	r12, r20
    494c:	a6 28       	or	r10, r6
    494e:	b7 28       	or	r11, r7
    4950:	c8 28       	or	r12, r8
    4952:	d9 28       	or	r13, r9
    4954:	0b c0       	rjmp	.+22     	; 0x496c <_fpadd_parts+0x192>
    4956:	82 15       	cp	r24, r2
    4958:	93 05       	cpc	r25, r3
    495a:	2c f0       	brlt	.+10     	; 0x4966 <_fpadd_parts+0x18c>
    495c:	1c 01       	movw	r2, r24
    495e:	aa 24       	eor	r10, r10
    4960:	bb 24       	eor	r11, r11
    4962:	65 01       	movw	r12, r10
    4964:	03 c0       	rjmp	.+6      	; 0x496c <_fpadd_parts+0x192>
    4966:	ee 24       	eor	r14, r14
    4968:	ff 24       	eor	r15, r15
    496a:	87 01       	movw	r16, r14
    496c:	11 96       	adiw	r26, 0x01	; 1
    496e:	9c 91       	ld	r25, X
    4970:	d2 01       	movw	r26, r4
    4972:	11 96       	adiw	r26, 0x01	; 1
    4974:	8c 91       	ld	r24, X
    4976:	98 17       	cp	r25, r24
    4978:	09 f4       	brne	.+2      	; 0x497c <_fpadd_parts+0x1a2>
    497a:	45 c0       	rjmp	.+138    	; 0x4a06 <_fpadd_parts+0x22c>
    497c:	99 23       	and	r25, r25
    497e:	39 f0       	breq	.+14     	; 0x498e <_fpadd_parts+0x1b4>
    4980:	a8 01       	movw	r20, r16
    4982:	97 01       	movw	r18, r14
    4984:	2a 19       	sub	r18, r10
    4986:	3b 09       	sbc	r19, r11
    4988:	4c 09       	sbc	r20, r12
    498a:	5d 09       	sbc	r21, r13
    498c:	06 c0       	rjmp	.+12     	; 0x499a <_fpadd_parts+0x1c0>
    498e:	a6 01       	movw	r20, r12
    4990:	95 01       	movw	r18, r10
    4992:	2e 19       	sub	r18, r14
    4994:	3f 09       	sbc	r19, r15
    4996:	40 0b       	sbc	r20, r16
    4998:	51 0b       	sbc	r21, r17
    499a:	57 fd       	sbrc	r21, 7
    499c:	08 c0       	rjmp	.+16     	; 0x49ae <_fpadd_parts+0x1d4>
    499e:	11 82       	std	Z+1, r1	; 0x01
    49a0:	33 82       	std	Z+3, r3	; 0x03
    49a2:	22 82       	std	Z+2, r2	; 0x02
    49a4:	24 83       	std	Z+4, r18	; 0x04
    49a6:	35 83       	std	Z+5, r19	; 0x05
    49a8:	46 83       	std	Z+6, r20	; 0x06
    49aa:	57 83       	std	Z+7, r21	; 0x07
    49ac:	1d c0       	rjmp	.+58     	; 0x49e8 <_fpadd_parts+0x20e>
    49ae:	81 e0       	ldi	r24, 0x01	; 1
    49b0:	81 83       	std	Z+1, r24	; 0x01
    49b2:	33 82       	std	Z+3, r3	; 0x03
    49b4:	22 82       	std	Z+2, r2	; 0x02
    49b6:	88 27       	eor	r24, r24
    49b8:	99 27       	eor	r25, r25
    49ba:	dc 01       	movw	r26, r24
    49bc:	82 1b       	sub	r24, r18
    49be:	93 0b       	sbc	r25, r19
    49c0:	a4 0b       	sbc	r26, r20
    49c2:	b5 0b       	sbc	r27, r21
    49c4:	84 83       	std	Z+4, r24	; 0x04
    49c6:	95 83       	std	Z+5, r25	; 0x05
    49c8:	a6 83       	std	Z+6, r26	; 0x06
    49ca:	b7 83       	std	Z+7, r27	; 0x07
    49cc:	0d c0       	rjmp	.+26     	; 0x49e8 <_fpadd_parts+0x20e>
    49ce:	22 0f       	add	r18, r18
    49d0:	33 1f       	adc	r19, r19
    49d2:	44 1f       	adc	r20, r20
    49d4:	55 1f       	adc	r21, r21
    49d6:	24 83       	std	Z+4, r18	; 0x04
    49d8:	35 83       	std	Z+5, r19	; 0x05
    49da:	46 83       	std	Z+6, r20	; 0x06
    49dc:	57 83       	std	Z+7, r21	; 0x07
    49de:	82 81       	ldd	r24, Z+2	; 0x02
    49e0:	93 81       	ldd	r25, Z+3	; 0x03
    49e2:	01 97       	sbiw	r24, 0x01	; 1
    49e4:	93 83       	std	Z+3, r25	; 0x03
    49e6:	82 83       	std	Z+2, r24	; 0x02
    49e8:	24 81       	ldd	r18, Z+4	; 0x04
    49ea:	35 81       	ldd	r19, Z+5	; 0x05
    49ec:	46 81       	ldd	r20, Z+6	; 0x06
    49ee:	57 81       	ldd	r21, Z+7	; 0x07
    49f0:	da 01       	movw	r26, r20
    49f2:	c9 01       	movw	r24, r18
    49f4:	01 97       	sbiw	r24, 0x01	; 1
    49f6:	a1 09       	sbc	r26, r1
    49f8:	b1 09       	sbc	r27, r1
    49fa:	8f 5f       	subi	r24, 0xFF	; 255
    49fc:	9f 4f       	sbci	r25, 0xFF	; 255
    49fe:	af 4f       	sbci	r26, 0xFF	; 255
    4a00:	bf 43       	sbci	r27, 0x3F	; 63
    4a02:	28 f3       	brcs	.-54     	; 0x49ce <_fpadd_parts+0x1f4>
    4a04:	0b c0       	rjmp	.+22     	; 0x4a1c <_fpadd_parts+0x242>
    4a06:	91 83       	std	Z+1, r25	; 0x01
    4a08:	33 82       	std	Z+3, r3	; 0x03
    4a0a:	22 82       	std	Z+2, r2	; 0x02
    4a0c:	ea 0c       	add	r14, r10
    4a0e:	fb 1c       	adc	r15, r11
    4a10:	0c 1d       	adc	r16, r12
    4a12:	1d 1d       	adc	r17, r13
    4a14:	e4 82       	std	Z+4, r14	; 0x04
    4a16:	f5 82       	std	Z+5, r15	; 0x05
    4a18:	06 83       	std	Z+6, r16	; 0x06
    4a1a:	17 83       	std	Z+7, r17	; 0x07
    4a1c:	83 e0       	ldi	r24, 0x03	; 3
    4a1e:	80 83       	st	Z, r24
    4a20:	24 81       	ldd	r18, Z+4	; 0x04
    4a22:	35 81       	ldd	r19, Z+5	; 0x05
    4a24:	46 81       	ldd	r20, Z+6	; 0x06
    4a26:	57 81       	ldd	r21, Z+7	; 0x07
    4a28:	57 ff       	sbrs	r21, 7
    4a2a:	1a c0       	rjmp	.+52     	; 0x4a60 <_fpadd_parts+0x286>
    4a2c:	c9 01       	movw	r24, r18
    4a2e:	aa 27       	eor	r26, r26
    4a30:	97 fd       	sbrc	r25, 7
    4a32:	a0 95       	com	r26
    4a34:	ba 2f       	mov	r27, r26
    4a36:	81 70       	andi	r24, 0x01	; 1
    4a38:	90 70       	andi	r25, 0x00	; 0
    4a3a:	a0 70       	andi	r26, 0x00	; 0
    4a3c:	b0 70       	andi	r27, 0x00	; 0
    4a3e:	56 95       	lsr	r21
    4a40:	47 95       	ror	r20
    4a42:	37 95       	ror	r19
    4a44:	27 95       	ror	r18
    4a46:	82 2b       	or	r24, r18
    4a48:	93 2b       	or	r25, r19
    4a4a:	a4 2b       	or	r26, r20
    4a4c:	b5 2b       	or	r27, r21
    4a4e:	84 83       	std	Z+4, r24	; 0x04
    4a50:	95 83       	std	Z+5, r25	; 0x05
    4a52:	a6 83       	std	Z+6, r26	; 0x06
    4a54:	b7 83       	std	Z+7, r27	; 0x07
    4a56:	82 81       	ldd	r24, Z+2	; 0x02
    4a58:	93 81       	ldd	r25, Z+3	; 0x03
    4a5a:	01 96       	adiw	r24, 0x01	; 1
    4a5c:	93 83       	std	Z+3, r25	; 0x03
    4a5e:	82 83       	std	Z+2, r24	; 0x02
    4a60:	df 01       	movw	r26, r30
    4a62:	01 c0       	rjmp	.+2      	; 0x4a66 <_fpadd_parts+0x28c>
    4a64:	d2 01       	movw	r26, r4
    4a66:	cd 01       	movw	r24, r26
    4a68:	cd b7       	in	r28, 0x3d	; 61
    4a6a:	de b7       	in	r29, 0x3e	; 62
    4a6c:	e2 e1       	ldi	r30, 0x12	; 18
    4a6e:	0c 94 1d 2b 	jmp	0x563a	; 0x563a <__epilogue_restores__>

00004a72 <__subsf3>:
    4a72:	a0 e2       	ldi	r26, 0x20	; 32
    4a74:	b0 e0       	ldi	r27, 0x00	; 0
    4a76:	ef e3       	ldi	r30, 0x3F	; 63
    4a78:	f5 e2       	ldi	r31, 0x25	; 37
    4a7a:	0c 94 0d 2b 	jmp	0x561a	; 0x561a <__prologue_saves__+0x18>
    4a7e:	69 83       	std	Y+1, r22	; 0x01
    4a80:	7a 83       	std	Y+2, r23	; 0x02
    4a82:	8b 83       	std	Y+3, r24	; 0x03
    4a84:	9c 83       	std	Y+4, r25	; 0x04
    4a86:	2d 83       	std	Y+5, r18	; 0x05
    4a88:	3e 83       	std	Y+6, r19	; 0x06
    4a8a:	4f 83       	std	Y+7, r20	; 0x07
    4a8c:	58 87       	std	Y+8, r21	; 0x08
    4a8e:	e9 e0       	ldi	r30, 0x09	; 9
    4a90:	ee 2e       	mov	r14, r30
    4a92:	f1 2c       	mov	r15, r1
    4a94:	ec 0e       	add	r14, r28
    4a96:	fd 1e       	adc	r15, r29
    4a98:	ce 01       	movw	r24, r28
    4a9a:	01 96       	adiw	r24, 0x01	; 1
    4a9c:	b7 01       	movw	r22, r14
    4a9e:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    4aa2:	8e 01       	movw	r16, r28
    4aa4:	0f 5e       	subi	r16, 0xEF	; 239
    4aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    4aa8:	ce 01       	movw	r24, r28
    4aaa:	05 96       	adiw	r24, 0x05	; 5
    4aac:	b8 01       	movw	r22, r16
    4aae:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    4ab2:	8a 89       	ldd	r24, Y+18	; 0x12
    4ab4:	91 e0       	ldi	r25, 0x01	; 1
    4ab6:	89 27       	eor	r24, r25
    4ab8:	8a 8b       	std	Y+18, r24	; 0x12
    4aba:	c7 01       	movw	r24, r14
    4abc:	b8 01       	movw	r22, r16
    4abe:	ae 01       	movw	r20, r28
    4ac0:	47 5e       	subi	r20, 0xE7	; 231
    4ac2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ac4:	0e 94 ed 23 	call	0x47da	; 0x47da <_fpadd_parts>
    4ac8:	0e 94 47 29 	call	0x528e	; 0x528e <__pack_f>
    4acc:	a0 96       	adiw	r28, 0x20	; 32
    4ace:	e6 e0       	ldi	r30, 0x06	; 6
    4ad0:	0c 94 29 2b 	jmp	0x5652	; 0x5652 <__epilogue_restores__+0x18>

00004ad4 <__addsf3>:
    4ad4:	a0 e2       	ldi	r26, 0x20	; 32
    4ad6:	b0 e0       	ldi	r27, 0x00	; 0
    4ad8:	e0 e7       	ldi	r30, 0x70	; 112
    4ada:	f5 e2       	ldi	r31, 0x25	; 37
    4adc:	0c 94 0d 2b 	jmp	0x561a	; 0x561a <__prologue_saves__+0x18>
    4ae0:	69 83       	std	Y+1, r22	; 0x01
    4ae2:	7a 83       	std	Y+2, r23	; 0x02
    4ae4:	8b 83       	std	Y+3, r24	; 0x03
    4ae6:	9c 83       	std	Y+4, r25	; 0x04
    4ae8:	2d 83       	std	Y+5, r18	; 0x05
    4aea:	3e 83       	std	Y+6, r19	; 0x06
    4aec:	4f 83       	std	Y+7, r20	; 0x07
    4aee:	58 87       	std	Y+8, r21	; 0x08
    4af0:	f9 e0       	ldi	r31, 0x09	; 9
    4af2:	ef 2e       	mov	r14, r31
    4af4:	f1 2c       	mov	r15, r1
    4af6:	ec 0e       	add	r14, r28
    4af8:	fd 1e       	adc	r15, r29
    4afa:	ce 01       	movw	r24, r28
    4afc:	01 96       	adiw	r24, 0x01	; 1
    4afe:	b7 01       	movw	r22, r14
    4b00:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    4b04:	8e 01       	movw	r16, r28
    4b06:	0f 5e       	subi	r16, 0xEF	; 239
    4b08:	1f 4f       	sbci	r17, 0xFF	; 255
    4b0a:	ce 01       	movw	r24, r28
    4b0c:	05 96       	adiw	r24, 0x05	; 5
    4b0e:	b8 01       	movw	r22, r16
    4b10:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    4b14:	c7 01       	movw	r24, r14
    4b16:	b8 01       	movw	r22, r16
    4b18:	ae 01       	movw	r20, r28
    4b1a:	47 5e       	subi	r20, 0xE7	; 231
    4b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b1e:	0e 94 ed 23 	call	0x47da	; 0x47da <_fpadd_parts>
    4b22:	0e 94 47 29 	call	0x528e	; 0x528e <__pack_f>
    4b26:	a0 96       	adiw	r28, 0x20	; 32
    4b28:	e6 e0       	ldi	r30, 0x06	; 6
    4b2a:	0c 94 29 2b 	jmp	0x5652	; 0x5652 <__epilogue_restores__+0x18>

00004b2e <__mulsf3>:
    4b2e:	a0 e2       	ldi	r26, 0x20	; 32
    4b30:	b0 e0       	ldi	r27, 0x00	; 0
    4b32:	ed e9       	ldi	r30, 0x9D	; 157
    4b34:	f5 e2       	ldi	r31, 0x25	; 37
    4b36:	0c 94 01 2b 	jmp	0x5602	; 0x5602 <__prologue_saves__>
    4b3a:	69 83       	std	Y+1, r22	; 0x01
    4b3c:	7a 83       	std	Y+2, r23	; 0x02
    4b3e:	8b 83       	std	Y+3, r24	; 0x03
    4b40:	9c 83       	std	Y+4, r25	; 0x04
    4b42:	2d 83       	std	Y+5, r18	; 0x05
    4b44:	3e 83       	std	Y+6, r19	; 0x06
    4b46:	4f 83       	std	Y+7, r20	; 0x07
    4b48:	58 87       	std	Y+8, r21	; 0x08
    4b4a:	ce 01       	movw	r24, r28
    4b4c:	01 96       	adiw	r24, 0x01	; 1
    4b4e:	be 01       	movw	r22, r28
    4b50:	67 5f       	subi	r22, 0xF7	; 247
    4b52:	7f 4f       	sbci	r23, 0xFF	; 255
    4b54:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    4b58:	ce 01       	movw	r24, r28
    4b5a:	05 96       	adiw	r24, 0x05	; 5
    4b5c:	be 01       	movw	r22, r28
    4b5e:	6f 5e       	subi	r22, 0xEF	; 239
    4b60:	7f 4f       	sbci	r23, 0xFF	; 255
    4b62:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    4b66:	99 85       	ldd	r25, Y+9	; 0x09
    4b68:	92 30       	cpi	r25, 0x02	; 2
    4b6a:	88 f0       	brcs	.+34     	; 0x4b8e <__mulsf3+0x60>
    4b6c:	89 89       	ldd	r24, Y+17	; 0x11
    4b6e:	82 30       	cpi	r24, 0x02	; 2
    4b70:	c8 f0       	brcs	.+50     	; 0x4ba4 <__mulsf3+0x76>
    4b72:	94 30       	cpi	r25, 0x04	; 4
    4b74:	19 f4       	brne	.+6      	; 0x4b7c <__mulsf3+0x4e>
    4b76:	82 30       	cpi	r24, 0x02	; 2
    4b78:	51 f4       	brne	.+20     	; 0x4b8e <__mulsf3+0x60>
    4b7a:	04 c0       	rjmp	.+8      	; 0x4b84 <__mulsf3+0x56>
    4b7c:	84 30       	cpi	r24, 0x04	; 4
    4b7e:	29 f4       	brne	.+10     	; 0x4b8a <__mulsf3+0x5c>
    4b80:	92 30       	cpi	r25, 0x02	; 2
    4b82:	81 f4       	brne	.+32     	; 0x4ba4 <__mulsf3+0x76>
    4b84:	8e ef       	ldi	r24, 0xFE	; 254
    4b86:	92 e0       	ldi	r25, 0x02	; 2
    4b88:	c6 c0       	rjmp	.+396    	; 0x4d16 <__mulsf3+0x1e8>
    4b8a:	92 30       	cpi	r25, 0x02	; 2
    4b8c:	49 f4       	brne	.+18     	; 0x4ba0 <__mulsf3+0x72>
    4b8e:	20 e0       	ldi	r18, 0x00	; 0
    4b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b92:	8a 89       	ldd	r24, Y+18	; 0x12
    4b94:	98 13       	cpse	r25, r24
    4b96:	21 e0       	ldi	r18, 0x01	; 1
    4b98:	2a 87       	std	Y+10, r18	; 0x0a
    4b9a:	ce 01       	movw	r24, r28
    4b9c:	09 96       	adiw	r24, 0x09	; 9
    4b9e:	bb c0       	rjmp	.+374    	; 0x4d16 <__mulsf3+0x1e8>
    4ba0:	82 30       	cpi	r24, 0x02	; 2
    4ba2:	49 f4       	brne	.+18     	; 0x4bb6 <__mulsf3+0x88>
    4ba4:	20 e0       	ldi	r18, 0x00	; 0
    4ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ba8:	8a 89       	ldd	r24, Y+18	; 0x12
    4baa:	98 13       	cpse	r25, r24
    4bac:	21 e0       	ldi	r18, 0x01	; 1
    4bae:	2a 8b       	std	Y+18, r18	; 0x12
    4bb0:	ce 01       	movw	r24, r28
    4bb2:	41 96       	adiw	r24, 0x11	; 17
    4bb4:	b0 c0       	rjmp	.+352    	; 0x4d16 <__mulsf3+0x1e8>
    4bb6:	2d 84       	ldd	r2, Y+13	; 0x0d
    4bb8:	3e 84       	ldd	r3, Y+14	; 0x0e
    4bba:	4f 84       	ldd	r4, Y+15	; 0x0f
    4bbc:	58 88       	ldd	r5, Y+16	; 0x10
    4bbe:	6d 88       	ldd	r6, Y+21	; 0x15
    4bc0:	7e 88       	ldd	r7, Y+22	; 0x16
    4bc2:	8f 88       	ldd	r8, Y+23	; 0x17
    4bc4:	98 8c       	ldd	r9, Y+24	; 0x18
    4bc6:	ee 24       	eor	r14, r14
    4bc8:	ff 24       	eor	r15, r15
    4bca:	87 01       	movw	r16, r14
    4bcc:	aa 24       	eor	r10, r10
    4bce:	bb 24       	eor	r11, r11
    4bd0:	65 01       	movw	r12, r10
    4bd2:	40 e0       	ldi	r20, 0x00	; 0
    4bd4:	50 e0       	ldi	r21, 0x00	; 0
    4bd6:	60 e0       	ldi	r22, 0x00	; 0
    4bd8:	70 e0       	ldi	r23, 0x00	; 0
    4bda:	e0 e0       	ldi	r30, 0x00	; 0
    4bdc:	f0 e0       	ldi	r31, 0x00	; 0
    4bde:	c1 01       	movw	r24, r2
    4be0:	81 70       	andi	r24, 0x01	; 1
    4be2:	90 70       	andi	r25, 0x00	; 0
    4be4:	89 2b       	or	r24, r25
    4be6:	e9 f0       	breq	.+58     	; 0x4c22 <__mulsf3+0xf4>
    4be8:	e6 0c       	add	r14, r6
    4bea:	f7 1c       	adc	r15, r7
    4bec:	08 1d       	adc	r16, r8
    4bee:	19 1d       	adc	r17, r9
    4bf0:	9a 01       	movw	r18, r20
    4bf2:	ab 01       	movw	r20, r22
    4bf4:	2a 0d       	add	r18, r10
    4bf6:	3b 1d       	adc	r19, r11
    4bf8:	4c 1d       	adc	r20, r12
    4bfa:	5d 1d       	adc	r21, r13
    4bfc:	80 e0       	ldi	r24, 0x00	; 0
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	a0 e0       	ldi	r26, 0x00	; 0
    4c02:	b0 e0       	ldi	r27, 0x00	; 0
    4c04:	e6 14       	cp	r14, r6
    4c06:	f7 04       	cpc	r15, r7
    4c08:	08 05       	cpc	r16, r8
    4c0a:	19 05       	cpc	r17, r9
    4c0c:	20 f4       	brcc	.+8      	; 0x4c16 <__mulsf3+0xe8>
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	a0 e0       	ldi	r26, 0x00	; 0
    4c14:	b0 e0       	ldi	r27, 0x00	; 0
    4c16:	ba 01       	movw	r22, r20
    4c18:	a9 01       	movw	r20, r18
    4c1a:	48 0f       	add	r20, r24
    4c1c:	59 1f       	adc	r21, r25
    4c1e:	6a 1f       	adc	r22, r26
    4c20:	7b 1f       	adc	r23, r27
    4c22:	aa 0c       	add	r10, r10
    4c24:	bb 1c       	adc	r11, r11
    4c26:	cc 1c       	adc	r12, r12
    4c28:	dd 1c       	adc	r13, r13
    4c2a:	97 fe       	sbrs	r9, 7
    4c2c:	08 c0       	rjmp	.+16     	; 0x4c3e <__mulsf3+0x110>
    4c2e:	81 e0       	ldi	r24, 0x01	; 1
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	a0 e0       	ldi	r26, 0x00	; 0
    4c34:	b0 e0       	ldi	r27, 0x00	; 0
    4c36:	a8 2a       	or	r10, r24
    4c38:	b9 2a       	or	r11, r25
    4c3a:	ca 2a       	or	r12, r26
    4c3c:	db 2a       	or	r13, r27
    4c3e:	31 96       	adiw	r30, 0x01	; 1
    4c40:	e0 32       	cpi	r30, 0x20	; 32
    4c42:	f1 05       	cpc	r31, r1
    4c44:	49 f0       	breq	.+18     	; 0x4c58 <__mulsf3+0x12a>
    4c46:	66 0c       	add	r6, r6
    4c48:	77 1c       	adc	r7, r7
    4c4a:	88 1c       	adc	r8, r8
    4c4c:	99 1c       	adc	r9, r9
    4c4e:	56 94       	lsr	r5
    4c50:	47 94       	ror	r4
    4c52:	37 94       	ror	r3
    4c54:	27 94       	ror	r2
    4c56:	c3 cf       	rjmp	.-122    	; 0x4bde <__mulsf3+0xb0>
    4c58:	fa 85       	ldd	r31, Y+10	; 0x0a
    4c5a:	ea 89       	ldd	r30, Y+18	; 0x12
    4c5c:	2b 89       	ldd	r18, Y+19	; 0x13
    4c5e:	3c 89       	ldd	r19, Y+20	; 0x14
    4c60:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c62:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c64:	28 0f       	add	r18, r24
    4c66:	39 1f       	adc	r19, r25
    4c68:	2e 5f       	subi	r18, 0xFE	; 254
    4c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c6c:	17 c0       	rjmp	.+46     	; 0x4c9c <__mulsf3+0x16e>
    4c6e:	ca 01       	movw	r24, r20
    4c70:	81 70       	andi	r24, 0x01	; 1
    4c72:	90 70       	andi	r25, 0x00	; 0
    4c74:	89 2b       	or	r24, r25
    4c76:	61 f0       	breq	.+24     	; 0x4c90 <__mulsf3+0x162>
    4c78:	16 95       	lsr	r17
    4c7a:	07 95       	ror	r16
    4c7c:	f7 94       	ror	r15
    4c7e:	e7 94       	ror	r14
    4c80:	80 e0       	ldi	r24, 0x00	; 0
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	a0 e0       	ldi	r26, 0x00	; 0
    4c86:	b0 e8       	ldi	r27, 0x80	; 128
    4c88:	e8 2a       	or	r14, r24
    4c8a:	f9 2a       	or	r15, r25
    4c8c:	0a 2b       	or	r16, r26
    4c8e:	1b 2b       	or	r17, r27
    4c90:	76 95       	lsr	r23
    4c92:	67 95       	ror	r22
    4c94:	57 95       	ror	r21
    4c96:	47 95       	ror	r20
    4c98:	2f 5f       	subi	r18, 0xFF	; 255
    4c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c9c:	77 fd       	sbrc	r23, 7
    4c9e:	e7 cf       	rjmp	.-50     	; 0x4c6e <__mulsf3+0x140>
    4ca0:	0c c0       	rjmp	.+24     	; 0x4cba <__mulsf3+0x18c>
    4ca2:	44 0f       	add	r20, r20
    4ca4:	55 1f       	adc	r21, r21
    4ca6:	66 1f       	adc	r22, r22
    4ca8:	77 1f       	adc	r23, r23
    4caa:	17 fd       	sbrc	r17, 7
    4cac:	41 60       	ori	r20, 0x01	; 1
    4cae:	ee 0c       	add	r14, r14
    4cb0:	ff 1c       	adc	r15, r15
    4cb2:	00 1f       	adc	r16, r16
    4cb4:	11 1f       	adc	r17, r17
    4cb6:	21 50       	subi	r18, 0x01	; 1
    4cb8:	30 40       	sbci	r19, 0x00	; 0
    4cba:	40 30       	cpi	r20, 0x00	; 0
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	59 07       	cpc	r21, r25
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	69 07       	cpc	r22, r25
    4cc4:	90 e4       	ldi	r25, 0x40	; 64
    4cc6:	79 07       	cpc	r23, r25
    4cc8:	60 f3       	brcs	.-40     	; 0x4ca2 <__mulsf3+0x174>
    4cca:	2b 8f       	std	Y+27, r18	; 0x1b
    4ccc:	3c 8f       	std	Y+28, r19	; 0x1c
    4cce:	db 01       	movw	r26, r22
    4cd0:	ca 01       	movw	r24, r20
    4cd2:	8f 77       	andi	r24, 0x7F	; 127
    4cd4:	90 70       	andi	r25, 0x00	; 0
    4cd6:	a0 70       	andi	r26, 0x00	; 0
    4cd8:	b0 70       	andi	r27, 0x00	; 0
    4cda:	80 34       	cpi	r24, 0x40	; 64
    4cdc:	91 05       	cpc	r25, r1
    4cde:	a1 05       	cpc	r26, r1
    4ce0:	b1 05       	cpc	r27, r1
    4ce2:	61 f4       	brne	.+24     	; 0x4cfc <__mulsf3+0x1ce>
    4ce4:	47 fd       	sbrc	r20, 7
    4ce6:	0a c0       	rjmp	.+20     	; 0x4cfc <__mulsf3+0x1ce>
    4ce8:	e1 14       	cp	r14, r1
    4cea:	f1 04       	cpc	r15, r1
    4cec:	01 05       	cpc	r16, r1
    4cee:	11 05       	cpc	r17, r1
    4cf0:	29 f0       	breq	.+10     	; 0x4cfc <__mulsf3+0x1ce>
    4cf2:	40 5c       	subi	r20, 0xC0	; 192
    4cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    4cf6:	6f 4f       	sbci	r22, 0xFF	; 255
    4cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cfa:	40 78       	andi	r20, 0x80	; 128
    4cfc:	1a 8e       	std	Y+26, r1	; 0x1a
    4cfe:	fe 17       	cp	r31, r30
    4d00:	11 f0       	breq	.+4      	; 0x4d06 <__mulsf3+0x1d8>
    4d02:	81 e0       	ldi	r24, 0x01	; 1
    4d04:	8a 8f       	std	Y+26, r24	; 0x1a
    4d06:	4d 8f       	std	Y+29, r20	; 0x1d
    4d08:	5e 8f       	std	Y+30, r21	; 0x1e
    4d0a:	6f 8f       	std	Y+31, r22	; 0x1f
    4d0c:	78 a3       	std	Y+32, r23	; 0x20
    4d0e:	83 e0       	ldi	r24, 0x03	; 3
    4d10:	89 8f       	std	Y+25, r24	; 0x19
    4d12:	ce 01       	movw	r24, r28
    4d14:	49 96       	adiw	r24, 0x19	; 25
    4d16:	0e 94 47 29 	call	0x528e	; 0x528e <__pack_f>
    4d1a:	a0 96       	adiw	r28, 0x20	; 32
    4d1c:	e2 e1       	ldi	r30, 0x12	; 18
    4d1e:	0c 94 1d 2b 	jmp	0x563a	; 0x563a <__epilogue_restores__>

00004d22 <__divsf3>:
    4d22:	a8 e1       	ldi	r26, 0x18	; 24
    4d24:	b0 e0       	ldi	r27, 0x00	; 0
    4d26:	e7 e9       	ldi	r30, 0x97	; 151
    4d28:	f6 e2       	ldi	r31, 0x26	; 38
    4d2a:	0c 94 09 2b 	jmp	0x5612	; 0x5612 <__prologue_saves__+0x10>
    4d2e:	69 83       	std	Y+1, r22	; 0x01
    4d30:	7a 83       	std	Y+2, r23	; 0x02
    4d32:	8b 83       	std	Y+3, r24	; 0x03
    4d34:	9c 83       	std	Y+4, r25	; 0x04
    4d36:	2d 83       	std	Y+5, r18	; 0x05
    4d38:	3e 83       	std	Y+6, r19	; 0x06
    4d3a:	4f 83       	std	Y+7, r20	; 0x07
    4d3c:	58 87       	std	Y+8, r21	; 0x08
    4d3e:	b9 e0       	ldi	r27, 0x09	; 9
    4d40:	eb 2e       	mov	r14, r27
    4d42:	f1 2c       	mov	r15, r1
    4d44:	ec 0e       	add	r14, r28
    4d46:	fd 1e       	adc	r15, r29
    4d48:	ce 01       	movw	r24, r28
    4d4a:	01 96       	adiw	r24, 0x01	; 1
    4d4c:	b7 01       	movw	r22, r14
    4d4e:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    4d52:	8e 01       	movw	r16, r28
    4d54:	0f 5e       	subi	r16, 0xEF	; 239
    4d56:	1f 4f       	sbci	r17, 0xFF	; 255
    4d58:	ce 01       	movw	r24, r28
    4d5a:	05 96       	adiw	r24, 0x05	; 5
    4d5c:	b8 01       	movw	r22, r16
    4d5e:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    4d62:	29 85       	ldd	r18, Y+9	; 0x09
    4d64:	22 30       	cpi	r18, 0x02	; 2
    4d66:	08 f4       	brcc	.+2      	; 0x4d6a <__divsf3+0x48>
    4d68:	7e c0       	rjmp	.+252    	; 0x4e66 <__divsf3+0x144>
    4d6a:	39 89       	ldd	r19, Y+17	; 0x11
    4d6c:	32 30       	cpi	r19, 0x02	; 2
    4d6e:	10 f4       	brcc	.+4      	; 0x4d74 <__divsf3+0x52>
    4d70:	b8 01       	movw	r22, r16
    4d72:	7c c0       	rjmp	.+248    	; 0x4e6c <__divsf3+0x14a>
    4d74:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d76:	9a 89       	ldd	r25, Y+18	; 0x12
    4d78:	89 27       	eor	r24, r25
    4d7a:	8a 87       	std	Y+10, r24	; 0x0a
    4d7c:	24 30       	cpi	r18, 0x04	; 4
    4d7e:	11 f0       	breq	.+4      	; 0x4d84 <__divsf3+0x62>
    4d80:	22 30       	cpi	r18, 0x02	; 2
    4d82:	31 f4       	brne	.+12     	; 0x4d90 <__divsf3+0x6e>
    4d84:	23 17       	cp	r18, r19
    4d86:	09 f0       	breq	.+2      	; 0x4d8a <__divsf3+0x68>
    4d88:	6e c0       	rjmp	.+220    	; 0x4e66 <__divsf3+0x144>
    4d8a:	6e ef       	ldi	r22, 0xFE	; 254
    4d8c:	72 e0       	ldi	r23, 0x02	; 2
    4d8e:	6e c0       	rjmp	.+220    	; 0x4e6c <__divsf3+0x14a>
    4d90:	34 30       	cpi	r19, 0x04	; 4
    4d92:	39 f4       	brne	.+14     	; 0x4da2 <__divsf3+0x80>
    4d94:	1d 86       	std	Y+13, r1	; 0x0d
    4d96:	1e 86       	std	Y+14, r1	; 0x0e
    4d98:	1f 86       	std	Y+15, r1	; 0x0f
    4d9a:	18 8a       	std	Y+16, r1	; 0x10
    4d9c:	1c 86       	std	Y+12, r1	; 0x0c
    4d9e:	1b 86       	std	Y+11, r1	; 0x0b
    4da0:	04 c0       	rjmp	.+8      	; 0x4daa <__divsf3+0x88>
    4da2:	32 30       	cpi	r19, 0x02	; 2
    4da4:	21 f4       	brne	.+8      	; 0x4dae <__divsf3+0x8c>
    4da6:	84 e0       	ldi	r24, 0x04	; 4
    4da8:	89 87       	std	Y+9, r24	; 0x09
    4daa:	b7 01       	movw	r22, r14
    4dac:	5f c0       	rjmp	.+190    	; 0x4e6c <__divsf3+0x14a>
    4dae:	2b 85       	ldd	r18, Y+11	; 0x0b
    4db0:	3c 85       	ldd	r19, Y+12	; 0x0c
    4db2:	8b 89       	ldd	r24, Y+19	; 0x13
    4db4:	9c 89       	ldd	r25, Y+20	; 0x14
    4db6:	28 1b       	sub	r18, r24
    4db8:	39 0b       	sbc	r19, r25
    4dba:	3c 87       	std	Y+12, r19	; 0x0c
    4dbc:	2b 87       	std	Y+11, r18	; 0x0b
    4dbe:	ed 84       	ldd	r14, Y+13	; 0x0d
    4dc0:	fe 84       	ldd	r15, Y+14	; 0x0e
    4dc2:	0f 85       	ldd	r16, Y+15	; 0x0f
    4dc4:	18 89       	ldd	r17, Y+16	; 0x10
    4dc6:	ad 88       	ldd	r10, Y+21	; 0x15
    4dc8:	be 88       	ldd	r11, Y+22	; 0x16
    4dca:	cf 88       	ldd	r12, Y+23	; 0x17
    4dcc:	d8 8c       	ldd	r13, Y+24	; 0x18
    4dce:	ea 14       	cp	r14, r10
    4dd0:	fb 04       	cpc	r15, r11
    4dd2:	0c 05       	cpc	r16, r12
    4dd4:	1d 05       	cpc	r17, r13
    4dd6:	40 f4       	brcc	.+16     	; 0x4de8 <__divsf3+0xc6>
    4dd8:	ee 0c       	add	r14, r14
    4dda:	ff 1c       	adc	r15, r15
    4ddc:	00 1f       	adc	r16, r16
    4dde:	11 1f       	adc	r17, r17
    4de0:	21 50       	subi	r18, 0x01	; 1
    4de2:	30 40       	sbci	r19, 0x00	; 0
    4de4:	3c 87       	std	Y+12, r19	; 0x0c
    4de6:	2b 87       	std	Y+11, r18	; 0x0b
    4de8:	20 e0       	ldi	r18, 0x00	; 0
    4dea:	30 e0       	ldi	r19, 0x00	; 0
    4dec:	40 e0       	ldi	r20, 0x00	; 0
    4dee:	50 e0       	ldi	r21, 0x00	; 0
    4df0:	80 e0       	ldi	r24, 0x00	; 0
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	a0 e0       	ldi	r26, 0x00	; 0
    4df6:	b0 e4       	ldi	r27, 0x40	; 64
    4df8:	60 e0       	ldi	r22, 0x00	; 0
    4dfa:	70 e0       	ldi	r23, 0x00	; 0
    4dfc:	ea 14       	cp	r14, r10
    4dfe:	fb 04       	cpc	r15, r11
    4e00:	0c 05       	cpc	r16, r12
    4e02:	1d 05       	cpc	r17, r13
    4e04:	40 f0       	brcs	.+16     	; 0x4e16 <__divsf3+0xf4>
    4e06:	28 2b       	or	r18, r24
    4e08:	39 2b       	or	r19, r25
    4e0a:	4a 2b       	or	r20, r26
    4e0c:	5b 2b       	or	r21, r27
    4e0e:	ea 18       	sub	r14, r10
    4e10:	fb 08       	sbc	r15, r11
    4e12:	0c 09       	sbc	r16, r12
    4e14:	1d 09       	sbc	r17, r13
    4e16:	b6 95       	lsr	r27
    4e18:	a7 95       	ror	r26
    4e1a:	97 95       	ror	r25
    4e1c:	87 95       	ror	r24
    4e1e:	ee 0c       	add	r14, r14
    4e20:	ff 1c       	adc	r15, r15
    4e22:	00 1f       	adc	r16, r16
    4e24:	11 1f       	adc	r17, r17
    4e26:	6f 5f       	subi	r22, 0xFF	; 255
    4e28:	7f 4f       	sbci	r23, 0xFF	; 255
    4e2a:	6f 31       	cpi	r22, 0x1F	; 31
    4e2c:	71 05       	cpc	r23, r1
    4e2e:	31 f7       	brne	.-52     	; 0x4dfc <__divsf3+0xda>
    4e30:	da 01       	movw	r26, r20
    4e32:	c9 01       	movw	r24, r18
    4e34:	8f 77       	andi	r24, 0x7F	; 127
    4e36:	90 70       	andi	r25, 0x00	; 0
    4e38:	a0 70       	andi	r26, 0x00	; 0
    4e3a:	b0 70       	andi	r27, 0x00	; 0
    4e3c:	80 34       	cpi	r24, 0x40	; 64
    4e3e:	91 05       	cpc	r25, r1
    4e40:	a1 05       	cpc	r26, r1
    4e42:	b1 05       	cpc	r27, r1
    4e44:	61 f4       	brne	.+24     	; 0x4e5e <__divsf3+0x13c>
    4e46:	27 fd       	sbrc	r18, 7
    4e48:	0a c0       	rjmp	.+20     	; 0x4e5e <__divsf3+0x13c>
    4e4a:	e1 14       	cp	r14, r1
    4e4c:	f1 04       	cpc	r15, r1
    4e4e:	01 05       	cpc	r16, r1
    4e50:	11 05       	cpc	r17, r1
    4e52:	29 f0       	breq	.+10     	; 0x4e5e <__divsf3+0x13c>
    4e54:	20 5c       	subi	r18, 0xC0	; 192
    4e56:	3f 4f       	sbci	r19, 0xFF	; 255
    4e58:	4f 4f       	sbci	r20, 0xFF	; 255
    4e5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4e5c:	20 78       	andi	r18, 0x80	; 128
    4e5e:	2d 87       	std	Y+13, r18	; 0x0d
    4e60:	3e 87       	std	Y+14, r19	; 0x0e
    4e62:	4f 87       	std	Y+15, r20	; 0x0f
    4e64:	58 8b       	std	Y+16, r21	; 0x10
    4e66:	be 01       	movw	r22, r28
    4e68:	67 5f       	subi	r22, 0xF7	; 247
    4e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e6c:	cb 01       	movw	r24, r22
    4e6e:	0e 94 47 29 	call	0x528e	; 0x528e <__pack_f>
    4e72:	68 96       	adiw	r28, 0x18	; 24
    4e74:	ea e0       	ldi	r30, 0x0A	; 10
    4e76:	0c 94 25 2b 	jmp	0x564a	; 0x564a <__epilogue_restores__+0x10>

00004e7a <__gtsf2>:
    4e7a:	a8 e1       	ldi	r26, 0x18	; 24
    4e7c:	b0 e0       	ldi	r27, 0x00	; 0
    4e7e:	e3 e4       	ldi	r30, 0x43	; 67
    4e80:	f7 e2       	ldi	r31, 0x27	; 39
    4e82:	0c 94 0d 2b 	jmp	0x561a	; 0x561a <__prologue_saves__+0x18>
    4e86:	69 83       	std	Y+1, r22	; 0x01
    4e88:	7a 83       	std	Y+2, r23	; 0x02
    4e8a:	8b 83       	std	Y+3, r24	; 0x03
    4e8c:	9c 83       	std	Y+4, r25	; 0x04
    4e8e:	2d 83       	std	Y+5, r18	; 0x05
    4e90:	3e 83       	std	Y+6, r19	; 0x06
    4e92:	4f 83       	std	Y+7, r20	; 0x07
    4e94:	58 87       	std	Y+8, r21	; 0x08
    4e96:	89 e0       	ldi	r24, 0x09	; 9
    4e98:	e8 2e       	mov	r14, r24
    4e9a:	f1 2c       	mov	r15, r1
    4e9c:	ec 0e       	add	r14, r28
    4e9e:	fd 1e       	adc	r15, r29
    4ea0:	ce 01       	movw	r24, r28
    4ea2:	01 96       	adiw	r24, 0x01	; 1
    4ea4:	b7 01       	movw	r22, r14
    4ea6:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    4eaa:	8e 01       	movw	r16, r28
    4eac:	0f 5e       	subi	r16, 0xEF	; 239
    4eae:	1f 4f       	sbci	r17, 0xFF	; 255
    4eb0:	ce 01       	movw	r24, r28
    4eb2:	05 96       	adiw	r24, 0x05	; 5
    4eb4:	b8 01       	movw	r22, r16
    4eb6:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    4eba:	89 85       	ldd	r24, Y+9	; 0x09
    4ebc:	82 30       	cpi	r24, 0x02	; 2
    4ebe:	40 f0       	brcs	.+16     	; 0x4ed0 <__gtsf2+0x56>
    4ec0:	89 89       	ldd	r24, Y+17	; 0x11
    4ec2:	82 30       	cpi	r24, 0x02	; 2
    4ec4:	28 f0       	brcs	.+10     	; 0x4ed0 <__gtsf2+0x56>
    4ec6:	c7 01       	movw	r24, r14
    4ec8:	b8 01       	movw	r22, r16
    4eca:	0e 94 94 2a 	call	0x5528	; 0x5528 <__fpcmp_parts_f>
    4ece:	01 c0       	rjmp	.+2      	; 0x4ed2 <__gtsf2+0x58>
    4ed0:	8f ef       	ldi	r24, 0xFF	; 255
    4ed2:	68 96       	adiw	r28, 0x18	; 24
    4ed4:	e6 e0       	ldi	r30, 0x06	; 6
    4ed6:	0c 94 29 2b 	jmp	0x5652	; 0x5652 <__epilogue_restores__+0x18>

00004eda <__gesf2>:
    4eda:	a8 e1       	ldi	r26, 0x18	; 24
    4edc:	b0 e0       	ldi	r27, 0x00	; 0
    4ede:	e3 e7       	ldi	r30, 0x73	; 115
    4ee0:	f7 e2       	ldi	r31, 0x27	; 39
    4ee2:	0c 94 0d 2b 	jmp	0x561a	; 0x561a <__prologue_saves__+0x18>
    4ee6:	69 83       	std	Y+1, r22	; 0x01
    4ee8:	7a 83       	std	Y+2, r23	; 0x02
    4eea:	8b 83       	std	Y+3, r24	; 0x03
    4eec:	9c 83       	std	Y+4, r25	; 0x04
    4eee:	2d 83       	std	Y+5, r18	; 0x05
    4ef0:	3e 83       	std	Y+6, r19	; 0x06
    4ef2:	4f 83       	std	Y+7, r20	; 0x07
    4ef4:	58 87       	std	Y+8, r21	; 0x08
    4ef6:	89 e0       	ldi	r24, 0x09	; 9
    4ef8:	e8 2e       	mov	r14, r24
    4efa:	f1 2c       	mov	r15, r1
    4efc:	ec 0e       	add	r14, r28
    4efe:	fd 1e       	adc	r15, r29
    4f00:	ce 01       	movw	r24, r28
    4f02:	01 96       	adiw	r24, 0x01	; 1
    4f04:	b7 01       	movw	r22, r14
    4f06:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    4f0a:	8e 01       	movw	r16, r28
    4f0c:	0f 5e       	subi	r16, 0xEF	; 239
    4f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f10:	ce 01       	movw	r24, r28
    4f12:	05 96       	adiw	r24, 0x05	; 5
    4f14:	b8 01       	movw	r22, r16
    4f16:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    4f1a:	89 85       	ldd	r24, Y+9	; 0x09
    4f1c:	82 30       	cpi	r24, 0x02	; 2
    4f1e:	40 f0       	brcs	.+16     	; 0x4f30 <__gesf2+0x56>
    4f20:	89 89       	ldd	r24, Y+17	; 0x11
    4f22:	82 30       	cpi	r24, 0x02	; 2
    4f24:	28 f0       	brcs	.+10     	; 0x4f30 <__gesf2+0x56>
    4f26:	c7 01       	movw	r24, r14
    4f28:	b8 01       	movw	r22, r16
    4f2a:	0e 94 94 2a 	call	0x5528	; 0x5528 <__fpcmp_parts_f>
    4f2e:	01 c0       	rjmp	.+2      	; 0x4f32 <__gesf2+0x58>
    4f30:	8f ef       	ldi	r24, 0xFF	; 255
    4f32:	68 96       	adiw	r28, 0x18	; 24
    4f34:	e6 e0       	ldi	r30, 0x06	; 6
    4f36:	0c 94 29 2b 	jmp	0x5652	; 0x5652 <__epilogue_restores__+0x18>

00004f3a <__ltsf2>:
    4f3a:	a8 e1       	ldi	r26, 0x18	; 24
    4f3c:	b0 e0       	ldi	r27, 0x00	; 0
    4f3e:	e3 ea       	ldi	r30, 0xA3	; 163
    4f40:	f7 e2       	ldi	r31, 0x27	; 39
    4f42:	0c 94 0d 2b 	jmp	0x561a	; 0x561a <__prologue_saves__+0x18>
    4f46:	69 83       	std	Y+1, r22	; 0x01
    4f48:	7a 83       	std	Y+2, r23	; 0x02
    4f4a:	8b 83       	std	Y+3, r24	; 0x03
    4f4c:	9c 83       	std	Y+4, r25	; 0x04
    4f4e:	2d 83       	std	Y+5, r18	; 0x05
    4f50:	3e 83       	std	Y+6, r19	; 0x06
    4f52:	4f 83       	std	Y+7, r20	; 0x07
    4f54:	58 87       	std	Y+8, r21	; 0x08
    4f56:	89 e0       	ldi	r24, 0x09	; 9
    4f58:	e8 2e       	mov	r14, r24
    4f5a:	f1 2c       	mov	r15, r1
    4f5c:	ec 0e       	add	r14, r28
    4f5e:	fd 1e       	adc	r15, r29
    4f60:	ce 01       	movw	r24, r28
    4f62:	01 96       	adiw	r24, 0x01	; 1
    4f64:	b7 01       	movw	r22, r14
    4f66:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    4f6a:	8e 01       	movw	r16, r28
    4f6c:	0f 5e       	subi	r16, 0xEF	; 239
    4f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f70:	ce 01       	movw	r24, r28
    4f72:	05 96       	adiw	r24, 0x05	; 5
    4f74:	b8 01       	movw	r22, r16
    4f76:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    4f7a:	89 85       	ldd	r24, Y+9	; 0x09
    4f7c:	82 30       	cpi	r24, 0x02	; 2
    4f7e:	40 f0       	brcs	.+16     	; 0x4f90 <__ltsf2+0x56>
    4f80:	89 89       	ldd	r24, Y+17	; 0x11
    4f82:	82 30       	cpi	r24, 0x02	; 2
    4f84:	28 f0       	brcs	.+10     	; 0x4f90 <__ltsf2+0x56>
    4f86:	c7 01       	movw	r24, r14
    4f88:	b8 01       	movw	r22, r16
    4f8a:	0e 94 94 2a 	call	0x5528	; 0x5528 <__fpcmp_parts_f>
    4f8e:	01 c0       	rjmp	.+2      	; 0x4f92 <__ltsf2+0x58>
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	68 96       	adiw	r28, 0x18	; 24
    4f94:	e6 e0       	ldi	r30, 0x06	; 6
    4f96:	0c 94 29 2b 	jmp	0x5652	; 0x5652 <__epilogue_restores__+0x18>

00004f9a <__floatsisf>:
    4f9a:	a8 e0       	ldi	r26, 0x08	; 8
    4f9c:	b0 e0       	ldi	r27, 0x00	; 0
    4f9e:	e3 ed       	ldi	r30, 0xD3	; 211
    4fa0:	f7 e2       	ldi	r31, 0x27	; 39
    4fa2:	0c 94 0a 2b 	jmp	0x5614	; 0x5614 <__prologue_saves__+0x12>
    4fa6:	9b 01       	movw	r18, r22
    4fa8:	ac 01       	movw	r20, r24
    4faa:	83 e0       	ldi	r24, 0x03	; 3
    4fac:	89 83       	std	Y+1, r24	; 0x01
    4fae:	da 01       	movw	r26, r20
    4fb0:	c9 01       	movw	r24, r18
    4fb2:	88 27       	eor	r24, r24
    4fb4:	b7 fd       	sbrc	r27, 7
    4fb6:	83 95       	inc	r24
    4fb8:	99 27       	eor	r25, r25
    4fba:	aa 27       	eor	r26, r26
    4fbc:	bb 27       	eor	r27, r27
    4fbe:	b8 2e       	mov	r11, r24
    4fc0:	21 15       	cp	r18, r1
    4fc2:	31 05       	cpc	r19, r1
    4fc4:	41 05       	cpc	r20, r1
    4fc6:	51 05       	cpc	r21, r1
    4fc8:	19 f4       	brne	.+6      	; 0x4fd0 <__floatsisf+0x36>
    4fca:	82 e0       	ldi	r24, 0x02	; 2
    4fcc:	89 83       	std	Y+1, r24	; 0x01
    4fce:	3a c0       	rjmp	.+116    	; 0x5044 <__floatsisf+0xaa>
    4fd0:	88 23       	and	r24, r24
    4fd2:	a9 f0       	breq	.+42     	; 0x4ffe <__floatsisf+0x64>
    4fd4:	20 30       	cpi	r18, 0x00	; 0
    4fd6:	80 e0       	ldi	r24, 0x00	; 0
    4fd8:	38 07       	cpc	r19, r24
    4fda:	80 e0       	ldi	r24, 0x00	; 0
    4fdc:	48 07       	cpc	r20, r24
    4fde:	80 e8       	ldi	r24, 0x80	; 128
    4fe0:	58 07       	cpc	r21, r24
    4fe2:	29 f4       	brne	.+10     	; 0x4fee <__floatsisf+0x54>
    4fe4:	60 e0       	ldi	r22, 0x00	; 0
    4fe6:	70 e0       	ldi	r23, 0x00	; 0
    4fe8:	80 e0       	ldi	r24, 0x00	; 0
    4fea:	9f ec       	ldi	r25, 0xCF	; 207
    4fec:	30 c0       	rjmp	.+96     	; 0x504e <__floatsisf+0xb4>
    4fee:	ee 24       	eor	r14, r14
    4ff0:	ff 24       	eor	r15, r15
    4ff2:	87 01       	movw	r16, r14
    4ff4:	e2 1a       	sub	r14, r18
    4ff6:	f3 0a       	sbc	r15, r19
    4ff8:	04 0b       	sbc	r16, r20
    4ffa:	15 0b       	sbc	r17, r21
    4ffc:	02 c0       	rjmp	.+4      	; 0x5002 <__floatsisf+0x68>
    4ffe:	79 01       	movw	r14, r18
    5000:	8a 01       	movw	r16, r20
    5002:	8e e1       	ldi	r24, 0x1E	; 30
    5004:	c8 2e       	mov	r12, r24
    5006:	d1 2c       	mov	r13, r1
    5008:	dc 82       	std	Y+4, r13	; 0x04
    500a:	cb 82       	std	Y+3, r12	; 0x03
    500c:	ed 82       	std	Y+5, r14	; 0x05
    500e:	fe 82       	std	Y+6, r15	; 0x06
    5010:	0f 83       	std	Y+7, r16	; 0x07
    5012:	18 87       	std	Y+8, r17	; 0x08
    5014:	c8 01       	movw	r24, r16
    5016:	b7 01       	movw	r22, r14
    5018:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__clzsi2>
    501c:	01 97       	sbiw	r24, 0x01	; 1
    501e:	18 16       	cp	r1, r24
    5020:	19 06       	cpc	r1, r25
    5022:	84 f4       	brge	.+32     	; 0x5044 <__floatsisf+0xaa>
    5024:	08 2e       	mov	r0, r24
    5026:	04 c0       	rjmp	.+8      	; 0x5030 <__floatsisf+0x96>
    5028:	ee 0c       	add	r14, r14
    502a:	ff 1c       	adc	r15, r15
    502c:	00 1f       	adc	r16, r16
    502e:	11 1f       	adc	r17, r17
    5030:	0a 94       	dec	r0
    5032:	d2 f7       	brpl	.-12     	; 0x5028 <__floatsisf+0x8e>
    5034:	ed 82       	std	Y+5, r14	; 0x05
    5036:	fe 82       	std	Y+6, r15	; 0x06
    5038:	0f 83       	std	Y+7, r16	; 0x07
    503a:	18 87       	std	Y+8, r17	; 0x08
    503c:	c8 1a       	sub	r12, r24
    503e:	d9 0a       	sbc	r13, r25
    5040:	dc 82       	std	Y+4, r13	; 0x04
    5042:	cb 82       	std	Y+3, r12	; 0x03
    5044:	ba 82       	std	Y+2, r11	; 0x02
    5046:	ce 01       	movw	r24, r28
    5048:	01 96       	adiw	r24, 0x01	; 1
    504a:	0e 94 47 29 	call	0x528e	; 0x528e <__pack_f>
    504e:	28 96       	adiw	r28, 0x08	; 8
    5050:	e9 e0       	ldi	r30, 0x09	; 9
    5052:	0c 94 26 2b 	jmp	0x564c	; 0x564c <__epilogue_restores__+0x12>

00005056 <__fixsfsi>:
    5056:	ac e0       	ldi	r26, 0x0C	; 12
    5058:	b0 e0       	ldi	r27, 0x00	; 0
    505a:	e1 e3       	ldi	r30, 0x31	; 49
    505c:	f8 e2       	ldi	r31, 0x28	; 40
    505e:	0c 94 11 2b 	jmp	0x5622	; 0x5622 <__prologue_saves__+0x20>
    5062:	69 83       	std	Y+1, r22	; 0x01
    5064:	7a 83       	std	Y+2, r23	; 0x02
    5066:	8b 83       	std	Y+3, r24	; 0x03
    5068:	9c 83       	std	Y+4, r25	; 0x04
    506a:	ce 01       	movw	r24, r28
    506c:	01 96       	adiw	r24, 0x01	; 1
    506e:	be 01       	movw	r22, r28
    5070:	6b 5f       	subi	r22, 0xFB	; 251
    5072:	7f 4f       	sbci	r23, 0xFF	; 255
    5074:	0e 94 1c 2a 	call	0x5438	; 0x5438 <__unpack_f>
    5078:	8d 81       	ldd	r24, Y+5	; 0x05
    507a:	82 30       	cpi	r24, 0x02	; 2
    507c:	61 f1       	breq	.+88     	; 0x50d6 <__fixsfsi+0x80>
    507e:	82 30       	cpi	r24, 0x02	; 2
    5080:	50 f1       	brcs	.+84     	; 0x50d6 <__fixsfsi+0x80>
    5082:	84 30       	cpi	r24, 0x04	; 4
    5084:	21 f4       	brne	.+8      	; 0x508e <__fixsfsi+0x38>
    5086:	8e 81       	ldd	r24, Y+6	; 0x06
    5088:	88 23       	and	r24, r24
    508a:	51 f1       	breq	.+84     	; 0x50e0 <__fixsfsi+0x8a>
    508c:	2e c0       	rjmp	.+92     	; 0x50ea <__fixsfsi+0x94>
    508e:	2f 81       	ldd	r18, Y+7	; 0x07
    5090:	38 85       	ldd	r19, Y+8	; 0x08
    5092:	37 fd       	sbrc	r19, 7
    5094:	20 c0       	rjmp	.+64     	; 0x50d6 <__fixsfsi+0x80>
    5096:	6e 81       	ldd	r22, Y+6	; 0x06
    5098:	2f 31       	cpi	r18, 0x1F	; 31
    509a:	31 05       	cpc	r19, r1
    509c:	1c f0       	brlt	.+6      	; 0x50a4 <__fixsfsi+0x4e>
    509e:	66 23       	and	r22, r22
    50a0:	f9 f0       	breq	.+62     	; 0x50e0 <__fixsfsi+0x8a>
    50a2:	23 c0       	rjmp	.+70     	; 0x50ea <__fixsfsi+0x94>
    50a4:	8e e1       	ldi	r24, 0x1E	; 30
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	82 1b       	sub	r24, r18
    50aa:	93 0b       	sbc	r25, r19
    50ac:	29 85       	ldd	r18, Y+9	; 0x09
    50ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    50b0:	4b 85       	ldd	r20, Y+11	; 0x0b
    50b2:	5c 85       	ldd	r21, Y+12	; 0x0c
    50b4:	04 c0       	rjmp	.+8      	; 0x50be <__fixsfsi+0x68>
    50b6:	56 95       	lsr	r21
    50b8:	47 95       	ror	r20
    50ba:	37 95       	ror	r19
    50bc:	27 95       	ror	r18
    50be:	8a 95       	dec	r24
    50c0:	d2 f7       	brpl	.-12     	; 0x50b6 <__fixsfsi+0x60>
    50c2:	66 23       	and	r22, r22
    50c4:	b1 f0       	breq	.+44     	; 0x50f2 <__fixsfsi+0x9c>
    50c6:	50 95       	com	r21
    50c8:	40 95       	com	r20
    50ca:	30 95       	com	r19
    50cc:	21 95       	neg	r18
    50ce:	3f 4f       	sbci	r19, 0xFF	; 255
    50d0:	4f 4f       	sbci	r20, 0xFF	; 255
    50d2:	5f 4f       	sbci	r21, 0xFF	; 255
    50d4:	0e c0       	rjmp	.+28     	; 0x50f2 <__fixsfsi+0x9c>
    50d6:	20 e0       	ldi	r18, 0x00	; 0
    50d8:	30 e0       	ldi	r19, 0x00	; 0
    50da:	40 e0       	ldi	r20, 0x00	; 0
    50dc:	50 e0       	ldi	r21, 0x00	; 0
    50de:	09 c0       	rjmp	.+18     	; 0x50f2 <__fixsfsi+0x9c>
    50e0:	2f ef       	ldi	r18, 0xFF	; 255
    50e2:	3f ef       	ldi	r19, 0xFF	; 255
    50e4:	4f ef       	ldi	r20, 0xFF	; 255
    50e6:	5f e7       	ldi	r21, 0x7F	; 127
    50e8:	04 c0       	rjmp	.+8      	; 0x50f2 <__fixsfsi+0x9c>
    50ea:	20 e0       	ldi	r18, 0x00	; 0
    50ec:	30 e0       	ldi	r19, 0x00	; 0
    50ee:	40 e0       	ldi	r20, 0x00	; 0
    50f0:	50 e8       	ldi	r21, 0x80	; 128
    50f2:	b9 01       	movw	r22, r18
    50f4:	ca 01       	movw	r24, r20
    50f6:	2c 96       	adiw	r28, 0x0c	; 12
    50f8:	e2 e0       	ldi	r30, 0x02	; 2
    50fa:	0c 94 2d 2b 	jmp	0x565a	; 0x565a <__epilogue_restores__+0x20>

000050fe <__floatunsisf>:
    50fe:	a8 e0       	ldi	r26, 0x08	; 8
    5100:	b0 e0       	ldi	r27, 0x00	; 0
    5102:	e5 e8       	ldi	r30, 0x85	; 133
    5104:	f8 e2       	ldi	r31, 0x28	; 40
    5106:	0c 94 09 2b 	jmp	0x5612	; 0x5612 <__prologue_saves__+0x10>
    510a:	7b 01       	movw	r14, r22
    510c:	8c 01       	movw	r16, r24
    510e:	61 15       	cp	r22, r1
    5110:	71 05       	cpc	r23, r1
    5112:	81 05       	cpc	r24, r1
    5114:	91 05       	cpc	r25, r1
    5116:	19 f4       	brne	.+6      	; 0x511e <__floatunsisf+0x20>
    5118:	82 e0       	ldi	r24, 0x02	; 2
    511a:	89 83       	std	Y+1, r24	; 0x01
    511c:	60 c0       	rjmp	.+192    	; 0x51de <__floatunsisf+0xe0>
    511e:	83 e0       	ldi	r24, 0x03	; 3
    5120:	89 83       	std	Y+1, r24	; 0x01
    5122:	8e e1       	ldi	r24, 0x1E	; 30
    5124:	c8 2e       	mov	r12, r24
    5126:	d1 2c       	mov	r13, r1
    5128:	dc 82       	std	Y+4, r13	; 0x04
    512a:	cb 82       	std	Y+3, r12	; 0x03
    512c:	ed 82       	std	Y+5, r14	; 0x05
    512e:	fe 82       	std	Y+6, r15	; 0x06
    5130:	0f 83       	std	Y+7, r16	; 0x07
    5132:	18 87       	std	Y+8, r17	; 0x08
    5134:	c8 01       	movw	r24, r16
    5136:	b7 01       	movw	r22, r14
    5138:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <__clzsi2>
    513c:	fc 01       	movw	r30, r24
    513e:	31 97       	sbiw	r30, 0x01	; 1
    5140:	f7 ff       	sbrs	r31, 7
    5142:	3b c0       	rjmp	.+118    	; 0x51ba <__floatunsisf+0xbc>
    5144:	22 27       	eor	r18, r18
    5146:	33 27       	eor	r19, r19
    5148:	2e 1b       	sub	r18, r30
    514a:	3f 0b       	sbc	r19, r31
    514c:	57 01       	movw	r10, r14
    514e:	68 01       	movw	r12, r16
    5150:	02 2e       	mov	r0, r18
    5152:	04 c0       	rjmp	.+8      	; 0x515c <__floatunsisf+0x5e>
    5154:	d6 94       	lsr	r13
    5156:	c7 94       	ror	r12
    5158:	b7 94       	ror	r11
    515a:	a7 94       	ror	r10
    515c:	0a 94       	dec	r0
    515e:	d2 f7       	brpl	.-12     	; 0x5154 <__floatunsisf+0x56>
    5160:	40 e0       	ldi	r20, 0x00	; 0
    5162:	50 e0       	ldi	r21, 0x00	; 0
    5164:	60 e0       	ldi	r22, 0x00	; 0
    5166:	70 e0       	ldi	r23, 0x00	; 0
    5168:	81 e0       	ldi	r24, 0x01	; 1
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	a0 e0       	ldi	r26, 0x00	; 0
    516e:	b0 e0       	ldi	r27, 0x00	; 0
    5170:	04 c0       	rjmp	.+8      	; 0x517a <__floatunsisf+0x7c>
    5172:	88 0f       	add	r24, r24
    5174:	99 1f       	adc	r25, r25
    5176:	aa 1f       	adc	r26, r26
    5178:	bb 1f       	adc	r27, r27
    517a:	2a 95       	dec	r18
    517c:	d2 f7       	brpl	.-12     	; 0x5172 <__floatunsisf+0x74>
    517e:	01 97       	sbiw	r24, 0x01	; 1
    5180:	a1 09       	sbc	r26, r1
    5182:	b1 09       	sbc	r27, r1
    5184:	8e 21       	and	r24, r14
    5186:	9f 21       	and	r25, r15
    5188:	a0 23       	and	r26, r16
    518a:	b1 23       	and	r27, r17
    518c:	00 97       	sbiw	r24, 0x00	; 0
    518e:	a1 05       	cpc	r26, r1
    5190:	b1 05       	cpc	r27, r1
    5192:	21 f0       	breq	.+8      	; 0x519c <__floatunsisf+0x9e>
    5194:	41 e0       	ldi	r20, 0x01	; 1
    5196:	50 e0       	ldi	r21, 0x00	; 0
    5198:	60 e0       	ldi	r22, 0x00	; 0
    519a:	70 e0       	ldi	r23, 0x00	; 0
    519c:	4a 29       	or	r20, r10
    519e:	5b 29       	or	r21, r11
    51a0:	6c 29       	or	r22, r12
    51a2:	7d 29       	or	r23, r13
    51a4:	4d 83       	std	Y+5, r20	; 0x05
    51a6:	5e 83       	std	Y+6, r21	; 0x06
    51a8:	6f 83       	std	Y+7, r22	; 0x07
    51aa:	78 87       	std	Y+8, r23	; 0x08
    51ac:	8e e1       	ldi	r24, 0x1E	; 30
    51ae:	90 e0       	ldi	r25, 0x00	; 0
    51b0:	8e 1b       	sub	r24, r30
    51b2:	9f 0b       	sbc	r25, r31
    51b4:	9c 83       	std	Y+4, r25	; 0x04
    51b6:	8b 83       	std	Y+3, r24	; 0x03
    51b8:	12 c0       	rjmp	.+36     	; 0x51de <__floatunsisf+0xe0>
    51ba:	30 97       	sbiw	r30, 0x00	; 0
    51bc:	81 f0       	breq	.+32     	; 0x51de <__floatunsisf+0xe0>
    51be:	0e 2e       	mov	r0, r30
    51c0:	04 c0       	rjmp	.+8      	; 0x51ca <__floatunsisf+0xcc>
    51c2:	ee 0c       	add	r14, r14
    51c4:	ff 1c       	adc	r15, r15
    51c6:	00 1f       	adc	r16, r16
    51c8:	11 1f       	adc	r17, r17
    51ca:	0a 94       	dec	r0
    51cc:	d2 f7       	brpl	.-12     	; 0x51c2 <__floatunsisf+0xc4>
    51ce:	ed 82       	std	Y+5, r14	; 0x05
    51d0:	fe 82       	std	Y+6, r15	; 0x06
    51d2:	0f 83       	std	Y+7, r16	; 0x07
    51d4:	18 87       	std	Y+8, r17	; 0x08
    51d6:	ce 1a       	sub	r12, r30
    51d8:	df 0a       	sbc	r13, r31
    51da:	dc 82       	std	Y+4, r13	; 0x04
    51dc:	cb 82       	std	Y+3, r12	; 0x03
    51de:	1a 82       	std	Y+2, r1	; 0x02
    51e0:	ce 01       	movw	r24, r28
    51e2:	01 96       	adiw	r24, 0x01	; 1
    51e4:	0e 94 47 29 	call	0x528e	; 0x528e <__pack_f>
    51e8:	28 96       	adiw	r28, 0x08	; 8
    51ea:	ea e0       	ldi	r30, 0x0A	; 10
    51ec:	0c 94 25 2b 	jmp	0x564a	; 0x564a <__epilogue_restores__+0x10>

000051f0 <__clzsi2>:
    51f0:	ef 92       	push	r14
    51f2:	ff 92       	push	r15
    51f4:	0f 93       	push	r16
    51f6:	1f 93       	push	r17
    51f8:	7b 01       	movw	r14, r22
    51fa:	8c 01       	movw	r16, r24
    51fc:	80 e0       	ldi	r24, 0x00	; 0
    51fe:	e8 16       	cp	r14, r24
    5200:	80 e0       	ldi	r24, 0x00	; 0
    5202:	f8 06       	cpc	r15, r24
    5204:	81 e0       	ldi	r24, 0x01	; 1
    5206:	08 07       	cpc	r16, r24
    5208:	80 e0       	ldi	r24, 0x00	; 0
    520a:	18 07       	cpc	r17, r24
    520c:	88 f4       	brcc	.+34     	; 0x5230 <__clzsi2+0x40>
    520e:	8f ef       	ldi	r24, 0xFF	; 255
    5210:	e8 16       	cp	r14, r24
    5212:	f1 04       	cpc	r15, r1
    5214:	01 05       	cpc	r16, r1
    5216:	11 05       	cpc	r17, r1
    5218:	31 f0       	breq	.+12     	; 0x5226 <__clzsi2+0x36>
    521a:	28 f0       	brcs	.+10     	; 0x5226 <__clzsi2+0x36>
    521c:	88 e0       	ldi	r24, 0x08	; 8
    521e:	90 e0       	ldi	r25, 0x00	; 0
    5220:	a0 e0       	ldi	r26, 0x00	; 0
    5222:	b0 e0       	ldi	r27, 0x00	; 0
    5224:	17 c0       	rjmp	.+46     	; 0x5254 <__clzsi2+0x64>
    5226:	80 e0       	ldi	r24, 0x00	; 0
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	a0 e0       	ldi	r26, 0x00	; 0
    522c:	b0 e0       	ldi	r27, 0x00	; 0
    522e:	12 c0       	rjmp	.+36     	; 0x5254 <__clzsi2+0x64>
    5230:	80 e0       	ldi	r24, 0x00	; 0
    5232:	e8 16       	cp	r14, r24
    5234:	80 e0       	ldi	r24, 0x00	; 0
    5236:	f8 06       	cpc	r15, r24
    5238:	80 e0       	ldi	r24, 0x00	; 0
    523a:	08 07       	cpc	r16, r24
    523c:	81 e0       	ldi	r24, 0x01	; 1
    523e:	18 07       	cpc	r17, r24
    5240:	28 f0       	brcs	.+10     	; 0x524c <__clzsi2+0x5c>
    5242:	88 e1       	ldi	r24, 0x18	; 24
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	a0 e0       	ldi	r26, 0x00	; 0
    5248:	b0 e0       	ldi	r27, 0x00	; 0
    524a:	04 c0       	rjmp	.+8      	; 0x5254 <__clzsi2+0x64>
    524c:	80 e1       	ldi	r24, 0x10	; 16
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	a0 e0       	ldi	r26, 0x00	; 0
    5252:	b0 e0       	ldi	r27, 0x00	; 0
    5254:	20 e2       	ldi	r18, 0x20	; 32
    5256:	30 e0       	ldi	r19, 0x00	; 0
    5258:	40 e0       	ldi	r20, 0x00	; 0
    525a:	50 e0       	ldi	r21, 0x00	; 0
    525c:	28 1b       	sub	r18, r24
    525e:	39 0b       	sbc	r19, r25
    5260:	4a 0b       	sbc	r20, r26
    5262:	5b 0b       	sbc	r21, r27
    5264:	04 c0       	rjmp	.+8      	; 0x526e <__clzsi2+0x7e>
    5266:	16 95       	lsr	r17
    5268:	07 95       	ror	r16
    526a:	f7 94       	ror	r15
    526c:	e7 94       	ror	r14
    526e:	8a 95       	dec	r24
    5270:	d2 f7       	brpl	.-12     	; 0x5266 <__clzsi2+0x76>
    5272:	f7 01       	movw	r30, r14
    5274:	ea 5f       	subi	r30, 0xFA	; 250
    5276:	fc 4f       	sbci	r31, 0xFC	; 252
    5278:	80 81       	ld	r24, Z
    527a:	28 1b       	sub	r18, r24
    527c:	31 09       	sbc	r19, r1
    527e:	41 09       	sbc	r20, r1
    5280:	51 09       	sbc	r21, r1
    5282:	c9 01       	movw	r24, r18
    5284:	1f 91       	pop	r17
    5286:	0f 91       	pop	r16
    5288:	ff 90       	pop	r15
    528a:	ef 90       	pop	r14
    528c:	08 95       	ret

0000528e <__pack_f>:
    528e:	df 92       	push	r13
    5290:	ef 92       	push	r14
    5292:	ff 92       	push	r15
    5294:	0f 93       	push	r16
    5296:	1f 93       	push	r17
    5298:	fc 01       	movw	r30, r24
    529a:	e4 80       	ldd	r14, Z+4	; 0x04
    529c:	f5 80       	ldd	r15, Z+5	; 0x05
    529e:	06 81       	ldd	r16, Z+6	; 0x06
    52a0:	17 81       	ldd	r17, Z+7	; 0x07
    52a2:	d1 80       	ldd	r13, Z+1	; 0x01
    52a4:	80 81       	ld	r24, Z
    52a6:	82 30       	cpi	r24, 0x02	; 2
    52a8:	48 f4       	brcc	.+18     	; 0x52bc <__pack_f+0x2e>
    52aa:	80 e0       	ldi	r24, 0x00	; 0
    52ac:	90 e0       	ldi	r25, 0x00	; 0
    52ae:	a0 e1       	ldi	r26, 0x10	; 16
    52b0:	b0 e0       	ldi	r27, 0x00	; 0
    52b2:	e8 2a       	or	r14, r24
    52b4:	f9 2a       	or	r15, r25
    52b6:	0a 2b       	or	r16, r26
    52b8:	1b 2b       	or	r17, r27
    52ba:	a5 c0       	rjmp	.+330    	; 0x5406 <__pack_f+0x178>
    52bc:	84 30       	cpi	r24, 0x04	; 4
    52be:	09 f4       	brne	.+2      	; 0x52c2 <__pack_f+0x34>
    52c0:	9f c0       	rjmp	.+318    	; 0x5400 <__pack_f+0x172>
    52c2:	82 30       	cpi	r24, 0x02	; 2
    52c4:	21 f4       	brne	.+8      	; 0x52ce <__pack_f+0x40>
    52c6:	ee 24       	eor	r14, r14
    52c8:	ff 24       	eor	r15, r15
    52ca:	87 01       	movw	r16, r14
    52cc:	05 c0       	rjmp	.+10     	; 0x52d8 <__pack_f+0x4a>
    52ce:	e1 14       	cp	r14, r1
    52d0:	f1 04       	cpc	r15, r1
    52d2:	01 05       	cpc	r16, r1
    52d4:	11 05       	cpc	r17, r1
    52d6:	19 f4       	brne	.+6      	; 0x52de <__pack_f+0x50>
    52d8:	e0 e0       	ldi	r30, 0x00	; 0
    52da:	f0 e0       	ldi	r31, 0x00	; 0
    52dc:	96 c0       	rjmp	.+300    	; 0x540a <__pack_f+0x17c>
    52de:	62 81       	ldd	r22, Z+2	; 0x02
    52e0:	73 81       	ldd	r23, Z+3	; 0x03
    52e2:	9f ef       	ldi	r25, 0xFF	; 255
    52e4:	62 38       	cpi	r22, 0x82	; 130
    52e6:	79 07       	cpc	r23, r25
    52e8:	0c f0       	brlt	.+2      	; 0x52ec <__pack_f+0x5e>
    52ea:	5b c0       	rjmp	.+182    	; 0x53a2 <__pack_f+0x114>
    52ec:	22 e8       	ldi	r18, 0x82	; 130
    52ee:	3f ef       	ldi	r19, 0xFF	; 255
    52f0:	26 1b       	sub	r18, r22
    52f2:	37 0b       	sbc	r19, r23
    52f4:	2a 31       	cpi	r18, 0x1A	; 26
    52f6:	31 05       	cpc	r19, r1
    52f8:	2c f0       	brlt	.+10     	; 0x5304 <__pack_f+0x76>
    52fa:	20 e0       	ldi	r18, 0x00	; 0
    52fc:	30 e0       	ldi	r19, 0x00	; 0
    52fe:	40 e0       	ldi	r20, 0x00	; 0
    5300:	50 e0       	ldi	r21, 0x00	; 0
    5302:	2a c0       	rjmp	.+84     	; 0x5358 <__pack_f+0xca>
    5304:	b8 01       	movw	r22, r16
    5306:	a7 01       	movw	r20, r14
    5308:	02 2e       	mov	r0, r18
    530a:	04 c0       	rjmp	.+8      	; 0x5314 <__pack_f+0x86>
    530c:	76 95       	lsr	r23
    530e:	67 95       	ror	r22
    5310:	57 95       	ror	r21
    5312:	47 95       	ror	r20
    5314:	0a 94       	dec	r0
    5316:	d2 f7       	brpl	.-12     	; 0x530c <__pack_f+0x7e>
    5318:	81 e0       	ldi	r24, 0x01	; 1
    531a:	90 e0       	ldi	r25, 0x00	; 0
    531c:	a0 e0       	ldi	r26, 0x00	; 0
    531e:	b0 e0       	ldi	r27, 0x00	; 0
    5320:	04 c0       	rjmp	.+8      	; 0x532a <__pack_f+0x9c>
    5322:	88 0f       	add	r24, r24
    5324:	99 1f       	adc	r25, r25
    5326:	aa 1f       	adc	r26, r26
    5328:	bb 1f       	adc	r27, r27
    532a:	2a 95       	dec	r18
    532c:	d2 f7       	brpl	.-12     	; 0x5322 <__pack_f+0x94>
    532e:	01 97       	sbiw	r24, 0x01	; 1
    5330:	a1 09       	sbc	r26, r1
    5332:	b1 09       	sbc	r27, r1
    5334:	8e 21       	and	r24, r14
    5336:	9f 21       	and	r25, r15
    5338:	a0 23       	and	r26, r16
    533a:	b1 23       	and	r27, r17
    533c:	00 97       	sbiw	r24, 0x00	; 0
    533e:	a1 05       	cpc	r26, r1
    5340:	b1 05       	cpc	r27, r1
    5342:	21 f0       	breq	.+8      	; 0x534c <__pack_f+0xbe>
    5344:	81 e0       	ldi	r24, 0x01	; 1
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	a0 e0       	ldi	r26, 0x00	; 0
    534a:	b0 e0       	ldi	r27, 0x00	; 0
    534c:	9a 01       	movw	r18, r20
    534e:	ab 01       	movw	r20, r22
    5350:	28 2b       	or	r18, r24
    5352:	39 2b       	or	r19, r25
    5354:	4a 2b       	or	r20, r26
    5356:	5b 2b       	or	r21, r27
    5358:	da 01       	movw	r26, r20
    535a:	c9 01       	movw	r24, r18
    535c:	8f 77       	andi	r24, 0x7F	; 127
    535e:	90 70       	andi	r25, 0x00	; 0
    5360:	a0 70       	andi	r26, 0x00	; 0
    5362:	b0 70       	andi	r27, 0x00	; 0
    5364:	80 34       	cpi	r24, 0x40	; 64
    5366:	91 05       	cpc	r25, r1
    5368:	a1 05       	cpc	r26, r1
    536a:	b1 05       	cpc	r27, r1
    536c:	39 f4       	brne	.+14     	; 0x537c <__pack_f+0xee>
    536e:	27 ff       	sbrs	r18, 7
    5370:	09 c0       	rjmp	.+18     	; 0x5384 <__pack_f+0xf6>
    5372:	20 5c       	subi	r18, 0xC0	; 192
    5374:	3f 4f       	sbci	r19, 0xFF	; 255
    5376:	4f 4f       	sbci	r20, 0xFF	; 255
    5378:	5f 4f       	sbci	r21, 0xFF	; 255
    537a:	04 c0       	rjmp	.+8      	; 0x5384 <__pack_f+0xf6>
    537c:	21 5c       	subi	r18, 0xC1	; 193
    537e:	3f 4f       	sbci	r19, 0xFF	; 255
    5380:	4f 4f       	sbci	r20, 0xFF	; 255
    5382:	5f 4f       	sbci	r21, 0xFF	; 255
    5384:	e0 e0       	ldi	r30, 0x00	; 0
    5386:	f0 e0       	ldi	r31, 0x00	; 0
    5388:	20 30       	cpi	r18, 0x00	; 0
    538a:	a0 e0       	ldi	r26, 0x00	; 0
    538c:	3a 07       	cpc	r19, r26
    538e:	a0 e0       	ldi	r26, 0x00	; 0
    5390:	4a 07       	cpc	r20, r26
    5392:	a0 e4       	ldi	r26, 0x40	; 64
    5394:	5a 07       	cpc	r21, r26
    5396:	10 f0       	brcs	.+4      	; 0x539c <__pack_f+0x10e>
    5398:	e1 e0       	ldi	r30, 0x01	; 1
    539a:	f0 e0       	ldi	r31, 0x00	; 0
    539c:	79 01       	movw	r14, r18
    539e:	8a 01       	movw	r16, r20
    53a0:	27 c0       	rjmp	.+78     	; 0x53f0 <__pack_f+0x162>
    53a2:	60 38       	cpi	r22, 0x80	; 128
    53a4:	71 05       	cpc	r23, r1
    53a6:	64 f5       	brge	.+88     	; 0x5400 <__pack_f+0x172>
    53a8:	fb 01       	movw	r30, r22
    53aa:	e1 58       	subi	r30, 0x81	; 129
    53ac:	ff 4f       	sbci	r31, 0xFF	; 255
    53ae:	d8 01       	movw	r26, r16
    53b0:	c7 01       	movw	r24, r14
    53b2:	8f 77       	andi	r24, 0x7F	; 127
    53b4:	90 70       	andi	r25, 0x00	; 0
    53b6:	a0 70       	andi	r26, 0x00	; 0
    53b8:	b0 70       	andi	r27, 0x00	; 0
    53ba:	80 34       	cpi	r24, 0x40	; 64
    53bc:	91 05       	cpc	r25, r1
    53be:	a1 05       	cpc	r26, r1
    53c0:	b1 05       	cpc	r27, r1
    53c2:	39 f4       	brne	.+14     	; 0x53d2 <__pack_f+0x144>
    53c4:	e7 fe       	sbrs	r14, 7
    53c6:	0d c0       	rjmp	.+26     	; 0x53e2 <__pack_f+0x154>
    53c8:	80 e4       	ldi	r24, 0x40	; 64
    53ca:	90 e0       	ldi	r25, 0x00	; 0
    53cc:	a0 e0       	ldi	r26, 0x00	; 0
    53ce:	b0 e0       	ldi	r27, 0x00	; 0
    53d0:	04 c0       	rjmp	.+8      	; 0x53da <__pack_f+0x14c>
    53d2:	8f e3       	ldi	r24, 0x3F	; 63
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	a0 e0       	ldi	r26, 0x00	; 0
    53d8:	b0 e0       	ldi	r27, 0x00	; 0
    53da:	e8 0e       	add	r14, r24
    53dc:	f9 1e       	adc	r15, r25
    53de:	0a 1f       	adc	r16, r26
    53e0:	1b 1f       	adc	r17, r27
    53e2:	17 ff       	sbrs	r17, 7
    53e4:	05 c0       	rjmp	.+10     	; 0x53f0 <__pack_f+0x162>
    53e6:	16 95       	lsr	r17
    53e8:	07 95       	ror	r16
    53ea:	f7 94       	ror	r15
    53ec:	e7 94       	ror	r14
    53ee:	31 96       	adiw	r30, 0x01	; 1
    53f0:	87 e0       	ldi	r24, 0x07	; 7
    53f2:	16 95       	lsr	r17
    53f4:	07 95       	ror	r16
    53f6:	f7 94       	ror	r15
    53f8:	e7 94       	ror	r14
    53fa:	8a 95       	dec	r24
    53fc:	d1 f7       	brne	.-12     	; 0x53f2 <__pack_f+0x164>
    53fe:	05 c0       	rjmp	.+10     	; 0x540a <__pack_f+0x17c>
    5400:	ee 24       	eor	r14, r14
    5402:	ff 24       	eor	r15, r15
    5404:	87 01       	movw	r16, r14
    5406:	ef ef       	ldi	r30, 0xFF	; 255
    5408:	f0 e0       	ldi	r31, 0x00	; 0
    540a:	6e 2f       	mov	r22, r30
    540c:	67 95       	ror	r22
    540e:	66 27       	eor	r22, r22
    5410:	67 95       	ror	r22
    5412:	90 2f       	mov	r25, r16
    5414:	9f 77       	andi	r25, 0x7F	; 127
    5416:	d7 94       	ror	r13
    5418:	dd 24       	eor	r13, r13
    541a:	d7 94       	ror	r13
    541c:	8e 2f       	mov	r24, r30
    541e:	86 95       	lsr	r24
    5420:	49 2f       	mov	r20, r25
    5422:	46 2b       	or	r20, r22
    5424:	58 2f       	mov	r21, r24
    5426:	5d 29       	or	r21, r13
    5428:	b7 01       	movw	r22, r14
    542a:	ca 01       	movw	r24, r20
    542c:	1f 91       	pop	r17
    542e:	0f 91       	pop	r16
    5430:	ff 90       	pop	r15
    5432:	ef 90       	pop	r14
    5434:	df 90       	pop	r13
    5436:	08 95       	ret

00005438 <__unpack_f>:
    5438:	fc 01       	movw	r30, r24
    543a:	db 01       	movw	r26, r22
    543c:	40 81       	ld	r20, Z
    543e:	51 81       	ldd	r21, Z+1	; 0x01
    5440:	22 81       	ldd	r18, Z+2	; 0x02
    5442:	62 2f       	mov	r22, r18
    5444:	6f 77       	andi	r22, 0x7F	; 127
    5446:	70 e0       	ldi	r23, 0x00	; 0
    5448:	22 1f       	adc	r18, r18
    544a:	22 27       	eor	r18, r18
    544c:	22 1f       	adc	r18, r18
    544e:	93 81       	ldd	r25, Z+3	; 0x03
    5450:	89 2f       	mov	r24, r25
    5452:	88 0f       	add	r24, r24
    5454:	82 2b       	or	r24, r18
    5456:	28 2f       	mov	r18, r24
    5458:	30 e0       	ldi	r19, 0x00	; 0
    545a:	99 1f       	adc	r25, r25
    545c:	99 27       	eor	r25, r25
    545e:	99 1f       	adc	r25, r25
    5460:	11 96       	adiw	r26, 0x01	; 1
    5462:	9c 93       	st	X, r25
    5464:	11 97       	sbiw	r26, 0x01	; 1
    5466:	21 15       	cp	r18, r1
    5468:	31 05       	cpc	r19, r1
    546a:	a9 f5       	brne	.+106    	; 0x54d6 <__unpack_f+0x9e>
    546c:	41 15       	cp	r20, r1
    546e:	51 05       	cpc	r21, r1
    5470:	61 05       	cpc	r22, r1
    5472:	71 05       	cpc	r23, r1
    5474:	11 f4       	brne	.+4      	; 0x547a <__unpack_f+0x42>
    5476:	82 e0       	ldi	r24, 0x02	; 2
    5478:	37 c0       	rjmp	.+110    	; 0x54e8 <__unpack_f+0xb0>
    547a:	82 e8       	ldi	r24, 0x82	; 130
    547c:	9f ef       	ldi	r25, 0xFF	; 255
    547e:	13 96       	adiw	r26, 0x03	; 3
    5480:	9c 93       	st	X, r25
    5482:	8e 93       	st	-X, r24
    5484:	12 97       	sbiw	r26, 0x02	; 2
    5486:	9a 01       	movw	r18, r20
    5488:	ab 01       	movw	r20, r22
    548a:	67 e0       	ldi	r22, 0x07	; 7
    548c:	22 0f       	add	r18, r18
    548e:	33 1f       	adc	r19, r19
    5490:	44 1f       	adc	r20, r20
    5492:	55 1f       	adc	r21, r21
    5494:	6a 95       	dec	r22
    5496:	d1 f7       	brne	.-12     	; 0x548c <__unpack_f+0x54>
    5498:	83 e0       	ldi	r24, 0x03	; 3
    549a:	8c 93       	st	X, r24
    549c:	0d c0       	rjmp	.+26     	; 0x54b8 <__unpack_f+0x80>
    549e:	22 0f       	add	r18, r18
    54a0:	33 1f       	adc	r19, r19
    54a2:	44 1f       	adc	r20, r20
    54a4:	55 1f       	adc	r21, r21
    54a6:	12 96       	adiw	r26, 0x02	; 2
    54a8:	8d 91       	ld	r24, X+
    54aa:	9c 91       	ld	r25, X
    54ac:	13 97       	sbiw	r26, 0x03	; 3
    54ae:	01 97       	sbiw	r24, 0x01	; 1
    54b0:	13 96       	adiw	r26, 0x03	; 3
    54b2:	9c 93       	st	X, r25
    54b4:	8e 93       	st	-X, r24
    54b6:	12 97       	sbiw	r26, 0x02	; 2
    54b8:	20 30       	cpi	r18, 0x00	; 0
    54ba:	80 e0       	ldi	r24, 0x00	; 0
    54bc:	38 07       	cpc	r19, r24
    54be:	80 e0       	ldi	r24, 0x00	; 0
    54c0:	48 07       	cpc	r20, r24
    54c2:	80 e4       	ldi	r24, 0x40	; 64
    54c4:	58 07       	cpc	r21, r24
    54c6:	58 f3       	brcs	.-42     	; 0x549e <__unpack_f+0x66>
    54c8:	14 96       	adiw	r26, 0x04	; 4
    54ca:	2d 93       	st	X+, r18
    54cc:	3d 93       	st	X+, r19
    54ce:	4d 93       	st	X+, r20
    54d0:	5c 93       	st	X, r21
    54d2:	17 97       	sbiw	r26, 0x07	; 7
    54d4:	08 95       	ret
    54d6:	2f 3f       	cpi	r18, 0xFF	; 255
    54d8:	31 05       	cpc	r19, r1
    54da:	79 f4       	brne	.+30     	; 0x54fa <__unpack_f+0xc2>
    54dc:	41 15       	cp	r20, r1
    54de:	51 05       	cpc	r21, r1
    54e0:	61 05       	cpc	r22, r1
    54e2:	71 05       	cpc	r23, r1
    54e4:	19 f4       	brne	.+6      	; 0x54ec <__unpack_f+0xb4>
    54e6:	84 e0       	ldi	r24, 0x04	; 4
    54e8:	8c 93       	st	X, r24
    54ea:	08 95       	ret
    54ec:	64 ff       	sbrs	r22, 4
    54ee:	03 c0       	rjmp	.+6      	; 0x54f6 <__unpack_f+0xbe>
    54f0:	81 e0       	ldi	r24, 0x01	; 1
    54f2:	8c 93       	st	X, r24
    54f4:	12 c0       	rjmp	.+36     	; 0x551a <__unpack_f+0xe2>
    54f6:	1c 92       	st	X, r1
    54f8:	10 c0       	rjmp	.+32     	; 0x551a <__unpack_f+0xe2>
    54fa:	2f 57       	subi	r18, 0x7F	; 127
    54fc:	30 40       	sbci	r19, 0x00	; 0
    54fe:	13 96       	adiw	r26, 0x03	; 3
    5500:	3c 93       	st	X, r19
    5502:	2e 93       	st	-X, r18
    5504:	12 97       	sbiw	r26, 0x02	; 2
    5506:	83 e0       	ldi	r24, 0x03	; 3
    5508:	8c 93       	st	X, r24
    550a:	87 e0       	ldi	r24, 0x07	; 7
    550c:	44 0f       	add	r20, r20
    550e:	55 1f       	adc	r21, r21
    5510:	66 1f       	adc	r22, r22
    5512:	77 1f       	adc	r23, r23
    5514:	8a 95       	dec	r24
    5516:	d1 f7       	brne	.-12     	; 0x550c <__unpack_f+0xd4>
    5518:	70 64       	ori	r23, 0x40	; 64
    551a:	14 96       	adiw	r26, 0x04	; 4
    551c:	4d 93       	st	X+, r20
    551e:	5d 93       	st	X+, r21
    5520:	6d 93       	st	X+, r22
    5522:	7c 93       	st	X, r23
    5524:	17 97       	sbiw	r26, 0x07	; 7
    5526:	08 95       	ret

00005528 <__fpcmp_parts_f>:
    5528:	1f 93       	push	r17
    552a:	dc 01       	movw	r26, r24
    552c:	fb 01       	movw	r30, r22
    552e:	9c 91       	ld	r25, X
    5530:	92 30       	cpi	r25, 0x02	; 2
    5532:	08 f4       	brcc	.+2      	; 0x5536 <__fpcmp_parts_f+0xe>
    5534:	47 c0       	rjmp	.+142    	; 0x55c4 <__fpcmp_parts_f+0x9c>
    5536:	80 81       	ld	r24, Z
    5538:	82 30       	cpi	r24, 0x02	; 2
    553a:	08 f4       	brcc	.+2      	; 0x553e <__fpcmp_parts_f+0x16>
    553c:	43 c0       	rjmp	.+134    	; 0x55c4 <__fpcmp_parts_f+0x9c>
    553e:	94 30       	cpi	r25, 0x04	; 4
    5540:	51 f4       	brne	.+20     	; 0x5556 <__fpcmp_parts_f+0x2e>
    5542:	11 96       	adiw	r26, 0x01	; 1
    5544:	1c 91       	ld	r17, X
    5546:	84 30       	cpi	r24, 0x04	; 4
    5548:	99 f5       	brne	.+102    	; 0x55b0 <__fpcmp_parts_f+0x88>
    554a:	81 81       	ldd	r24, Z+1	; 0x01
    554c:	68 2f       	mov	r22, r24
    554e:	70 e0       	ldi	r23, 0x00	; 0
    5550:	61 1b       	sub	r22, r17
    5552:	71 09       	sbc	r23, r1
    5554:	3f c0       	rjmp	.+126    	; 0x55d4 <__fpcmp_parts_f+0xac>
    5556:	84 30       	cpi	r24, 0x04	; 4
    5558:	21 f0       	breq	.+8      	; 0x5562 <__fpcmp_parts_f+0x3a>
    555a:	92 30       	cpi	r25, 0x02	; 2
    555c:	31 f4       	brne	.+12     	; 0x556a <__fpcmp_parts_f+0x42>
    555e:	82 30       	cpi	r24, 0x02	; 2
    5560:	b9 f1       	breq	.+110    	; 0x55d0 <__fpcmp_parts_f+0xa8>
    5562:	81 81       	ldd	r24, Z+1	; 0x01
    5564:	88 23       	and	r24, r24
    5566:	89 f1       	breq	.+98     	; 0x55ca <__fpcmp_parts_f+0xa2>
    5568:	2d c0       	rjmp	.+90     	; 0x55c4 <__fpcmp_parts_f+0x9c>
    556a:	11 96       	adiw	r26, 0x01	; 1
    556c:	1c 91       	ld	r17, X
    556e:	11 97       	sbiw	r26, 0x01	; 1
    5570:	82 30       	cpi	r24, 0x02	; 2
    5572:	f1 f0       	breq	.+60     	; 0x55b0 <__fpcmp_parts_f+0x88>
    5574:	81 81       	ldd	r24, Z+1	; 0x01
    5576:	18 17       	cp	r17, r24
    5578:	d9 f4       	brne	.+54     	; 0x55b0 <__fpcmp_parts_f+0x88>
    557a:	12 96       	adiw	r26, 0x02	; 2
    557c:	2d 91       	ld	r18, X+
    557e:	3c 91       	ld	r19, X
    5580:	13 97       	sbiw	r26, 0x03	; 3
    5582:	82 81       	ldd	r24, Z+2	; 0x02
    5584:	93 81       	ldd	r25, Z+3	; 0x03
    5586:	82 17       	cp	r24, r18
    5588:	93 07       	cpc	r25, r19
    558a:	94 f0       	brlt	.+36     	; 0x55b0 <__fpcmp_parts_f+0x88>
    558c:	28 17       	cp	r18, r24
    558e:	39 07       	cpc	r19, r25
    5590:	bc f0       	brlt	.+46     	; 0x55c0 <__fpcmp_parts_f+0x98>
    5592:	14 96       	adiw	r26, 0x04	; 4
    5594:	8d 91       	ld	r24, X+
    5596:	9d 91       	ld	r25, X+
    5598:	0d 90       	ld	r0, X+
    559a:	bc 91       	ld	r27, X
    559c:	a0 2d       	mov	r26, r0
    559e:	24 81       	ldd	r18, Z+4	; 0x04
    55a0:	35 81       	ldd	r19, Z+5	; 0x05
    55a2:	46 81       	ldd	r20, Z+6	; 0x06
    55a4:	57 81       	ldd	r21, Z+7	; 0x07
    55a6:	28 17       	cp	r18, r24
    55a8:	39 07       	cpc	r19, r25
    55aa:	4a 07       	cpc	r20, r26
    55ac:	5b 07       	cpc	r21, r27
    55ae:	18 f4       	brcc	.+6      	; 0x55b6 <__fpcmp_parts_f+0x8e>
    55b0:	11 23       	and	r17, r17
    55b2:	41 f0       	breq	.+16     	; 0x55c4 <__fpcmp_parts_f+0x9c>
    55b4:	0a c0       	rjmp	.+20     	; 0x55ca <__fpcmp_parts_f+0xa2>
    55b6:	82 17       	cp	r24, r18
    55b8:	93 07       	cpc	r25, r19
    55ba:	a4 07       	cpc	r26, r20
    55bc:	b5 07       	cpc	r27, r21
    55be:	40 f4       	brcc	.+16     	; 0x55d0 <__fpcmp_parts_f+0xa8>
    55c0:	11 23       	and	r17, r17
    55c2:	19 f0       	breq	.+6      	; 0x55ca <__fpcmp_parts_f+0xa2>
    55c4:	61 e0       	ldi	r22, 0x01	; 1
    55c6:	70 e0       	ldi	r23, 0x00	; 0
    55c8:	05 c0       	rjmp	.+10     	; 0x55d4 <__fpcmp_parts_f+0xac>
    55ca:	6f ef       	ldi	r22, 0xFF	; 255
    55cc:	7f ef       	ldi	r23, 0xFF	; 255
    55ce:	02 c0       	rjmp	.+4      	; 0x55d4 <__fpcmp_parts_f+0xac>
    55d0:	60 e0       	ldi	r22, 0x00	; 0
    55d2:	70 e0       	ldi	r23, 0x00	; 0
    55d4:	cb 01       	movw	r24, r22
    55d6:	1f 91       	pop	r17
    55d8:	08 95       	ret

000055da <__udivmodhi4>:
    55da:	aa 1b       	sub	r26, r26
    55dc:	bb 1b       	sub	r27, r27
    55de:	51 e1       	ldi	r21, 0x11	; 17
    55e0:	07 c0       	rjmp	.+14     	; 0x55f0 <__udivmodhi4_ep>

000055e2 <__udivmodhi4_loop>:
    55e2:	aa 1f       	adc	r26, r26
    55e4:	bb 1f       	adc	r27, r27
    55e6:	a6 17       	cp	r26, r22
    55e8:	b7 07       	cpc	r27, r23
    55ea:	10 f0       	brcs	.+4      	; 0x55f0 <__udivmodhi4_ep>
    55ec:	a6 1b       	sub	r26, r22
    55ee:	b7 0b       	sbc	r27, r23

000055f0 <__udivmodhi4_ep>:
    55f0:	88 1f       	adc	r24, r24
    55f2:	99 1f       	adc	r25, r25
    55f4:	5a 95       	dec	r21
    55f6:	a9 f7       	brne	.-22     	; 0x55e2 <__udivmodhi4_loop>
    55f8:	80 95       	com	r24
    55fa:	90 95       	com	r25
    55fc:	bc 01       	movw	r22, r24
    55fe:	cd 01       	movw	r24, r26
    5600:	08 95       	ret

00005602 <__prologue_saves__>:
    5602:	2f 92       	push	r2
    5604:	3f 92       	push	r3
    5606:	4f 92       	push	r4
    5608:	5f 92       	push	r5
    560a:	6f 92       	push	r6
    560c:	7f 92       	push	r7
    560e:	8f 92       	push	r8
    5610:	9f 92       	push	r9
    5612:	af 92       	push	r10
    5614:	bf 92       	push	r11
    5616:	cf 92       	push	r12
    5618:	df 92       	push	r13
    561a:	ef 92       	push	r14
    561c:	ff 92       	push	r15
    561e:	0f 93       	push	r16
    5620:	1f 93       	push	r17
    5622:	cf 93       	push	r28
    5624:	df 93       	push	r29
    5626:	cd b7       	in	r28, 0x3d	; 61
    5628:	de b7       	in	r29, 0x3e	; 62
    562a:	ca 1b       	sub	r28, r26
    562c:	db 0b       	sbc	r29, r27
    562e:	0f b6       	in	r0, 0x3f	; 63
    5630:	f8 94       	cli
    5632:	de bf       	out	0x3e, r29	; 62
    5634:	0f be       	out	0x3f, r0	; 63
    5636:	cd bf       	out	0x3d, r28	; 61
    5638:	19 94       	eijmp

0000563a <__epilogue_restores__>:
    563a:	2a 88       	ldd	r2, Y+18	; 0x12
    563c:	39 88       	ldd	r3, Y+17	; 0x11
    563e:	48 88       	ldd	r4, Y+16	; 0x10
    5640:	5f 84       	ldd	r5, Y+15	; 0x0f
    5642:	6e 84       	ldd	r6, Y+14	; 0x0e
    5644:	7d 84       	ldd	r7, Y+13	; 0x0d
    5646:	8c 84       	ldd	r8, Y+12	; 0x0c
    5648:	9b 84       	ldd	r9, Y+11	; 0x0b
    564a:	aa 84       	ldd	r10, Y+10	; 0x0a
    564c:	b9 84       	ldd	r11, Y+9	; 0x09
    564e:	c8 84       	ldd	r12, Y+8	; 0x08
    5650:	df 80       	ldd	r13, Y+7	; 0x07
    5652:	ee 80       	ldd	r14, Y+6	; 0x06
    5654:	fd 80       	ldd	r15, Y+5	; 0x05
    5656:	0c 81       	ldd	r16, Y+4	; 0x04
    5658:	1b 81       	ldd	r17, Y+3	; 0x03
    565a:	aa 81       	ldd	r26, Y+2	; 0x02
    565c:	b9 81       	ldd	r27, Y+1	; 0x01
    565e:	ce 0f       	add	r28, r30
    5660:	d1 1d       	adc	r29, r1
    5662:	0f b6       	in	r0, 0x3f	; 63
    5664:	f8 94       	cli
    5666:	de bf       	out	0x3e, r29	; 62
    5668:	0f be       	out	0x3f, r0	; 63
    566a:	cd bf       	out	0x3d, r28	; 61
    566c:	ed 01       	movw	r28, r26
    566e:	08 95       	ret

00005670 <malloc>:
    5670:	cf 93       	push	r28
    5672:	df 93       	push	r29
    5674:	bc 01       	movw	r22, r24
    5676:	82 30       	cpi	r24, 0x02	; 2
    5678:	91 05       	cpc	r25, r1
    567a:	10 f4       	brcc	.+4      	; 0x5680 <malloc+0x10>
    567c:	62 e0       	ldi	r22, 0x02	; 2
    567e:	70 e0       	ldi	r23, 0x00	; 0
    5680:	a0 91 9f 04 	lds	r26, 0x049F
    5684:	b0 91 a0 04 	lds	r27, 0x04A0
    5688:	ed 01       	movw	r28, r26
    568a:	e0 e0       	ldi	r30, 0x00	; 0
    568c:	f0 e0       	ldi	r31, 0x00	; 0
    568e:	40 e0       	ldi	r20, 0x00	; 0
    5690:	50 e0       	ldi	r21, 0x00	; 0
    5692:	21 c0       	rjmp	.+66     	; 0x56d6 <malloc+0x66>
    5694:	88 81       	ld	r24, Y
    5696:	99 81       	ldd	r25, Y+1	; 0x01
    5698:	86 17       	cp	r24, r22
    569a:	97 07       	cpc	r25, r23
    569c:	69 f4       	brne	.+26     	; 0x56b8 <malloc+0x48>
    569e:	8a 81       	ldd	r24, Y+2	; 0x02
    56a0:	9b 81       	ldd	r25, Y+3	; 0x03
    56a2:	30 97       	sbiw	r30, 0x00	; 0
    56a4:	19 f0       	breq	.+6      	; 0x56ac <malloc+0x3c>
    56a6:	93 83       	std	Z+3, r25	; 0x03
    56a8:	82 83       	std	Z+2, r24	; 0x02
    56aa:	04 c0       	rjmp	.+8      	; 0x56b4 <malloc+0x44>
    56ac:	90 93 a0 04 	sts	0x04A0, r25
    56b0:	80 93 9f 04 	sts	0x049F, r24
    56b4:	fe 01       	movw	r30, r28
    56b6:	34 c0       	rjmp	.+104    	; 0x5720 <malloc+0xb0>
    56b8:	68 17       	cp	r22, r24
    56ba:	79 07       	cpc	r23, r25
    56bc:	38 f4       	brcc	.+14     	; 0x56cc <malloc+0x5c>
    56be:	41 15       	cp	r20, r1
    56c0:	51 05       	cpc	r21, r1
    56c2:	19 f0       	breq	.+6      	; 0x56ca <malloc+0x5a>
    56c4:	84 17       	cp	r24, r20
    56c6:	95 07       	cpc	r25, r21
    56c8:	08 f4       	brcc	.+2      	; 0x56cc <malloc+0x5c>
    56ca:	ac 01       	movw	r20, r24
    56cc:	fe 01       	movw	r30, r28
    56ce:	8a 81       	ldd	r24, Y+2	; 0x02
    56d0:	9b 81       	ldd	r25, Y+3	; 0x03
    56d2:	9c 01       	movw	r18, r24
    56d4:	e9 01       	movw	r28, r18
    56d6:	20 97       	sbiw	r28, 0x00	; 0
    56d8:	e9 f6       	brne	.-70     	; 0x5694 <malloc+0x24>
    56da:	41 15       	cp	r20, r1
    56dc:	51 05       	cpc	r21, r1
    56de:	a9 f1       	breq	.+106    	; 0x574a <malloc+0xda>
    56e0:	ca 01       	movw	r24, r20
    56e2:	86 1b       	sub	r24, r22
    56e4:	97 0b       	sbc	r25, r23
    56e6:	04 97       	sbiw	r24, 0x04	; 4
    56e8:	08 f4       	brcc	.+2      	; 0x56ec <malloc+0x7c>
    56ea:	ba 01       	movw	r22, r20
    56ec:	e0 e0       	ldi	r30, 0x00	; 0
    56ee:	f0 e0       	ldi	r31, 0x00	; 0
    56f0:	2a c0       	rjmp	.+84     	; 0x5746 <malloc+0xd6>
    56f2:	8d 91       	ld	r24, X+
    56f4:	9c 91       	ld	r25, X
    56f6:	11 97       	sbiw	r26, 0x01	; 1
    56f8:	84 17       	cp	r24, r20
    56fa:	95 07       	cpc	r25, r21
    56fc:	f9 f4       	brne	.+62     	; 0x573c <malloc+0xcc>
    56fe:	64 17       	cp	r22, r20
    5700:	75 07       	cpc	r23, r21
    5702:	81 f4       	brne	.+32     	; 0x5724 <malloc+0xb4>
    5704:	12 96       	adiw	r26, 0x02	; 2
    5706:	8d 91       	ld	r24, X+
    5708:	9c 91       	ld	r25, X
    570a:	13 97       	sbiw	r26, 0x03	; 3
    570c:	30 97       	sbiw	r30, 0x00	; 0
    570e:	19 f0       	breq	.+6      	; 0x5716 <malloc+0xa6>
    5710:	93 83       	std	Z+3, r25	; 0x03
    5712:	82 83       	std	Z+2, r24	; 0x02
    5714:	04 c0       	rjmp	.+8      	; 0x571e <malloc+0xae>
    5716:	90 93 a0 04 	sts	0x04A0, r25
    571a:	80 93 9f 04 	sts	0x049F, r24
    571e:	fd 01       	movw	r30, r26
    5720:	32 96       	adiw	r30, 0x02	; 2
    5722:	4f c0       	rjmp	.+158    	; 0x57c2 <malloc+0x152>
    5724:	ca 01       	movw	r24, r20
    5726:	86 1b       	sub	r24, r22
    5728:	97 0b       	sbc	r25, r23
    572a:	fd 01       	movw	r30, r26
    572c:	e8 0f       	add	r30, r24
    572e:	f9 1f       	adc	r31, r25
    5730:	61 93       	st	Z+, r22
    5732:	71 93       	st	Z+, r23
    5734:	02 97       	sbiw	r24, 0x02	; 2
    5736:	8d 93       	st	X+, r24
    5738:	9c 93       	st	X, r25
    573a:	43 c0       	rjmp	.+134    	; 0x57c2 <malloc+0x152>
    573c:	fd 01       	movw	r30, r26
    573e:	82 81       	ldd	r24, Z+2	; 0x02
    5740:	93 81       	ldd	r25, Z+3	; 0x03
    5742:	9c 01       	movw	r18, r24
    5744:	d9 01       	movw	r26, r18
    5746:	10 97       	sbiw	r26, 0x00	; 0
    5748:	a1 f6       	brne	.-88     	; 0x56f2 <malloc+0x82>
    574a:	80 91 9d 04 	lds	r24, 0x049D
    574e:	90 91 9e 04 	lds	r25, 0x049E
    5752:	89 2b       	or	r24, r25
    5754:	41 f4       	brne	.+16     	; 0x5766 <malloc+0xf6>
    5756:	80 91 08 04 	lds	r24, 0x0408
    575a:	90 91 09 04 	lds	r25, 0x0409
    575e:	90 93 9e 04 	sts	0x049E, r25
    5762:	80 93 9d 04 	sts	0x049D, r24
    5766:	40 91 0a 04 	lds	r20, 0x040A
    576a:	50 91 0b 04 	lds	r21, 0x040B
    576e:	41 15       	cp	r20, r1
    5770:	51 05       	cpc	r21, r1
    5772:	41 f4       	brne	.+16     	; 0x5784 <malloc+0x114>
    5774:	4d b7       	in	r20, 0x3d	; 61
    5776:	5e b7       	in	r21, 0x3e	; 62
    5778:	80 91 06 04 	lds	r24, 0x0406
    577c:	90 91 07 04 	lds	r25, 0x0407
    5780:	48 1b       	sub	r20, r24
    5782:	59 0b       	sbc	r21, r25
    5784:	20 91 9d 04 	lds	r18, 0x049D
    5788:	30 91 9e 04 	lds	r19, 0x049E
    578c:	24 17       	cp	r18, r20
    578e:	35 07       	cpc	r19, r21
    5790:	b0 f4       	brcc	.+44     	; 0x57be <malloc+0x14e>
    5792:	ca 01       	movw	r24, r20
    5794:	82 1b       	sub	r24, r18
    5796:	93 0b       	sbc	r25, r19
    5798:	86 17       	cp	r24, r22
    579a:	97 07       	cpc	r25, r23
    579c:	80 f0       	brcs	.+32     	; 0x57be <malloc+0x14e>
    579e:	ab 01       	movw	r20, r22
    57a0:	4e 5f       	subi	r20, 0xFE	; 254
    57a2:	5f 4f       	sbci	r21, 0xFF	; 255
    57a4:	84 17       	cp	r24, r20
    57a6:	95 07       	cpc	r25, r21
    57a8:	50 f0       	brcs	.+20     	; 0x57be <malloc+0x14e>
    57aa:	42 0f       	add	r20, r18
    57ac:	53 1f       	adc	r21, r19
    57ae:	50 93 9e 04 	sts	0x049E, r21
    57b2:	40 93 9d 04 	sts	0x049D, r20
    57b6:	f9 01       	movw	r30, r18
    57b8:	61 93       	st	Z+, r22
    57ba:	71 93       	st	Z+, r23
    57bc:	02 c0       	rjmp	.+4      	; 0x57c2 <malloc+0x152>
    57be:	e0 e0       	ldi	r30, 0x00	; 0
    57c0:	f0 e0       	ldi	r31, 0x00	; 0
    57c2:	cf 01       	movw	r24, r30
    57c4:	df 91       	pop	r29
    57c6:	cf 91       	pop	r28
    57c8:	08 95       	ret

000057ca <free>:
    57ca:	cf 93       	push	r28
    57cc:	df 93       	push	r29
    57ce:	00 97       	sbiw	r24, 0x00	; 0
    57d0:	09 f4       	brne	.+2      	; 0x57d4 <free+0xa>
    57d2:	50 c0       	rjmp	.+160    	; 0x5874 <free+0xaa>
    57d4:	ec 01       	movw	r28, r24
    57d6:	22 97       	sbiw	r28, 0x02	; 2
    57d8:	1b 82       	std	Y+3, r1	; 0x03
    57da:	1a 82       	std	Y+2, r1	; 0x02
    57dc:	a0 91 9f 04 	lds	r26, 0x049F
    57e0:	b0 91 a0 04 	lds	r27, 0x04A0
    57e4:	10 97       	sbiw	r26, 0x00	; 0
    57e6:	09 f1       	breq	.+66     	; 0x582a <free+0x60>
    57e8:	40 e0       	ldi	r20, 0x00	; 0
    57ea:	50 e0       	ldi	r21, 0x00	; 0
    57ec:	ac 17       	cp	r26, r28
    57ee:	bd 07       	cpc	r27, r29
    57f0:	08 f1       	brcs	.+66     	; 0x5834 <free+0x6a>
    57f2:	bb 83       	std	Y+3, r27	; 0x03
    57f4:	aa 83       	std	Y+2, r26	; 0x02
    57f6:	fe 01       	movw	r30, r28
    57f8:	21 91       	ld	r18, Z+
    57fa:	31 91       	ld	r19, Z+
    57fc:	e2 0f       	add	r30, r18
    57fe:	f3 1f       	adc	r31, r19
    5800:	ae 17       	cp	r26, r30
    5802:	bf 07       	cpc	r27, r31
    5804:	79 f4       	brne	.+30     	; 0x5824 <free+0x5a>
    5806:	8d 91       	ld	r24, X+
    5808:	9c 91       	ld	r25, X
    580a:	11 97       	sbiw	r26, 0x01	; 1
    580c:	28 0f       	add	r18, r24
    580e:	39 1f       	adc	r19, r25
    5810:	2e 5f       	subi	r18, 0xFE	; 254
    5812:	3f 4f       	sbci	r19, 0xFF	; 255
    5814:	39 83       	std	Y+1, r19	; 0x01
    5816:	28 83       	st	Y, r18
    5818:	12 96       	adiw	r26, 0x02	; 2
    581a:	8d 91       	ld	r24, X+
    581c:	9c 91       	ld	r25, X
    581e:	13 97       	sbiw	r26, 0x03	; 3
    5820:	9b 83       	std	Y+3, r25	; 0x03
    5822:	8a 83       	std	Y+2, r24	; 0x02
    5824:	41 15       	cp	r20, r1
    5826:	51 05       	cpc	r21, r1
    5828:	71 f4       	brne	.+28     	; 0x5846 <free+0x7c>
    582a:	d0 93 a0 04 	sts	0x04A0, r29
    582e:	c0 93 9f 04 	sts	0x049F, r28
    5832:	20 c0       	rjmp	.+64     	; 0x5874 <free+0xaa>
    5834:	12 96       	adiw	r26, 0x02	; 2
    5836:	8d 91       	ld	r24, X+
    5838:	9c 91       	ld	r25, X
    583a:	13 97       	sbiw	r26, 0x03	; 3
    583c:	ad 01       	movw	r20, r26
    583e:	00 97       	sbiw	r24, 0x00	; 0
    5840:	11 f0       	breq	.+4      	; 0x5846 <free+0x7c>
    5842:	dc 01       	movw	r26, r24
    5844:	d3 cf       	rjmp	.-90     	; 0x57ec <free+0x22>
    5846:	fa 01       	movw	r30, r20
    5848:	d3 83       	std	Z+3, r29	; 0x03
    584a:	c2 83       	std	Z+2, r28	; 0x02
    584c:	21 91       	ld	r18, Z+
    584e:	31 91       	ld	r19, Z+
    5850:	e2 0f       	add	r30, r18
    5852:	f3 1f       	adc	r31, r19
    5854:	ce 17       	cp	r28, r30
    5856:	df 07       	cpc	r29, r31
    5858:	69 f4       	brne	.+26     	; 0x5874 <free+0xaa>
    585a:	88 81       	ld	r24, Y
    585c:	99 81       	ldd	r25, Y+1	; 0x01
    585e:	28 0f       	add	r18, r24
    5860:	39 1f       	adc	r19, r25
    5862:	2e 5f       	subi	r18, 0xFE	; 254
    5864:	3f 4f       	sbci	r19, 0xFF	; 255
    5866:	fa 01       	movw	r30, r20
    5868:	31 83       	std	Z+1, r19	; 0x01
    586a:	20 83       	st	Z, r18
    586c:	8a 81       	ldd	r24, Y+2	; 0x02
    586e:	9b 81       	ldd	r25, Y+3	; 0x03
    5870:	93 83       	std	Z+3, r25	; 0x03
    5872:	82 83       	std	Z+2, r24	; 0x02
    5874:	df 91       	pop	r29
    5876:	cf 91       	pop	r28
    5878:	08 95       	ret

0000587a <itoa>:
    587a:	fb 01       	movw	r30, r22
    587c:	9f 01       	movw	r18, r30
    587e:	e8 94       	clt
    5880:	42 30       	cpi	r20, 0x02	; 2
    5882:	c4 f0       	brlt	.+48     	; 0x58b4 <itoa+0x3a>
    5884:	45 32       	cpi	r20, 0x25	; 37
    5886:	b4 f4       	brge	.+44     	; 0x58b4 <itoa+0x3a>
    5888:	4a 30       	cpi	r20, 0x0A	; 10
    588a:	29 f4       	brne	.+10     	; 0x5896 <itoa+0x1c>
    588c:	97 fb       	bst	r25, 7
    588e:	1e f4       	brtc	.+6      	; 0x5896 <itoa+0x1c>
    5890:	90 95       	com	r25
    5892:	81 95       	neg	r24
    5894:	9f 4f       	sbci	r25, 0xFF	; 255
    5896:	64 2f       	mov	r22, r20
    5898:	77 27       	eor	r23, r23
    589a:	0e 94 ed 2a 	call	0x55da	; 0x55da <__udivmodhi4>
    589e:	80 5d       	subi	r24, 0xD0	; 208
    58a0:	8a 33       	cpi	r24, 0x3A	; 58
    58a2:	0c f0       	brlt	.+2      	; 0x58a6 <itoa+0x2c>
    58a4:	89 5d       	subi	r24, 0xD9	; 217
    58a6:	81 93       	st	Z+, r24
    58a8:	cb 01       	movw	r24, r22
    58aa:	00 97       	sbiw	r24, 0x00	; 0
    58ac:	a1 f7       	brne	.-24     	; 0x5896 <itoa+0x1c>
    58ae:	16 f4       	brtc	.+4      	; 0x58b4 <itoa+0x3a>
    58b0:	5d e2       	ldi	r21, 0x2D	; 45
    58b2:	51 93       	st	Z+, r21
    58b4:	10 82       	st	Z, r1
    58b6:	c9 01       	movw	r24, r18
    58b8:	0c 94 5e 2c 	jmp	0x58bc	; 0x58bc <strrev>

000058bc <strrev>:
    58bc:	dc 01       	movw	r26, r24
    58be:	fc 01       	movw	r30, r24
    58c0:	67 2f       	mov	r22, r23
    58c2:	71 91       	ld	r23, Z+
    58c4:	77 23       	and	r23, r23
    58c6:	e1 f7       	brne	.-8      	; 0x58c0 <strrev+0x4>
    58c8:	32 97       	sbiw	r30, 0x02	; 2
    58ca:	04 c0       	rjmp	.+8      	; 0x58d4 <strrev+0x18>
    58cc:	7c 91       	ld	r23, X
    58ce:	6d 93       	st	X+, r22
    58d0:	70 83       	st	Z, r23
    58d2:	62 91       	ld	r22, -Z
    58d4:	ae 17       	cp	r26, r30
    58d6:	bf 07       	cpc	r27, r31
    58d8:	c8 f3       	brcs	.-14     	; 0x58cc <strrev+0x10>
    58da:	08 95       	ret

000058dc <_exit>:
    58dc:	f8 94       	cli

000058de <__stop_program>:
    58de:	ff cf       	rjmp	.-2      	; 0x58de <__stop_program>
